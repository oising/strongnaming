<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PowerShell.GraphicalHost</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Management.UI.Internal.GraphicalHostResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.GraphicalHostResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.GraphicalHostResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.GraphicalHostResources.OutGridViewWindowObjectName">
            <summary>
              Looks up a localized string similar to OutGridViewWindow Object.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.InvariantResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InvariantResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InvariantResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InvariantResources.CannotModified">
            <summary>
              Looks up a localized string similar to {0} cannot be modified directly, use {1} instead..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InvariantResources.Columns">
            <summary>
              Looks up a localized string similar to Columns.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InvariantResources.ManagementListDateTimeColumnFormatString">
            <summary>
              Looks up a localized string similar to {0:G}.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InvariantResources.ManagementListDefaultColumnFormatString">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InvariantResources.ManagementListFloatColumnFormatString">
            <summary>
              Looks up a localized string similar to {0:N}.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InvariantResources.ManagementListIntegerColumnFormatString">
            <summary>
              Looks up a localized string similar to {0:N0}.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InvariantResources.NotSupportAddingToItems">
            <summary>
              Looks up a localized string similar to {0} does not support adding to the Items collection, use {1} instead..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InvariantResources.ViewSetWithType">
            <summary>
              Looks up a localized string similar to If View is set to a {0}, it should have the type {1}..
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.UICultureResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.BackForwardHistory_BrowseBack_Disabled_Helptext">
            <summary>
              Looks up a localized string similar to Back.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.BackForwardHistory_BrowseForward_Disabled_Helptext">
            <summary>
              Looks up a localized string similar to Forward.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ColumnPicker">
            <summary>
              Looks up a localized string similar to Select Columns....
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.Ellipsis">
            <summary>
              Looks up a localized string similar to â€¦.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ErrorMessageForUnparsableDateTimeType">
            <summary>
              Looks up a localized string similar to The value must be a valid date in the following format: {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ErrorMessageForUnparsableNumericType">
            <summary>
              Looks up a localized string similar to The value must be a valid number..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ErrorTextBoxTypeConversionErrorText">
            <summary>
              Looks up a localized string similar to Value should be of Type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_Contains">
            <summary>
              Looks up a localized string similar to contains.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_DoesNotContain">
            <summary>
              Looks up a localized string similar to does not contain.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_DoesNotEqual">
            <summary>
              Looks up a localized string similar to does not equal.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_Equals">
            <summary>
              Looks up a localized string similar to equals.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_GreaterThanOrEqual">
            <summary>
              Looks up a localized string similar to is greater than or equal to.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_IsBetween">
            <summary>
              Looks up a localized string similar to is between.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_IsEmpty">
            <summary>
              Looks up a localized string similar to is empty.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_IsNotEmpty">
            <summary>
              Looks up a localized string similar to is not empty.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_LessThanOrEqual">
            <summary>
              Looks up a localized string similar to is less than or equal to.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_TextEndsWith">
            <summary>
              Looks up a localized string similar to ends with.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FilterRule_TextStartsWith">
            <summary>
              Looks up a localized string similar to starts with.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.FlowDirection">
            <summary>
              Looks up a localized string similar to LeftToRight.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.GroupTitleNone">
            <summary>
              Looks up a localized string similar to (none).
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.SearchBox_BackgroundText">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ValidatingSelectorValueOutOfBounds">
            <summary>
              Looks up a localized string similar to The current selection is empty..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ZoomIn1Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Add.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ZoomIn2Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Add.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ZoomIn3Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Plus.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ZoomIn4Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Plus.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ZoomOut1Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Subtract.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ZoomOut2Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Subtract.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ZoomOut3Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Minus.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UICultureResources.ZoomOut4Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Minus.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.XamlLocalizableResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_157">
            <summary>
              Looks up a localized string similar to Shortcut Rules.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_180">
            <summary>
              Looks up a localized string similar to Columns Rules.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_AddFilterRulePicker_AutomationPropertiesName_293">
            <summary>
              Looks up a localized string similar to Add Filter Criteria.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_AddFilterRulePicker_Content_214">
            <summary>
              Looks up a localized string similar to Add.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_AddFilterRulePicker_Content_223">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_BackForwardHistory_AutomationPropertiesName_613">
            <summary>
              Looks up a localized string similar to Back.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_BackForwardHistory_AutomationPropertiesName_619">
            <summary>
              Looks up a localized string similar to Forward.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_BreadcrumbItem_AutomationPropertiesName_142">
            <summary>
              Looks up a localized string similar to Filter.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_BreadcrumbItem_Text_144">
            <summary>
              Looks up a localized string similar to Find in this column.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_AutomationPropertiesName_104">
            <summary>
              Looks up a localized string similar to Selected Columns.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_AutomationPropertiesName_49">
            <summary>
              Looks up a localized string similar to Available Columns.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_AutomationPropertiesName_75">
            <summary>
              Looks up a localized string similar to Add.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_AutomationPropertiesName_86">
            <summary>
              Looks up a localized string similar to Remove.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Content_127">
            <summary>
              Looks up a localized string similar to Move up.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Content_134">
            <summary>
              Looks up a localized string similar to Move down.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Content_189">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Content_199">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Content_42">
            <summary>
              Looks up a localized string similar to Available columns.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Content_5">
            <summary>
              Looks up a localized string similar to Select columns.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Content_73">
            <summary>
              Looks up a localized string similar to &gt;&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Content_84">
            <summary>
              Looks up a localized string similar to &lt;&lt;.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Content_93">
            <summary>
              Looks up a localized string similar to Selected columns.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Text_142">
            <summary>
              Looks up a localized string similar to This column may not be removed..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Text_152">
            <summary>
              Looks up a localized string similar to The list must always display at least one column..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Tooltip_76">
            <summary>
              Looks up a localized string similar to Move selected column to list of visible columns.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ColumnPicker_Tooltip_84">
            <summary>
              Looks up a localized string similar to Move selected column to list of hidden columns.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_DesignerStyleResources_ToolTip_119">
            <summary>
              Looks up a localized string similar to Collapse.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_DesignerStyleResources_Tooltip_148">
            <summary>
              Looks up a localized string similar to Expand.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_DesignerStyleResources_ToolTip_160">
            <summary>
              Looks up a localized string similar to Collapse.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_DesignerStyleResources_ToolTip_97">
            <summary>
              Looks up a localized string similar to Expand.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_FilterRulePanel_AutomationPropertiesName_199">
            <summary>
              Looks up a localized string similar to Value.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_FilterRulePanel_AutomationPropertiesName_257">
            <summary>
              Looks up a localized string similar to Rules.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_FilterRulePanel_BackgroundText_200">
            <summary>
              Looks up a localized string similar to &lt;Empty&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ListOrganizer_AutomationPropertiesName_47">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ListOrganizer_AutomationPropertiesName_72">
            <summary>
              Looks up a localized string similar to Rename.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ListOrganizer_AutomationPropertiesName_95">
            <summary>
              Looks up a localized string similar to Name.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList_AutomationPropertiesName_302">
            <summary>
              Looks up a localized string similar to Delete.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList_AutomationPropertiesName_395">
            <summary>
              Looks up a localized string similar to Clear All.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList_Text_392">
            <summary>
              Looks up a localized string similar to Filter applied..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList_Text_602">
            <summary>
              Looks up a localized string similar to New Query.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList_TextBlock_106">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList_TextBlock_129">
            <summary>
              Looks up a localized string similar to Clear All.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList_TextBlock_83">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList_ToolTip_314">
            <summary>
              Looks up a localized string similar to Click to display saved search queries..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_AutomationPropertiesName_314">
            <summary>
              Looks up a localized string similar to Click to save a search query.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_AutomationPropertiesName_52">
            <summary>
              Looks up a localized string similar to Queries.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_Content_186">
            <summary>
              Looks up a localized string similar to Ok.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_Content_19">
            <summary>
              Looks up a localized string similar to Query.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_Content_196">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_Content_33">
            <summary>
              Looks up a localized string similar to Queries.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_NoItemsText_50">
            <summary>
              Looks up a localized string similar to There are currently no saved queries..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_Text_124">
            <summary>
              Looks up a localized string similar to Add criteria.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_Text_166">
            <summary>
              Looks up a localized string similar to Overwrite the existing query or type a different name to save a new query. Each query consists of criteria, sorting, and column customizations..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_ToolTip_104">
            <summary>
              Looks up a localized string similar to Click to clear all filter criteria..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_ToolTip_132">
            <summary>
              Looks up a localized string similar to Click to add search criteria..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_ManagementList2_ToolTip_32">
            <summary>
              Looks up a localized string similar to Click to expand search criteria..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_SearchBox_AutomationPropertiesName_75">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_SearchBox_AutomationPropertiesName_85">
            <summary>
              Looks up a localized string similar to Clear Search Text.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_TaskPane_AutomationPropertiesName_133">
            <summary>
              Looks up a localized string similar to Tasks.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_TaskPane_Text_74">
            <summary>
              Looks up a localized string similar to Tasks.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_Tile_AutomationPropertiesName_674">
            <summary>
              Looks up a localized string similar to Tasks.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.AutoResXGen_WaitingRing_AutomationPropertiesName_74">
            <summary>
              Looks up a localized string similar to Indeterminate Progress Icon.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.CollapsingTabControl_CollapseButton_AutomationName">
            <summary>
              Looks up a localized string similar to Expand.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.CollapsingTabControl_CollapseButton_ToolTip">
            <summary>
              Looks up a localized string similar to Collapse.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.CollapsingTabControl_ExpandButton_AutomationName">
            <summary>
              Looks up a localized string similar to Collapse.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.CollapsingTabControl_ExpandButton_ToolTip">
            <summary>
              Looks up a localized string similar to Expand.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ColumnsExplorer_Column_FindTextBox_AutomationName">
            <summary>
              Looks up a localized string similar to Filter.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ColumnsExplorer_Column_FindTextBox_BackgroundText">
            <summary>
              Looks up a localized string similar to Find in this column.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.FilterRule_AccessibleName">
            <summary>
              Looks up a localized string similar to {0} rule.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.FilterRulePanel_LogicalOperatorText_FirstHeader">
            <summary>
              Looks up a localized string similar to and.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.FilterRulePanel_LogicalOperatorText_Header">
            <summary>
              Looks up a localized string similar to and.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.FilterRulePanel_LogicalOperatorText_Item">
            <summary>
              Looks up a localized string similar to or.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.InnerList_GridViewColumnHeader_ItemStatus_Ascending">
            <summary>
              Looks up a localized string similar to Sorted ascending.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.InnerList_GridViewColumnHeader_ItemStatus_Descending">
            <summary>
              Looks up a localized string similar to Sorted descending.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementList_NoMatchesFound_Message">
            <summary>
              Looks up a localized string similar to No matches found..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementList_SearchBox_BackgroundText_Live">
            <summary>
              Looks up a localized string similar to Filter.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementList_SortGlyph_Ascending_AutomationName">
            <summary>
              Looks up a localized string similar to Sort Glyph.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementList_SortGlyph_Descending_AutomationName">
            <summary>
              Looks up a localized string similar to Sort Glyph.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementList_StartFilterButton_AutomationName">
            <summary>
              Looks up a localized string similar to Search.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementList_StopFilterButton_AutomationName">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementList_ToggleFilterPanelButton_AutomationName">
            <summary>
              Looks up a localized string similar to Expand or Collapse Filter Panel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementListTitle_ListStatus_FilterApplied">
            <summary>
              Looks up a localized string similar to ({0} of {1}).
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementListTitle_ListStatus_FilterInProgress">
            <summary>
              Looks up a localized string similar to Searching....
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementListTitle_ListStatus_FilterNotApplied">
            <summary>
              Looks up a localized string similar to ({0}).
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.ManagementListTitle_Title_WithViewName">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.NavigationList_ShownChildrenButton_AutomationName">
            <summary>
              Looks up a localized string similar to Show Children.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.NavigationList_ShownChildrenButton_ToolTip">
            <summary>
              Looks up a localized string similar to Show Children.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.OutGridView_Button_Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.XamlLocalizableResources.OutGridView_Button_OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.HelpWindowResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.CancelText">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.CaseSensitiveTitle">
            <summary>
              Looks up a localized string similar to Match Case.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.CommonParameters">
            <summary>
              Looks up a localized string similar to CommonParameters.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.DescriptionTitle">
            <summary>
              Looks up a localized string similar to Description.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.ExamplesTitle">
            <summary>
              Looks up a localized string similar to Examples.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.FindText">
            <summary>
              Looks up a localized string similar to _Find:.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.HelpSectionsTitle">
            <summary>
              Looks up a localized string similar to Help Sections.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.HelpTitleFormat">
            <summary>
              Looks up a localized string similar to {0} Help.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.InputsTitle">
            <summary>
              Looks up a localized string similar to Inputs.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.LinkTextFormat">
            <summary>
              Looks up a localized string similar to {0} {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.MethodsTitle">
            <summary>
              Looks up a localized string similar to Methods.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.NextText">
            <summary>
              Looks up a localized string similar to _Next.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.NoMatches">
            <summary>
              Looks up a localized string similar to No matches found.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.NotesTitle">
            <summary>
              Looks up a localized string similar to Notes.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.OKText">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.OneMatch">
            <summary>
              Looks up a localized string similar to 1 match.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.OutputsTitle">
            <summary>
              Looks up a localized string similar to Outputs.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.ParameterAcceptWildcard">
            <summary>
              Looks up a localized string similar to Accept wildcard characters?.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.ParameterDefautValue">
            <summary>
              Looks up a localized string similar to Default value.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.ParameterPipelineInput">
            <summary>
              Looks up a localized string similar to Accept pipeline input?.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.ParameterPosition">
            <summary>
              Looks up a localized string similar to Position?.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.ParameterRequired">
            <summary>
              Looks up a localized string similar to Required?.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.ParametersTitle">
            <summary>
              Looks up a localized string similar to Parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.PreviousText">
            <summary>
              Looks up a localized string similar to _Previous.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.PropertiesTitle">
            <summary>
              Looks up a localized string similar to Properties.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.RelatedLinksTitle">
            <summary>
              Looks up a localized string similar to RelatedLinks.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.RemarksTitle">
            <summary>
              Looks up a localized string similar to Remarks.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.SearchOptionsTitle">
            <summary>
              Looks up a localized string similar to Search Options.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.SettingsText">
            <summary>
              Looks up a localized string similar to Settings.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.SomeMatchesFormat">
            <summary>
              Looks up a localized string similar to {0} matches.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.SynopsisTitle">
            <summary>
              Looks up a localized string similar to Synopsis.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.SyntaxTitle">
            <summary>
              Looks up a localized string similar to Syntax.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.Title">
            <summary>
              Looks up a localized string similar to Help for {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.WholeWordTitle">
            <summary>
              Looks up a localized string similar to Whole Word.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.ZoomLabelTextFormat">
            <summary>
              Looks up a localized string similar to {0}%.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpWindowResources.ZoomSlider">
            <summary>
              Looks up a localized string similar to Zoom.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ShowCommandResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ActionButtons_Button_Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ActionButtons_Button_Copy">
            <summary>
              Looks up a localized string similar to Co_py.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ActionButtons_Button_Ok">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ActionButtons_Button_Run">
            <summary>
              Looks up a localized string similar to _Run.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.All">
            <summary>
              Looks up a localized string similar to All.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.AllModulesControl_Label_Modules">
            <summary>
              Looks up a localized string similar to Modules:.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.CanReceiveValueFromPipeline">
            <summary>
              Looks up a localized string similar to Can receive value from pipeline.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.CmdletControl_Button_GetHelp">
            <summary>
              Looks up a localized string similar to  ? .
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.CmdletControl_Button_ToolTip_Help">
            <summary>
              Looks up a localized string similar to Help.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.CmdletControl_Header_CommonParameters">
            <summary>
              Looks up a localized string similar to Common Parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.CmdletControl_Header_Errors">
            <summary>
              Looks up a localized string similar to Errors.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.CmdletTooltipFormat">
             <summary>
               Looks up a localized string similar to Name: {0}
            Module: {1} ({2}).
             </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.CommandNameAutomationName">
            <summary>
              Looks up a localized string similar to Command Name.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.CommonToAllParameterSets">
            <summary>
              Looks up a localized string similar to Common to all parameter sets.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.DetailsParameterTitleFormat">
            <summary>
              Looks up a localized string similar to Parameters for &quot;{0}&quot;:.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.EndProcessingErrorMessage">
             <summary>
               Looks up a localized string similar to The following errors occurred running the command:
            {0}.
             </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.Imported">
            <summary>
              Looks up a localized string similar to Imported.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ImportModuleButtonText">
            <summary>
              Looks up a localized string similar to Show Details.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ImportModuleFailedFormat">
            <summary>
              Looks up a localized string similar to Failed to import the module required by command &quot;{0}&quot;. Module name: &quot;{1}&quot;. Error message: &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.Mandatory">
            <summary>
              Looks up a localized string similar to Mandatory.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.MandatoryLabelSegment">
            <summary>
              Looks up a localized string similar to  *.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.MandatoryNameLabelFormat">
            <summary>
              Looks up a localized string similar to {0}:{1}.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ModulesAutomationName">
            <summary>
              Looks up a localized string similar to Modules.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.MultiParameter_Button_Browse">
            <summary>
              Looks up a localized string similar to ....
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.NameLabelFormat">
            <summary>
              Looks up a localized string similar to {0}:.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.NoModuleName">
            <summary>
              Looks up a localized string similar to &lt;No module name&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.NoParameters">
            <summary>
              Looks up a localized string similar to There are no parameters..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.NotImported">
            <summary>
              Looks up a localized string similar to Not Imported.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.NotImportedFormat">
            <summary>
              Looks up a localized string similar to To import the &quot;{0}&quot; module and its cmdlets, including &quot;{1}&quot;, click {2}..
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.Optional">
            <summary>
              Looks up a localized string similar to Optional.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.PleaseWaitMessage">
            <summary>
              Looks up a localized string similar to Please Wait....
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.PositionFormat">
            <summary>
              Looks up a localized string similar to Position: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.RefreshShowCommandTooltipFormat">
            <summary>
              Looks up a localized string similar to Click after using &quot;{0}&quot; to see the new commands.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.SelectMultipleValuesForParameterFormat">
            <summary>
              Looks up a localized string similar to Select multiple values for &quot;{0}&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ShowCommandError">
            <summary>
              Looks up a localized string similar to Show Command - Error.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ShowModuleControl_Label_Name">
            <summary>
              Looks up a localized string similar to Name:.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.ShowModuleControl_RefreshButton">
            <summary>
              Looks up a localized string similar to Refresh.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ShowCommandResources.TypeFormat">
            <summary>
              Looks up a localized string similar to Type: {0}.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.AutomationImage">
            <summary>
            Provides a <see cref="T:System.Windows.Controls.Image"/> control that is always visible in the automation tree.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.AutomationImage" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationImage.OnCreateAutomationPeer">
            <summary>
            Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for this control.
            </summary>
            <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for this control.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.AutomationImageAutomationPeer">
            <summary>
            Provides an automation peer for AutomationImage.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationImageAutomationPeer.#ctor(System.Windows.Controls.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.AutomationImageAutomationPeer" /> class.
            </summary>
            <param name="owner">The owner of the automation peer.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationImageAutomationPeer.IsControlElementCore">
            <summary>
            Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI. Called by IsControlElement().
            </summary>
            <returns>This method always returns false.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.AutomationButton">
            <summary>
            Provides a <see cref="T:System.Windows.Controls.Button"/> control that is always visible in the automation tree.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.AutomationButton" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationButton.OnCreateAutomationPeer">
            <summary>
            Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for this control.
            </summary>
            <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for this control.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.AutomationButtonAutomationPeer">
            <summary>
            Provides an automation peer for AutomationButton.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationButtonAutomationPeer.#ctor(System.Windows.Controls.Button)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.AutomationButtonAutomationPeer" /> class.
            </summary>
            <param name="owner">The owner of the automation peer.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationButtonAutomationPeer.IsControlElementCore">
            <summary>
            Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI. Called by IsControlElement().
            </summary>
            <returns>This method always returns false.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.AutomationTextBlock">
            <summary>
            Provides a <see cref="T:System.Windows.Controls.TextBlock"/> control that is always visible in the automation tree.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationTextBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.AutomationTextBlock" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationTextBlock.OnCreateAutomationPeer">
            <summary>
            Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for this control.
            </summary>
            <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for this control.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.AutomationTextBlockAutomationPeer">
            <summary>
            Provides an automation peer for AutomationTextBlock.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationTextBlockAutomationPeer.#ctor(System.Windows.Controls.TextBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.AutomationTextBlockAutomationPeer" /> class.
            </summary>
            <param name="owner">The owner of the automation peer.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationTextBlockAutomationPeer.IsControlElementCore">
            <summary>
            Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI. Called by IsControlElement().
            </summary>
            <returns>This method always returns true.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationTextBlockAutomationPeer.GetClassNameCore">
            <summary>
            Gets the class name.
            </summary>
            <returns>The class name.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.BooleanBoxes">
            <summary>
            A class which returns the same boxed bool values.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.CustomTypeComparer">
            <summary>
            The CustomTypeComparer is responsible for holding custom comparers
            for different types, which are in turn used to perform comparison
            operations instead of the default IComparable comparison.
            with a custom comparer
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.CustomTypeComparer.#cctor">
            <summary>
            The static constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.CustomTypeComparer.Compare``1(``0,``0)">
            <summary>
            Compares two objects and returns a value indicating 
            whether one is less than, equal to, or greater than the other. 
            </summary>
            <param name="value1">
            The first object to compare.
            </param>
            <param name="value2">
            The second object to compare.
            </param>
            <typeparam name="T">
            A type implementing IComparable.
            </typeparam>
            <returns>
            If value1 is less than value2, then a value less than zero is returned.
            If value1 equals value2, than zero is returned.
            If value1 is greater than value2, then a value greater than zero is returned.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.DataRoutedEventArgs`1">
            <summary>
            Routed event args which provide the ability to attach an 
            arbitrary peice of data.
            </summary>
            <typeparam name="T">There are no restrictions on type T.</typeparam>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DataRoutedEventArgs`1.#ctor(`0,System.Windows.RoutedEvent)">
            <summary>
            Constructs a new instance of the DataRoutedEventArgs class.
            </summary>
            <param name="data">The data payload to be stored.</param>
            <param name="routedEvent">The routed event.</param>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.DataRoutedEventArgs`1.Data">
            <summary>
            Gets a value containing the data being stored.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.DateTimeApproximationComparer">
            <summary>
            The DateTimeApproximationComparer is responsible for comparing two
            DateTime objects at a level of precision determined by
            the first object. The comparison either compares at the
            date level or the date and time (down to Seconds precision).
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DateTimeApproximationComparer.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares two objects and returns a value indicating 
            whether one is less than, equal to, or greater than the other. 
            </summary>
            <param name="value1">
            The first object to compare.
            </param>
            <param name="value2">
            The second object to compare.
            </param>
            <returns>
            If value1 is less than value2, then a value less than zero is returned.
            If value1 equals value2, than zero is returned.
            If value1 is greater than value2, then a value greater than zero is returned.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.DismissiblePopup">
            <content>
            Partial class implementation for DismissiblePopup control.
            </content>
            <summary>
            A popup which child controls can signal to be dimissed.
            </summary>
            <remarks>
            If a control wants to dismiss the popup then they should execute the DismissPopupCommand on a target in the popup window.
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.#ctor">
            <summary>
            Constructs an instance of DismissablePopup.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.OnOpened(System.EventArgs)">
            <summary>
            Responds to the condition in which the value of the IsOpen property changes from false to true. 
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.OnClosed(System.EventArgs)">
            <summary>
            Responds when the value of the IsOpen property changes from to true to false. 
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides class handling for the KeyDown routed event that occurs when the user presses a key while this control has focus.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.DismissiblePopup.DismissPopupCommand">
            <summary>
            A command which child controls can use to tell the popup to close.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.OnDismissPopupExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when DismissPopup executes.
            </summary>
            <remarks>
            A command which child controls can use to tell the popup to close.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.DismissiblePopup.CloseOnEscapeProperty">
            <summary>
            Identifies the CloseOnEscape dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.DismissiblePopup.CloseOnEscape">
            <summary>
            Gets or sets a value indicating whether the popup closes when ESC is pressed.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.DismissiblePopup.CloseOnEscapeChanged">
            <summary>
            Occurs when CloseOnEscape property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.OnCloseOnEscapeChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when CloseOnEscape property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.DismissiblePopup.FocusChildOnOpenProperty">
            <summary>
            Identifies the FocusChildOnOpen dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.DismissiblePopup.FocusChildOnOpen">
            <summary>
            Gets or sets a value indicating whether focus should be set on the child when the popup opens.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.DismissiblePopup.FocusChildOnOpenChanged">
            <summary>
            Occurs when FocusChildOnOpen property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.OnFocusChildOnOpenChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when FocusChildOnOpen property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.DismissiblePopup.SetFocusOnCloseProperty">
            <summary>
            Identifies the SetFocusOnClose dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.DismissiblePopup.SetFocusOnClose">
            <summary>
            Indicates whether the focus returns to either a defined by the FocusOnCloseTarget dependency property UIElement or PlacementTarget or not.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.DismissiblePopup.SetFocusOnCloseChanged">
            <summary>
            Occurs when SetFocusOnClose property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.OnSetFocusOnCloseChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when SetFocusOnClose property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.DismissiblePopup.SetFocusOnCloseElementProperty">
            <summary>
            Identifies the SetFocusOnCloseElement dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.DismissiblePopup.SetFocusOnCloseElement">
            <summary>
            If the SetFocusOnClose property is set True and this property is set to a valid UIElement, focus returns to this UIElement after the DismissiblePopup is closed.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.DismissiblePopup.SetFocusOnCloseElementChanged">
            <summary>
            Occurs when SetFocusOnCloseElement property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.OnSetFocusOnCloseElementChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.UIElement})">
            <summary>
            Called when SetFocusOnCloseElement property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DismissiblePopup.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer">
            <summary>
            Provides a base automation peer for FrameworkElement controls.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer.controlType">
            <summary>
            Gets or sets the control type of the element that is associated with this automation peer.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer.isControlElement">
            <summary>
            Gets or sets a value that indicates whether the control should show in the logical tree.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer" /> class.
            </summary>
            <param name="owner">The owner of the automation peer.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer.#ctor(System.Windows.FrameworkElement,System.Windows.Automation.Peers.AutomationControlType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer" /> class.
            </summary>
            <param name="owner">The owner of the automation peer.</param>
            <param name="controlType">The control type of the element that is associated with the automation peer.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer.#ctor(System.Windows.FrameworkElement,System.Windows.Automation.Peers.AutomationControlType,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer" /> class.
            </summary>
            <param name="owner">The owner of the automation peer.</param>
            <param name="controlType">The control type of the element that is associated with the automation peer.</param>
            <param name="isControlElement">Whether the element should show in the logical tree.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer.GetClassNameCore">
            <summary>
            Gets the class name.
            </summary>
            <returns>The class name.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type of the element that is associated with the automation peer.
            </summary>
            <returns>Returns the control type of the element that is associated with the automation peer.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExtendedFrameworkElementAutomationPeer.IsControlElementCore">
            <summary>
            Gets a value that indicates whether the element is understood by the user as interactive or as contributing to the logical structure of the control in the GUI. Called by IsControlElement().
            </summary>
            <returns>This method always returns true.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IAsyncProgress">
            <summary>
            An interface designed to provide updates about an asynchronous operation.
            If the UI is data bound to the properties in this interface then INotifyPropertyChanged should
            be implemented by the type implementing IAsyncProgress so the UI can get notification of the properties
            being changed.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.IAsyncProgress.OperationInProgress">
            <summary>
            Gets a value indicating whether the async operation is currently running.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.IAsyncProgress.OperationError">
            <summary>
            Gets a the error for the async operation.  This field is only valid if 
            OperationInProgress is false.  null indicates there was no error.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IntegralConverter">
            <summary>
            Takes a value and returns the largest value which is a integral amount of the second value.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IntegralConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Takes a value and returns the largest value which is a integral amount of the second value.
            </summary>
            <param name="values">
            The first value is the source.  The second is the factor.
            </param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The padding to subtract from the first value.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>
            The integral value.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IntegralConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not used.
            </summary>
            <param name="value">The parameter is not used.</param>
            <param name="targetTypes">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The parameter is not used.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.InverseBooleanConverter">
            <summary>
            Takes a bool value and returns the inverse.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a boolean value to be it's inverse.
            </summary>
            <param name="value">The source value.</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The inverted boolean value.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not used.
            </summary>
            <param name="value">The parameter is not used.</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The parameter is not used.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IsEqualConverter">
            <summary>
            Takes two objects and determines whether they are equal.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsEqualConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Takes two items and determines whether they are equal.
            </summary>
            <param name="values">
            Two objects of any type.
            </param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>
            True if-and-only-if the two objects are equal per Object.Equals().
            Null is equal only to null.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsEqualConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not used.
            </summary>
            <param name="value">The parameter is not used.</param>
            <param name="targetTypes">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The parameter is not used.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IsNotNullConverter">
            <summary>
            The IsNotNullConverter is responsible for converting a value into
            a boolean indicting whether the value is not null.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsNotNullConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines if value is not null.
            </summary>
            <param name="value">The object to check.</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>Returns true if value is not null, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsNotNullConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not used.
            </summary>
            <param name="value">The parameter is not used.</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The parameter is not used.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IStateDescriptorFactory`1">
            <summary>
            Defines an interface for a factory that creates
            StateDescriptors.
            </summary>
            <typeparam name="T">The type T used by the StateDescriptor.</typeparam>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IStateDescriptorFactory`1.Create">
            <summary>
            Creates a new StateDescriptor based upon custom
            logic.
            </summary>
            <returns>A new StateDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.KeyboardHelp.GetLogicalDirection(System.Windows.DependencyObject,System.Windows.Input.Key)">
            <summary>
            Gets the logical direction for a key, taking into account RTL settings.
            </summary>
            <param name="element">The element to get FlowDirection from.</param>
            <param name="key">The key pressed.</param>
            <returns>The logical direction.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.KeyboardHelp.GetNavigationDirection(System.Windows.DependencyObject,System.Windows.Input.Key)">
            <summary>
            Gets the focus direction for a key, taking into account RTL settings.
            </summary>
            <param name="element">The element to get FlowDirection from.</param>
            <param name="key">The key pressed.</param>
            <returns>The focus direction.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.KeyboardHelp.IsControlPressed">
            <summary>
            Determines if the control key is pressed.
            </summary>
            <returns>True if a control is is pressed.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.KeyboardHelp.IsFlowDirectionKey(System.Windows.Input.Key)">
            <summary>
            Determines if the key is a navigation key.
            </summary>
            <param name="key">The key pressed.</param>
            <returns>True if the key is a navigation key.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ListOrganizer">
            <summary>
            Picker control that displays a list with basic editing functionality.
            </summary>
            <summary>
            This control presents a dropdown listbox with associated organizing actions that can be performed on it.
            </summary>
            <remarks>
            
            
            If a custom template is provided for this control, then the template MUST provide the following template parts:
            
            	PART_Picker - A required template part which must be of type PickerBase.  This control provides basic functionality for Picker-like controls.
            
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.#ctor">
            <summary>
            Creates a new instance of the ListOrganizer class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Prevents keyboard focus from leaving the dropdown.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizer.ItemDeletedEvent">
            <summary>
            Identifies the ItemDeleted RoutedEvent.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ListOrganizer.ItemDeleted">
            <summary>
            Occurs when an item is deleted from the list.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizer.ItemSelectedEvent">
            <summary>
            Identifies the ItemSelected RoutedEvent.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ListOrganizer.ItemSelected">
            <summary>
            Occurs when an item is selected in the list.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizer.DeleteItemCommand">
            <summary>
            Informs the ListOrganizer that it should delete the item passed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.OnDeleteItemExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when DeleteItem executes.
            </summary>
            <remarks>
            Informs the ListOrganizer that it should delete the item passed.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizer.SelectItemCommand">
            <summary>
            Informs the ListOrganizer that it should select the item passed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.OnSelectItemExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when SelectItem executes.
            </summary>
            <remarks>
            Informs the ListOrganizer that it should select the item passed.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizer.DropDownButtonTemplateProperty">
            <summary>
            Identifies the DropDownButtonTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ListOrganizer.DropDownButtonTemplate">
            <summary>
            Gets or sets a value that controls the visual tree of the DropDown button.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ListOrganizer.DropDownButtonTemplateChanged">
            <summary>
            Occurs when DropDownButtonTemplate property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.OnDropDownButtonTemplateChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.Controls.ControlTemplate})">
            <summary>
            Called when DropDownButtonTemplate property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizer.DropDownStyleProperty">
            <summary>
            Identifies the DropDownStyle dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ListOrganizer.DropDownStyle">
            <summary>
            Gets or sets the style of the drop-down.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ListOrganizer.DropDownStyleChanged">
            <summary>
            Occurs when DropDownStyle property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.OnDropDownStyleChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.Style})">
            <summary>
            Called when DropDownStyle property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizer.HighlightedItemProperty">
            <summary>
            Identifies the HighlightedItem dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ListOrganizer.HighlightedItem">
            <summary>
            Gets or sets a value that controls the highlighted item in the list.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ListOrganizer.HighlightedItemChanged">
            <summary>
            Occurs when HighlightedItem property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.OnHighlightedItemChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Object})">
            <summary>
            Called when HighlightedItem property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizer.ItemsSourceProperty">
            <summary>
            Identifies the ItemsSource dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ListOrganizer.ItemsSource">
            <summary>
            Gets or sets a value that controls the items in the list.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ListOrganizer.ItemsSourceChanged">
            <summary>
            Occurs when ItemsSource property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.OnItemsSourceChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Collections.IEnumerable})">
            <summary>
            Called when ItemsSource property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizer.NoItemsTextProperty">
            <summary>
            Identifies the NoItemsText dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ListOrganizer.NoItemsText">
            <summary>
            Gets or sets a value that appears to inform the user that there are no items in the list.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ListOrganizer.NoItemsTextChanged">
            <summary>
            Occurs when NoItemsText property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.OnNoItemsTextChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.String})">
            <summary>
            Called when NoItemsText property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizer.TextContentPropertyNameProperty">
            <summary>
            Identifies the TextContentPropertyName dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ListOrganizer.TextContentPropertyName">
            <summary>
            Gets or sets a value which dictates what binding is used to provide content for the items in the list.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ListOrganizer.TextContentPropertyNameChanged">
            <summary>
            Occurs when TextContentPropertyName property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.OnTextContentPropertyNameChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.String})">
            <summary>
            Called when TextContentPropertyName property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.OnApplyTemplate">
            <summary>
            Called when ApplyTemplate is called.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizer.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ListOrganizerItem">
            <content>
            Partial class implementation for ListOrganizerItem control.
            </content>
            <summary>
            This control is the row in the ListOrganizer and offers editing functionality.
            </summary>
            <remarks>
            
            
            If a custom template is provided for this control, then the template MUST provide the following template parts:
            
            	PART_DeleteButton - A required template part which must be of type Button.  Button which keeps track of whether the row should be deleted.
            	PART_EditBox - A required template part which must be of type TextBox.  Displays the text content in an editable manner.
            	PART_LinkButton - A required template part which must be of type Button.  Displays the text content in a read-only manner and allows single click selection.
            	PART_RenameButton - A required template part which must be of type ToggleButton.  Button which allows for editing the name of the item.
            
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizerItem.#ctor">
            <summary>
            Creates a new instance of the ListOrganizerItem class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ListOrganizerItem.IsInEditMode">
            <summary>
            Gets a value indicating whether the item is in edit mode.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizerItem.Select">
            <summary>
            Selects the current item.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizerItem.Rename">
            <summary>
            Allows modification of the item.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizerItem.Delete">
            <summary>
            Deletes the item.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizerItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides class handling for the KeyDown routed event that 
            occurs when the user presses a key while this control has focus.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ListOrganizerItem.TextContentPropertyNameProperty">
            <summary>
            Identifies the TextContentPropertyName dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ListOrganizerItem.TextContentPropertyName">
            <summary>
            Gets or sets a value which dictates what binding is used to provide content for the items in the list.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ListOrganizerItem.TextContentPropertyNameChanged">
            <summary>
            Occurs when TextContentPropertyName property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizerItem.OnTextContentPropertyNameChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.String})">
            <summary>
            Called when TextContentPropertyName property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizerItem.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizerItem.OnApplyTemplate">
            <summary>
            Called when ApplyTemplate is called.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ListOrganizerItem.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.MessageTextBox">
            <content>
            Partial class implementation for MessageTextBox control.
            </content>
            <summary>
            A TextBox which shows a user provided text when its empty.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.MessageTextBox.BackgroundTextProperty">
            <summary>
            Identifies the BackgroundText dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.MessageTextBox.BackgroundText">
            <summary>
            Gets or sets a value for text presented to user when TextBox is empty.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.MessageTextBox.BackgroundTextChanged">
            <summary>
            Occurs when BackgroundText property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.MessageTextBox.OnBackgroundTextChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.String})">
            <summary>
            Called when BackgroundText property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.MessageTextBox.IsBackgroundTextShownPropertyKey">
            <summary>
            Identifies the IsBackgroundTextShown dependency property key.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.MessageTextBox.IsBackgroundTextShownProperty">
            <summary>
            Identifies the IsBackgroundTextShown dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.MessageTextBox.IsBackgroundTextShown">
            <summary>
            Gets a value indicating if the background text is being shown.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.MessageTextBox.IsBackgroundTextShownChanged">
            <summary>
            Occurs when IsBackgroundTextShown property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.MessageTextBox.OnIsBackgroundTextShownChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when IsBackgroundTextShown property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.MessageTextBox.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.MessageTextBox.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.PickerBase">
            <summary>
            Implements a re-usable base component useful for showing
            Picker-like controls.
            </summary>
            <summary>
            This control provides basic functionality for Picker-like controls.
            </summary>
            <remarks>
            
            
            If a custom template is provided for this control, then the template MUST provide the following template parts:
            
            	PART_DropDown - A required template part which must be of type DismissiblePopup.  The dropdown which hosts the picker.
            	PART_DropDownButton - A required template part which must be of type ToggleButton.  The ToggleButton which controls whether the dropdown is open.
            
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PickerBase.#ctor">
            <summary>
            Creates a new instance of the PickerBase class.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.PickerBase.CloseDropDownCommand">
            <summary>
            Informs the PickerBase that it should close the dropdown.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PickerBase.OnCloseDropDownExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when CloseDropDown executes.
            </summary>
            <remarks>
            Informs the PickerBase that it should close the dropdown.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.PickerBase.DropDownButtonTemplateProperty">
            <summary>
            Identifies the DropDownButtonTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.PickerBase.DropDownButtonTemplate">
            <summary>
            Gets or sets a value that controls the visual tree of the DropDown button.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.PickerBase.DropDownButtonTemplateChanged">
            <summary>
            Occurs when DropDownButtonTemplate property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PickerBase.OnDropDownButtonTemplateChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.Controls.ControlTemplate})">
            <summary>
            Called when DropDownButtonTemplate property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.PickerBase.DropDownStyleProperty">
            <summary>
            Identifies the DropDownStyle dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.PickerBase.DropDownStyle">
            <summary>
            Gets or sets the style of the drop-down.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.PickerBase.DropDownStyleChanged">
            <summary>
            Occurs when DropDownStyle property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PickerBase.OnDropDownStyleChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.Style})">
            <summary>
            Called when DropDownStyle property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.PickerBase.IsOpenProperty">
            <summary>
            Identifies the IsOpen dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.PickerBase.IsOpen">
            <summary>
            Gets or sets a value indicating whether the Popup is visible.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.PickerBase.IsOpenChanged">
            <summary>
            Occurs when IsOpen property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PickerBase.OnIsOpenChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when IsOpen property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PickerBase.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PickerBase.OnApplyTemplate">
            <summary>
            Called when ApplyTemplate is called.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PickerBase.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.PopupControlButton">
            <content>
            Partial class implementation for PopupControlButton control.
            </content>
            <summary>
            A toggle button which controls is a popup is open or not.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.PopupControlButton.ExpandToolTip">
            <summary>
            Tooltip to show to expand.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PopupControlButton.#ctor">
            <summary>
            Constructs an instance of PopupControlButton.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PopupControlButton.OnChecked(System.Windows.RoutedEventArgs)">
            <summary>
            Called when the IsChecked property becomes true.
            </summary>
            <param name="e">The event data for the Checked event.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PopupControlButton.OnUnchecked(System.Windows.RoutedEventArgs)">
            <summary>
            Called when the IsChecked property becomes false.
            </summary>
            <param name="e">The event data for the Unchecked event.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PopupControlButton.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled PreviewMouseLeftButtonUp routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The MouseButtonEventArgs that contains the event data. The event data reports that the left mouse button was released.</param>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.PopupControlButton.IsPopupOpenProperty">
            <summary>
            Identifies the IsPopupOpen dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.PopupControlButton.IsPopupOpen">
            <summary>
            Gets or sets a value indicating whether the popup is open or not.
            </summary>
            <remarks>
            The Popup.IsOpen property should be two-way bound to this property.
            </remarks>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.PopupControlButton.IsPopupOpenChanged">
            <summary>
            Occurs when IsPopupOpen property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PopupControlButton.OnIsPopupOpenChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when IsPopupOpen property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PopupControlButton.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.PropertyChangedEventArgs`1">
            <summary>
            An EventArgs which holds the old and new values for a property change.
            </summary>
            <typeparam name="T">The property type.</typeparam>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertyChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Creates an instance of PropertyChangedEventArgs.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new, current, value.</param>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.PropertyChangedEventArgs`1.OldValue">
            <summary>
            Gets the previous value for the property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.PropertyChangedEventArgs`1.NewValue">
            <summary>
            Gets the new value for the property.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ReadOnlyObservableAsyncCollection`1">
            <summary>
            Represents a read-only ObservableCollection which also implement IAsyncProgress.
            </summary>
            <typeparam name="T">The type held by the collection.</typeparam>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ReadOnlyObservableAsyncCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            The constructor.
            </summary>
            <param name="list">The collection with which to create this instance of the ReadOnlyObservableAsyncCollection class.
            The object must also implement IAsyncProgress, INotifyCollectionChanged and INotifyPropertyChanged.</param>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ReadOnlyObservableAsyncCollection`1.CollectionChanged">
            <summary>
            Occurs when the collection changes, either by adding or removing an item.
            </summary>
            <remarks>
            see <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>
            </remarks>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ReadOnlyObservableAsyncCollection`1.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
            <remarks>
            see <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/>
            </remarks>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ReadOnlyObservableAsyncCollection`1.OperationInProgress">
            <summary>
            Gets a value indicating whether the async operation is currently running.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ReadOnlyObservableAsyncCollection`1.OperationError">
            <summary>
            Gets the error for the async operation.  This field is only valid if 
            OperationInProgress is false.  null indicates there was no error.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ScalableImage">
            <content>
            Partial class implementation for ScalableImage control.
            </content>
            <summary>
            Represents an image that can render as a vector or as a bitmap.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.ScalableImage" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImage.ArrangeOverride(System.Windows.Size)">
            <summary>
            Called when the control is asked to render itself in a given area.
            Sets the render size to use all available area when <see cref="P:Microsoft.Management.UI.Internal.ScalableImageSource.Brush"/> is provided.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used to render the control.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImage.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when the control is being rendered.
            Renders the contents of the image as a vector or a bitmap, depending on which is provided.
            </summary>
            <param name="drawingContext">An instance of <see cref="T:System.Windows.Media.DrawingContext"/> used to render the control.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImage.GetLayoutClip(System.Windows.Size)">
            <summary>
            Override of <seealso cref="M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)"/>.
            Make this control to respect the ClipToBounds attribute value.
            </summary>
            <param name="layoutSlotSize">An instance of <see cref="T:System.Windows.Size"/> used for calculating an additional clip.</param>
            <returns>Geometry to use as an additional clip in case when element is larger than available space</returns>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ScalableImage.SourceProperty">
            <summary>
            Identifies the Source dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ScalableImage.Source">
            <summary>
            Gets or sets the ScalableImageSource used to render the image. This is a dependency property.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ScalableImage.SourceChanged">
            <summary>
            Occurs when Source property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImage.OnSourceChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.ScalableImageSource})">
            <summary>
            Called when Source property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImage.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImage.OnCreateAutomationPeer">
            <summary>
            Create an instance of the AutomationPeer.
            </summary>
            <returns>
            An instance of the AutomationPeer.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ScalableImageSource">
            <content>
            Partial class implementation for SeparatedList control.
            </content>
            <summary>
            Represents the source of an image that can render as a vector or as a bitmap.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImageSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.ScalableImageSource" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImageSource.CreateInstanceCore">
            <summary>
            Creates a new instance of the Freezable derived class.
            </summary>
            <returns>The new instance of the Freezable derived class.</returns>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ScalableImageSource.AccessibleNameProperty">
            <summary>
            Identifies the AccessibleName dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ScalableImageSource.AccessibleName">
            <summary>
            Gets or sets the accessible name of the image.  This is used by accessibility clients to describe the image, and must be localized.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ScalableImageSource.AccessibleNameChanged">
            <summary>
            Occurs when AccessibleName property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImageSource.OnAccessibleNameChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.String})">
            <summary>
            Called when AccessibleName property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ScalableImageSource.BrushProperty">
            <summary>
            Identifies the Brush dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ScalableImageSource.Brush">
            <summary>
            Gets or sets the source used to render the image as a vector.If this is set, the Image property will be ignored.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ScalableImageSource.BrushChanged">
            <summary>
            Occurs when Brush property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImageSource.OnBrushChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.Media.Brush})">
            <summary>
            Called when Brush property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ScalableImageSource.ImageProperty">
            <summary>
            Identifies the Image dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ScalableImageSource.Image">
            <summary>
            Gets or sets the source used to render the image as a bitmap. If the Brush property is set, this will be ignored.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ScalableImageSource.ImageChanged">
            <summary>
            Occurs when Image property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImageSource.OnImageChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.Media.ImageSource})">
            <summary>
            Called when Image property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ScalableImageSource.SizeProperty">
            <summary>
            Identifies the Size dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ScalableImageSource.Size">
            <summary>
            Gets or sets the suggested size of the image.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ScalableImageSource.SizeChanged">
            <summary>
            Occurs when Size property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImageSource.OnSizeChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.Size})">
            <summary>
            Called when Size property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ScalableImageSource.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.StateDescriptor`1">
            <summary>
            Base proxy class for other classes which wish to have save and restore functionality.
            </summary>
            <typeparam name="T">There are no restrictions on T.</typeparam>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.StateDescriptor`1.#ctor">
            <summary>
            Creates a new instances of the StateDescriptor class and creates a new GUID.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.StateDescriptor`1.#ctor(System.String)">
            <summary>
            Constructor overload to provide name.
            </summary>
            <param name="name">The friendly name for the StateDescriptor.</param>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.StateDescriptor`1.Id">
            <summary>
            Gets the global unique identification number.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.StateDescriptor`1.Name">
            <summary>
            Gets or sets the friendly display name.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.StateDescriptor`1.SaveState(`0)">
            <summary>
            Saves a snapshot of the subject's current state.
            </summary>
            <param name="subject">The object whose state will be saved.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.StateDescriptor`1.RestoreState(`0)">
            <summary>
            Restores the state of subject to the saved state.
            </summary>
            <param name="subject">The object whose state will be restored.</param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.StringFormatConverter">
            <summary>
            Formatting string with a given format.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.StringFormatConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Formatting string with a given format.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.  This is not used.</param>
            <param name="parameter">The converter parameter to use.  It should be a formatting string.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.StringFormatConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <remarks>
            This method is not implemented.
            </remarks>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.TextBlockService">
            <summary>
            Attached property provider to <see cref="T:System.Windows.Controls.TextBlock"/> control.
            </summary>
            <summary>
            Provides attached properties for TextBlock control.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.TextBlockService.IsTextTrimmedPropertyKey">
            <summary>
            Identifies the IsTextTrimmed dependency property key.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.TextBlockService.IsTextTrimmedProperty">
            <summary>
            Identifies the IsTextTrimmed dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextBlockService.GetIsTextTrimmed(System.Windows.DependencyObject)">
            <summary>
            Gets the value for IsTextTrimmedProperty that is attached to the element.
            </summary>
            <param name="element">The dependency object that the property is attached to.</param>
            <returns>
            The value of IsTextTrimmed that is attached to element.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextBlockService.SetIsTextTrimmed(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value for IsTextTrimmedProperty that is attached to the element.
            </summary>
            <param name="element">The dependency object that the property will be attached to.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.TextBlockService.IsTextTrimmedExternallyProperty">
            <summary>
            Identifies the IsTextTrimmedExternally dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextBlockService.GetIsTextTrimmedExternally(System.Windows.DependencyObject)">
            <summary>
            Gets a value indicating that the Text has been trimmed external to the element.
            </summary>
            <param name="element">The dependency object that the property is attached to.</param>
            <returns>
            The value of IsTextTrimmedExternally that is attached to element.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextBlockService.SetIsTextTrimmedExternally(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets a value indicating that the Text has been trimmed external to the element.
            </summary>
            <param name="element">The dependency object that the property will be attached to.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.TextBlockService.IsTextTrimmedMonitoringEnabledProperty">
            <summary>
            Identifies the IsTextTrimmedMonitoringEnabled dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextBlockService.GetIsTextTrimmedMonitoringEnabled(System.Windows.DependencyObject)">
            <summary>
            Gets the value for IsTextTrimMonitoringEnabled that is attached to the element.
            </summary>
            <param name="element">The dependency object that the property is attached to.</param>
            <returns>
            The value of IsTextTrimmedMonitoringEnabled that is attached to element.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextBlockService.SetIsTextTrimmedMonitoringEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value for IsTextTrimMonitoringEnabled that is attached to the element.
            </summary>
            <param name="element">The dependency object that the property will be attached to.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.TextBlockService.UntrimmedTextProperty">
            <summary>
            Identifies the UntrimmedText dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextBlockService.GetUntrimmedText(System.Windows.DependencyObject)">
            <summary>
            Gets the untrimmed text.
            </summary>
            <param name="element">The dependency object that the property is attached to.</param>
            <returns>
            The value of UntrimmedText that is attached to element.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextBlockService.SetUntrimmedText(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the untrimmed text.
            </summary>
            <param name="element">The dependency object that the property will be attached to.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.TextTrimConverter">
            <summary>
            Removes whitespace at beginning and end of a string.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextTrimConverter.#ctor">
            <summary>
            Creates a new TextTrimConverter. By default, both conversion directions are trimmed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextTrimConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Trims excess whitespace from the given string.
            </summary>
            <param name="value">original string</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The trimmed string.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextTrimConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Trims extra whitespace from the given string during backward conversion.
            </summary>
            <param name="value">original string</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The trimmed string.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.UserActionState">
            <summary>
            Represents the availability of an action to a user.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.UserActionState.Enabled">
            <summary>
            Indicates that the action is enabled and allowed.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.UserActionState.Disabled">
            <summary>
            Indicates that the action is disabled.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.UserActionState.Hidden">
            <summary>
            Indicates that the action is not visible.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ControlState">
            <summary>
            Represents the ready-state of a control.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ControlState.Ready">
            <summary>
            Indicates that the control is ready.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ControlState.Error">
            <summary>
            Indicates that the control has an error.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ControlState.Refreshing">
            <summary>
            Indicates that the control is refreshing its data.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.Utilities">
            <summary>
            Provides common methods for use in the library.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Utilities.AreAllItemsOfType``1(System.Collections.IEnumerable)">
            <summary>
            Gets whether all of the items in <paramref name="items"/> are of type T.
            </summary>
            <typeparam name="T">The type to verify.</typeparam>
            <param name="items">The items to check.</param>
            <returns>Whether all of the items in <paramref name="items"/> are of type T.</returns>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Utilities.Find``1(System.Collections.IEnumerable)">
            <summary>
            Searches for an element that matches the specified type, and returns the first occurrence in the entire <see cref="T:System.Collections.IEnumerable"/>.
            </summary>
            <typeparam name="T">The type of the item to find.</typeparam>
            <param name="items">The <see cref="T:System.Collections.IEnumerable"/> to search.</param>
            <returns>The first element that matches the specified type, if found; otherwise, the default value for type <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Utilities.NullCheckTrim(System.String)">
            <summary>
            Method to trim the non null strings.
            </summary>
            <param name="value">String to Trim.</param>
            <returns>Trimmed string.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Utilities.ResortObservableCollection``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.IEnumerable)">
            <summary>
            Restore the original order as far as possible.
            Columns not in the original set will appear at the end.
            </summary>
            <typeparam name="T">
            Type of <paramref name="modify"/>.
            </typeparam>
            <param name="modify">
            ObservableCollection to resort to order of
            <paramref name="sorted"/>.
            </param>
            <param name="sorted">
            Order to which <paramref name="modify"/> should be resorted.
            All enumerated objects must be of type T.
            </param>
            <remarks>
            Parameter <paramref name="sorted"/> is not generic to type T
            since it may be a collection of a subclass of type T,
            and IEnumerable'subclass is not compatible with
            IEnumerable'baseclass.
            </remarks>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.VisualToAncestorDataConverter">
            <summary>
            Provides a way to get the <see cref="P:System.Windows.FrameworkElement.DataContext"/> of a visual ancestor.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.VisualToAncestorDataConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Searches ancestors for data of the specified class type.
            </summary>
            <param name="value">The visual whose ancestors are searched.</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The type of the data to find. The type must be a class.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The data of the specified type; or if not found, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentException">The specified value is not a class type.</exception>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.VisualToAncestorDataConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not used.
            </summary>
            <param name="value">The parameter is not used.</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The parameter is not used.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.WeakEventListener`1">
            <summary>
            A common weak event listener which can be used for different kinds of events.
            </summary>
            <typeparam name="TEventArgs">The EventArgs type for the event.</typeparam>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WeakEventListener`1.#ctor(System.EventHandler{`0})">
            <summary>
            Constructs an instance of WeakEventListener.
            </summary>
            <param name="handler">The handler for the event.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WeakEventListener`1.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
            <summary>
            Receives events from the centralized event manager.
            </summary>
            <param name="managerType">The type of the WeakEventManager calling this method.</param>
            <param name="sender">Object that originated the event.</param>
            <param name="e">Event data.</param>
            <returns>
            true if the listener handled the event. It is considered an error by the WeakEventManager handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return false if it receives an event that it does not recognize or handle.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.RetryActionCallback`1">
            <summary>
            Defines a method which will be called when
            a condition is met.
            </summary>
            <typeparam name="T">The type of the item.</typeparam>
            <param name="item">The parameter to pass to the method.</param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.WpfHelp">
            <summary>
            Provides common WPF methods for use in the library.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.RetryActionAfterLoaded``1(System.Windows.FrameworkElement,Microsoft.Management.UI.Internal.RetryActionCallback{``0},``0)">
            <summary>
            Calls a method when the Loaded event is fired on a FrameworkElement.
            </summary>
            <typeparam name="T">The type of the parameter to pass to the callback method.</typeparam>
            <param name="element">The element whose Loaded state we are interested in.</param>
            <param name="callback">The method we will call if element.IsLoaded is false.</param>
            <param name="parameter">The parameter to pass to the callback method.</param>
            <returns>
            Returns true if the element is not loaded and the callback will be called
            when the element is loaded, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.RetryActionAfterLoadedDataQueue.Enqueue(System.Delegate,System.Object)">
            <summary>
            Adds a callback with its associated parameter to the collection.
            </summary>
            <param name="callback">The callback to invoke.</param>
            <param name="parameter">The parameter to pass to the callback.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.RetryActionAfterLoadedDataQueue.Dequeue(System.Delegate@,System.Object@)">
            <summary>
            Removes a callback with its associated parameter from the head of
            the collection.
            </summary>
            <param name="callback">The callback to invoke.</param>
            <param name="parameter">The parameter to pass to the callback.</param>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.WpfHelp.RetryActionAfterLoadedDataQueue.IsEmpty">
            <summary>
            Gets whether there is any callback data available.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.RemoveFromParent(System.Windows.FrameworkElement)">
            <summary>
            Removes the specified element from its parent.
            </summary>
            <param name="element">The element to remove.</param>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
            <exception cref="T:System.NotSupportedException">The specified value does not have a parent that supports removal.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.AddChild(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Removes the specified element from its parent.
            </summary>
            <param name="parent">The parent element.</param>
            <param name="element">The element to add.</param>
            <exception cref="T:System.NotSupportedException">The specified value does not have a parent that supports removal.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.GetVisualChild``1(System.Windows.DependencyObject)">
            <summary>
            Returns the first visual child that matches the type T.
            Performs a breadth-first search.
            </summary>
            <typeparam name="T">The type of the child to find.</typeparam>
            <param name="obj">The object with a visual tree.</param>
            <returns>Returns an object of type T if found, otherwise null.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.FindVisualChildren``1(System.Windows.DependencyObject)">
            <summary>
            Finds all children of type within the specified object's visual tree.
            </summary>
            <typeparam name="T">The type of the child to find.</typeparam>
            <param name="obj">The object with a visual tree.</param>
            <returns>All children of the specified object matching the specified type.</returns>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.FindVisualAncestorData``1(System.Windows.DependencyObject)">
            <summary>
            Searches ancestors for data of the specified type.
            </summary>
            <typeparam name="T">The type of the data to find.</typeparam>
            <param name="obj">The visual whose ancestors are searched.</param>
            <returns>The data of the specified type; or if not found, <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.FindVisualAncestor``1(System.Windows.DependencyObject)">
            <summary>
            Walks up the visual tree looking for an ancestor of a given type.
            </summary>
            <typeparam name="T">The type to look for.</typeparam>
            <param name="object">The object to start from.</param>
            <returns>The parent of the right type, or null.</returns>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.TryExecute(System.Windows.Input.RoutedCommand,System.Object,System.Windows.IInputElement)">
            <summary>
            Executes the <see cref="T:System.Windows.Input.RoutedCommand"/> on the current command target if it is allowed.
            </summary>
            <param name="command">The routed command.</param>
            <param name="parameter">A user defined data type.</param>
            <param name="target">The command target.</param>
            <returns><c>true</c> if the command could execute; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.GetOptionalTemplateChild``1(System.Windows.Controls.Control,System.String)">
            <summary>
            Gets the named child of an item from a templated control.
            </summary>
            <typeparam name="T">The type of the child.</typeparam>
            <param name="templateParent">The parent of the control.</param>
            <param name="childName">The name of the child.</param>
            <returns>The reference to the child, or null if the template part wasn't found.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.GetTemplateChild``1(System.Windows.Controls.Control,System.String)">
            <summary>
            Gets the named child of an item from a templated control.
            </summary>
            <typeparam name="T">The type of the child.</typeparam>
            <param name="templateParent">The parent of the control.</param>
            <param name="childName">The name of the child.</param>
            <returns>The reference to the child.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.HandleWrongTemplatePartType``1(System.String)">
            <summary>
            Throws an exception with information about the template part with the wrong type.
            </summary>
            <typeparam name="T">The type of the expected template part.</typeparam>
            <param name="name">The name of the expected template part.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.HandleMissingTemplatePart``1(System.String)">
            <summary>
            Throws an exception with information about the missing template part.
            </summary>
            <typeparam name="T">The type of the expected template part.</typeparam>
            <param name="name">The name of the expected template part.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.SetComponentResourceStyle``1(System.Windows.FrameworkElement,System.String)">
            <summary>
            Sets Style for control given a component resource key.
            </summary>
            <typeparam name="T">Type in which Component Resource Style is Defined.</typeparam>
            <param name="element">Element whose style need to be set.</param>
            <param name="keyName">Component Resource Key for Style.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.CreateRoutedPropertyChangedEventArgs``1(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Helper function to create a RoutedPropertyChangedEventArgs from a DependencyPropertyChangedEventArgs.
            </summary>
            <typeparam name="T">The type for the RoutedPropertyChangedEventArgs.</typeparam>
            <param name="propertyEventArgs">The DependencyPropertyChangedEventArgs data source.</param>
            <returns>The created event args, configured from the parameter.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.CreateRoutedPropertyChangedEventArgs``1(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.RoutedEvent)">
            <summary>
            Helper function to create a RoutedPropertyChangedEventArgs from a DependencyPropertyChangedEventArgs.
            </summary>
            <typeparam name="T">The type for the RoutedPropertyChangedEventArgs.</typeparam>
            <param name="propertyEventArgs">The DependencyPropertyChangedEventArgs data source.</param>
            <param name="routedEvent">The routed event the property change is associated with.</param>
            <returns>The created event args, configured from the parameter.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WpfHelp.ChangeIndex(System.Windows.Controls.ItemCollection,System.Object,System.Int32)">
            <summary>
            Moves the item in the specified collection to the specified index.
            </summary>
            <param name="items">The collection to move the item in.</param>
            <param name="item">The item to move.</param>
            <param name="newIndex">The new index of the item.</param>
            <exception cref="T:System.ArgumentException">The specified item is not in the specified collection.</exception>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified index is not valid for the specified collection.</exception>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.AutomationGroup">
            <summary>
            Represents a decorator that is always visible in the automation tree, indicating that its descendents belong to a logical group.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AutomationGroup.OnCreateAutomationPeer">
            <summary>
            Returns the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for this control.
            </summary>
            <returns>The <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for this control.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ExpanderButton">
            <summary>
            Represents a toggle button used to expand or collapse elements.
            </summary>
            <summary>
            Represents a toggle button used to expand or collapse elements.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ExpanderButton.ExpandToolTip">
            <summary>
            Tooltip to show to expand.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ExpanderButton.CollapseToolTip">
            <summary>
            Tooltip to show to collapse.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.ExpanderButton" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButton.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked whenever the effective value of any dependency property on this <see cref="T:Microsoft.Management.UI.Internal.ExpanderButton"/> has been updated. The specific dependency property that changed is reported in the arguments parameter. Overrides <see cref="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>.
            </summary>
            <param name="e">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButton.OnIsCheckedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked"/> property changes.
            </summary>
            <param name="args">The event data that describes the property that changed, as well as old and new values.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButton.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Called when it has keyboard focus.
            </summary>
            <param name="args">The event data that describes getting keyboard focus.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButton.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)">
            <summary>
            Called when it lost keyboard focus.
            </summary>
            <param name="args">The event data that describes losing keyboard focus.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButton.OnCreateAutomationPeer">
            <summary>
            Create an instance of the AutomationPeer.
            </summary>
            <returns>
            An instance of the AutomationPeer.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer">
            <summary>
            Provides an automation peer for <see cref="T:Microsoft.Management.UI.Internal.ExpanderButton"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer.#ctor(Microsoft.Management.UI.Internal.ExpanderButton)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer" /> class.
            </summary>
            <param name="owner">The owner of the automation peer.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer.GetClassNameCore">
            <summary>
            Gets the class name.
            </summary>
            <returns>The class name.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the <see cref="T:Microsoft.Management.UI.Internal.ExpanderButton"/> that is associated with this <see cref="T:Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer"/>.
            </summary>
            <param name="patternInterface">Specifies the control pattern that is returned.</param>
            <returns>The control pattern for the <see cref="T:Microsoft.Management.UI.Internal.ExpanderButton"/> that is associated with this <see cref="T:Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer"/>.</returns>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets the expand/collapse state of this <see cref="T:Microsoft.Management.UI.Internal.ExpanderButton"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Expands this instance of <see cref="T:Microsoft.Management.UI.Internal.ExpanderButton"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ExpanderButtonAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Collapses this instance of <see cref="T:Microsoft.Management.UI.Internal.ExpanderButton"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ResizeGripLocation">
            <summary>
            The resize grip possibilities.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ResizeGripLocation.Right">
            <summary>
            One grip is shown, on the right side.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ResizeGripLocation.Left">
            <summary>
            One grip is shown, on the left side.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.Resizer">
            <content>
            Partial class implementation for Resizer control.
            </content>
            <summary>
            Resizer adds a resizing grip and behavior to any control.
            </summary>
            <remarks>
            
            
            If a custom template is provided for this control, then the template MUST provide the following template parts:
            
            	PART_LeftGrip - A required template part which must be of type Thumb.  The grip on the left.
            	PART_RightGrip - A required template part which must be of type Thumb.  The grip on the right.
            
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.#ctor">
            <summary>
            Creates an instance of Resizer.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.Resizer.DraggingTemplateProperty">
            <summary>
            Identifies the DraggingTemplate dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.Resizer.DraggingTemplate">
            <summary>
            Gets or sets the template used for the dragging indicator when ResizeWhileDragging is false.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.Resizer.DraggingTemplateChanged">
            <summary>
            Occurs when DraggingTemplate property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.OnDraggingTemplateChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.DataTemplate})">
            <summary>
            Called when DraggingTemplate property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.Resizer.GripBrushProperty">
            <summary>
            Identifies the GripBrush dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.Resizer.GripBrush">
            <summary>
            Gets or sets the color of the resize grips.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.Resizer.GripBrushChanged">
            <summary>
            Occurs when GripBrush property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.OnGripBrushChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.Media.Brush})">
            <summary>
            Called when GripBrush property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.Resizer.GripLocationProperty">
            <summary>
            Identifies the GripLocation dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.Resizer.GripLocation">
            <summary>
            Gets or sets a value of what grips.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.Resizer.GripLocationChanged">
            <summary>
            Occurs when GripLocation property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.OnGripLocationChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.ResizeGripLocation})">
            <summary>
            Called when GripLocation property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.Resizer.GripWidthProperty">
            <summary>
            Identifies the GripWidth dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.Resizer.GripWidth">
            <summary>
            Gets or sets the width of the grips.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.Resizer.GripWidthChanged">
            <summary>
            Occurs when GripWidth property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.OnGripWidthChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Double})">
            <summary>
            Called when GripWidth property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.Resizer.ResizeWhileDraggingProperty">
            <summary>
            Identifies the ResizeWhileDragging dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.Resizer.ResizeWhileDragging">
            <summary>
            Gets or sets a value indicating if resizing occurs while dragging.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.Resizer.ResizeWhileDraggingChanged">
            <summary>
            Occurs when ResizeWhileDragging property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.OnResizeWhileDraggingChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when ResizeWhileDragging property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.Resizer.ThumbGripLocationProperty">
            <summary>
            Identifies the ThumbGripLocation dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.GetThumbGripLocation(System.Windows.DependencyObject)">
            <summary>
            Gets the location for a grip.
            </summary>
            <param name="element">The dependency object that the property is attached to.</param>
            <returns>
            The value of ThumbGripLocation that is attached to element.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.SetThumbGripLocation(System.Windows.DependencyObject,Microsoft.Management.UI.Internal.ResizeGripLocation)">
            <summary>
            Sets the location for a grip.
            </summary>
            <param name="element">The dependency object that the property will be attached to.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.Resizer.VisibleGripWidthProperty">
            <summary>
            Identifies the VisibleGripWidth dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.Resizer.VisibleGripWidth">
            <summary>
            Gets or sets the visible width of the grips.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.Resizer.VisibleGripWidthChanged">
            <summary>
            Occurs when VisibleGripWidth property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.OnVisibleGripWidthChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Double})">
            <summary>
            Called when VisibleGripWidth property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.OnApplyTemplate">
            <summary>
            Called when ApplyTemplate is called.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.Resizer.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ResizerGripThicknessConverter">
            <summary>
            A converter which creates the proper thickness for the content of the Resizer, depending on the grip visual size
            and grip position.
            </summary>
            <remarks>
            The first value needs to be a double which is the visible grip size.
            The second value needs to the be ResizeGripLocation value used.
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ResizerGripThicknessConverter.#ctor">
            <summary>
            Creates an instance of ResizerGripThicknessConverter.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ResizerGripThicknessConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <param name="values">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns nullNothingnullptra null reference (Nothing in Visual Basic), the valid null value is used.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ResizerGripThicknessConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetTypes">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted values. If the method returns nullNothingnullptra null reference (Nothing in Visual Basic), the valid null value is used.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.UIElementAdorner">
            <content>
            Partial class implementation for UIElementAdorner.
            </content>
            <summary>
            An Adorner which displays a given UIElement.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.UIElementAdorner.#ctor(System.Windows.UIElement)">
            <summary>
            Constructs an instance of UIElementAdorner.
            </summary>
            <param name="adornedElement">The adorned element.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.UIElementAdorner.GetVisualChild(System.Int32)">
            <summary>
            Overrides Visual.GetVisualChild, and returns a child at the specified index from a collection of child elements. 
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection. </param>
            <returns>The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.</returns>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UIElementAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.UIElementAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Implements any custom measuring behavior for the popupAdorner.
            </summary>
            <param name="constraint">A size to constrain the popupAdorner to. </param>
            <returns>A Size object representing the amount of layout space needed by the popupAdorner.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.UIElementAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a FrameworkElement derived class. 
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.UIElementAdorner.ChildProperty">
            <summary>
            Identifies the Child dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UIElementAdorner.Child">
            <summary>
            Gets or sets the child element.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.UIElementAdorner.ChildChanged">
            <summary>
            Occurs when Child property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.UIElementAdorner.RaiseChildChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.UIElement})">
            <summary>
            Called when Child property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.UIElementAdorner.OnChildChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.UIElement})">
            <summary>
            Called when Child property changes.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterExpressionAndOperatorNode">
            <summary>
            The FilterExpressionAndOperatorNode class is responsible for containing children
            FilterExpressionNodes which will be AND'ed together during evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterExpressionAndOperatorNode.Children">
            <summary>
            Gets a collection FilterExpressionNode children used during evaluation.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExpressionAndOperatorNode.#ctor">
            <summary>
            Initializes a new instance of the FilterExpressionAndOperatorNode
            class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExpressionAndOperatorNode.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Management.UI.Internal.FilterExpressionNode})">
            <summary>
            Initializes a new instance of the FilterExpressionAndOperatorNode
            class.
            </summary>
            <param name="children">
            A collection of children which will be added to the 
            FilterExpressionAndOperatorNode's Children collection.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExpressionAndOperatorNode.Evaluate(System.Object)">
            <summary>
            Evaluates the children FilterExpressionNodes and returns
            the AND'ed result of their results.
            </summary>
            <param name="item">
            The item to evaluate against.
            </param>
            <returns>
            True if all FilterExpressionNode children evaluate to true,
            false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterExpressionNode">
            <summary>
            The FilterExpressionNode class is the base class for derived 
            FilterExpressionNodes. FilterExpressionNodes are used to 
            construct a logical evaluation tree which holds FilterRules as
            its operands.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExpressionNode.Evaluate(System.Object)">
            <summary>
            In derived classes, this evaluation will return a true or
            false result based upon some criteria.
            </summary>
            <param name="item">
            The item to evaluate against.
            </param>
            <returns>
            True if the criteria is met, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExpressionNode.FindAll``1">
            <summary>
            Retrieves all elements of the specified type within the entire expression tree.
            </summary>
            <typeparam name="T">The type of the items to find.</typeparam>
            <returns>All elements of the specified type within the entire expression tree.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterExpressionOperandNode">
            <summary>
            The FilterExpressionOperandNode class is responsible for holding a
            FilterRule within the FilterExpression tree.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterExpressionOperandNode.Rule">
            <summary>
            The FilterRule to evaluate.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExpressionOperandNode.#ctor(Microsoft.Management.UI.Internal.FilterRule)">
            <summary>
            Initializes a new instance of the FilterExpressionOperandNode
            class.
            </summary>
            <param name="rule">
            The FilterRule to hold for evaluation.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExpressionOperandNode.Evaluate(System.Object)">
            <summary>
            Evaluates the item against the contained FilterRule.
            </summary>
            <param name="item">
            The item to pass to the contained FilterRule.
            </param>
            <returns>
            Returns true if the contained FilterRule evaluates to
            true, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterExpressionOrOperatorNode">
            <summary>
            The FilterExpressionOrOperatorNode class is responsible for containing children
            FilterExpressionNodes which will be OR'ed together during evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterExpressionOrOperatorNode.Children">
            <summary>
            Gets a collection FilterExpressionNode children used during evaluation.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExpressionOrOperatorNode.#ctor">
            <summary>
            Initializes a new instance of the FilterExpressionOrOperatorNode
            class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExpressionOrOperatorNode.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Management.UI.Internal.FilterExpressionNode})">
            <summary>
            Initializes a new instance of the FilterExpressionOrOperatorNode
            class.
            </summary>
            <param name="children">
            A collection of children which will be added to the 
            FilterExpressionOrOperatorNode's Children collection.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExpressionOrOperatorNode.Evaluate(System.Object)">
            <summary>
            Evaluates the children FilterExpressionNodes and returns
            the OR'ed result of their results.
            </summary>
            <param name="item">
            The item to evaluate against.
            </param>
            <returns>
            True if any FilterExpressionNode child evaluates to true,
            false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ComparableValueFilterRule`1">
            <summary>
            The ComparableValueFilterRule provides support for derived classes 
            that evaluate against IComparable values.
            </summary>
            <typeparam name="T">
            The generic parameter.
            </typeparam>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ComparableValueFilterRule`1.DefaultNullValueEvaluation">
            <summary>
            Gets or sets a value indicating whether null objects passed to Evaluate will
            evaluate to true or false.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ComparableValueFilterRule`1.Evaluate(System.Object)">
            <summary>
            Determines if item matches a derived classes criteria.
            </summary>
            <param name="item">
            The item to match evaluate.
            </param>
            <returns>
            Returns true if the item matches, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ComparableValueFilterRule`1.Evaluate(`0)">
            <summary>
            Determines if item matches a derived classes criteria.
            </summary>
            <param name="data">
            The item to match evaluate.
            </param>
            <returns>
            Returns true if the item matches, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.DoesNotEqualFilterRule`1">
            <summary>
            The DoesNotEqualFilterRule class evaluates an IComparable item to 
            check if it is not equal to the rule's value.
            </summary>
            <typeparam name="T">
            The generic parameter.
            </typeparam>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DoesNotEqualFilterRule`1.#ctor">
            <summary>
            Initializes a new instance of the DoesNotEqualFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DoesNotEqualFilterRule`1.Evaluate(`0)">
            <summary>
            Determines if item is not equal to Value.
            </summary>
            <param name="data">
            The data to compare against.
            </param>
            <returns>
            Returns true if data is not equal to Value, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.EqualsFilterRule`1">
            <summary>
            The EqualsFilterRule class evaluates an IComparable item to 
            check if it is equal to the rule's value.
            </summary>
            <typeparam name="T">
            The generic parameter.
            </typeparam>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.EqualsFilterRule`1.#ctor">
            <summary>
            Initializes a new instance of the EqualsFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.EqualsFilterRule`1.Evaluate(`0)">
            <summary>
            Determines if item is equal to Value.
            </summary>
            <param name="data">
            The data to compare against.
            </param>
            <returns>
            Returns true if data is equal to Value.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterRule">
            <summary>
            The base class for all filtering rules.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRule.IsValid">
            <summary>
            Gets a value indicating whether the FilterRule can be 
            evaluated in its current state.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRule.DisplayName">
            <summary>
            Gets a display friendly name for the FilterRule.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRule.#ctor">
            <summary>
            Initializes a new instance of the FilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRule.Evaluate(System.Object)">
            <summary>
            Gets a value indicating whether the supplied item meets the
            criteria specified by this rule.
            </summary>
            <param name="item">The item to evaluate.</param>
            <returns>Returns true if the item meets the criteria. False otherwise.</returns>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.FilterRule.EvaluationResultInvalidated">
            <summary>
            Occurs when the values of this rule changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRule.NotifyEvaluationResultInvalidated">
            <summary>
            Fires <see cref="E:Microsoft.Management.UI.Internal.FilterRule.EvaluationResultInvalidated"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterRuleExtensions">
            <summary>
            The FilterRuleExtensions class provides extension methods
            for FilterRule classes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRuleExtensions.DeepCopy(Microsoft.Management.UI.Internal.FilterRule)">
            <summary>
            Creates a deep copy of a FilterRule.
            </summary>
            <param name="rule">
            The FilterRule to clone.
            </param>
            <returns>
            Returns a deep copy of the passed in rule.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IsBetweenFilterRule`1">
            <summary>
            The IsBetweenFilterRule class evaluates an item to see if it is between
            the StartValue and EndValue of the rule.
            </summary>
            <typeparam name="T">
            The generic parameter.
            </typeparam>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.IsBetweenFilterRule`1.IsValid">
            <summary>
            Gets a value indicating whether the FilterRule can be 
            evaluated in its current state.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.IsBetweenFilterRule`1.StartValue">
            <summary>
            Gets the start value for the range.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.IsBetweenFilterRule`1.EndValue">
            <summary>
            Gets the end value for the range.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsBetweenFilterRule`1.#ctor">
            <summary>
            Initializes a new instance of the IsBetweenFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsBetweenFilterRule`1.Evaluate(`0)">
            <summary>
            Evaluates data and determines if it is between
            StartValue and EndValue.
            </summary>
            <param name="data">
            The data to evaluate.
            </param>
            <returns>
            Returns true if data is between StartValue and EndValue,
            false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IsEmptyFilterRule">
            <summary>
            The IsEmptyFilterRule evaluates an item to determine whether it
            is empty or not. 
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsEmptyFilterRule.#ctor">
            <summary>
            Initializes a new instance of the IsEmptyFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsEmptyFilterRule.Evaluate(System.Object)">
            <summary>
            Gets a values indicating whether the supplied item is empty. 
            </summary>
            <param name="item">The item to evaluate.</param>
            <returns>
            Returns true if the item is null or if the item is a string 
            composed of whitespace. False otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IsGreaterThanFilterRule`1">
            <summary>
            The IsGreaterThanFilterRule class evaluates an IComparable item to 
            check if it is greater than its value.
            </summary>
            <typeparam name="T">
            The generic parameter.
            </typeparam>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsGreaterThanFilterRule`1.#ctor">
            <summary>
            Initializes a new instance of the IsGreaterThanFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsGreaterThanFilterRule`1.Evaluate(`0)">
            <summary>
            Determines if item is greater than Value.
            </summary>
            <param name="data">
            The data to compare against.
            </param>
            <returns>
            Returns true if data is greater than Value.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IsLessThanFilterRule`1">
            <summary>
            The IsLessThanFilterRule class evaluates an IComparable item to 
            check if it is less than the rule's value.
            </summary>
            <typeparam name="T">
            The generic parameter.
            </typeparam>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsLessThanFilterRule`1.#ctor">
            <summary>
            Initializes a new instance of the IsLessThanFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsLessThanFilterRule`1.Evaluate(`0)">
            <summary>
            Determines if item is less than Value.
            </summary>
            <param name="item">
            The data to compare against.
            </param>
            <returns>
            Returns true if data is less than Value.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IsNotEmptyFilterRule">
            <summary>
            The IsNotEmptyFilterRule evaluates an item to determine whether it
            is empty or not. 
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsNotEmptyFilterRule.#ctor">
            <summary>
            Initializes a new instance of the IsNotEmptyFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsNotEmptyFilterRule.Evaluate(System.Object)">
            <summary>
            Gets a values indicating whether the supplied item is not empty. 
            </summary>
            <param name="item">The item to evaluate.</param>
            <returns>
            Returns false if the item is null or if the item is a string 
            composed of whitespace. True otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IsNotEmptyValidationRule">
            <summary>
            The IsNotEmptyValidationRule checks a value to see if a value is not empty.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsNotEmptyValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines if value is not empty.
            </summary>
            <param name="value">
            The value to validate.
            </param>
            <param name="cultureInfo">
            The culture info to use while validating.
            </param>
            <returns>
            Returns true if the value is not empty, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.PropertiesTextContainsFilterRule">
            <summary>
            Represents a filter rule that searches for text within properties on an object.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertiesTextContainsFilterRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.PropertiesTextContainsFilterRule"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.PropertiesTextContainsFilterRule.PropertyNames">
            <summary>
            Gets a collection of the names of properties to search in.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertiesTextContainsFilterRule.Evaluate(System.Object)">
            <summary>
            Evaluates whether the specified properties on <paramref name="item"/> contain the current value.
            </summary>
            <param name="item">The item to evaluate.</param>
            <returns><c>true</c> if <paramref name="item"/> is not <c>null</c>, the current value is valid, and the specified properties on <paramref name="item"/> contain the current value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertiesTextContainsFilterRule.Evaluate(System.String)">
            <summary>
            Evaluates whether the specified data contains the current value.
            </summary>
            <param name="data">The data to evaluate.</param>
            <returns><c>true</c> if <paramref name="data"/> contains the current value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertiesTextContainsFilterRule.OnEvaluationResultInvalidated">
            <summary>
            Called when the evaluation result is invalidated.
            Updates the cached Regex pattern.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertiesTextContainsFilterRule.UpdateCachedRegex">
            <summary>
            Updates the cached Regex with the current value.
            If the current value is invalid, the Regex will not be updated because it will not be evaluated.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.PropertyValueSelectorFilterRule`1">
            <summary>
            The PropertyValueSelectorFilterRule class supports filtering against a 
            property of an object. Based on the type of the property a collection of 
            filter rules are available to be used.
            </summary>
            <typeparam name="T">
            The generic parameter.
            </typeparam>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.PropertyValueSelectorFilterRule`1.PropertyName">
            <summary>
            Gets the name of the property on the item to evaluate which holds 
            the real value which should be evaluated.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertyValueSelectorFilterRule`1.#ctor(System.String,System.String)">
            <summary>
            Creates a new PropertyValueSelectorFilterRule instance.
            </summary>
            <param name="propertyName">
            Gets the name of the property on the item to evaluate which holds 
            the real value which should be evaluated.
            </param>
            <param name="propertyDisplayName">
            The display friendly representation of the property name.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertyValueSelectorFilterRule`1.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Management.UI.Internal.FilterRule})">
            <summary>
            Creates a new PropertyValueSelectorFilterRule instance.
            </summary>
            <param name="propertyName">
            The propertyName on the item to evaluate which holds the real 
            value which should be evaluated.
            </param>
            <param name="propertyDisplayName">
            The display friendly representation of the propertyName.
            </param>
            <param name="rules">
            The collection of available rules.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertyValueSelectorFilterRule`1.Evaluate(System.Object)">
            <summary>
            Evaluates whether the item is inclusive.
            </summary>
            <param name="item">
            The item to evaluate.
            </param>
            <returns>
            Returns true if the item matches the filtering criteria, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.SelectorFilterRule">
            <summary>
            The SelectorFilterRule represents a rule composed of other rules.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SelectorFilterRule.IsValid">
            <summary>
            Gets a value indicating whether the rule can be evaluated.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SelectorFilterRule.AvailableRules">
            <summary>
            Gets the collection of available rules.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SelectorFilterRule.#ctor">
            <summary>
            Creates a new SelectorFilterRule instance.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SelectorFilterRule.Evaluate(System.Object)">
            <summary>
            Evaluates whether the item is inclusive.
            </summary>
            <param name="item">
            The item to evaluate.
            </param>
            <returns>
            Returns true if the item matches the filtering criteria, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SelectorFilterRule.OnSelectedValueChanged(Microsoft.Management.UI.Internal.FilterRule,Microsoft.Management.UI.Internal.FilterRule)">
            <summary>
            Called when the SelectedValue within AvailableRules changes.
            </summary>
            <param name="oldValue">
            The old FilterRule.
            </param>
            <param name="newValue">
            The new FilterRule.
            </param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.SingleValueComparableValueFilterRule`1">
            <summary>
            The SingleValueComparableValueFilterRule provides support for derived classes 
            that take a single input and evaluate against IComparable values.
            </summary>
            <typeparam name="T">The generic parameter.</typeparam>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SingleValueComparableValueFilterRule`1.Value">
            <summary>
            Gets a value that holds user input.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SingleValueComparableValueFilterRule`1.IsValid">
            <summary>
            Gets a value indicating whether the FilterRule can be 
            evaluated in its current state.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SingleValueComparableValueFilterRule`1.#ctor">
            <summary>
            Initializes a new instance of the SingleValueComparableValueFilterRule class.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.TextContainsFilterRule">
            <summary>
            The TextContainsFilterRule class evaluates a string item to 
            check if it is contains the rule's value within it.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextContainsFilterRule.#ctor">
            <summary>
            Initializes a new instance of the TextContainsFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextContainsFilterRule.Evaluate(System.String)">
            <summary>
            Determines if Value is contained within data.
            </summary>
            <param name="data">
            The data to compare with.
            </param>
            <returns>
            Returns true if data contains Value, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.TextDoesNotContainFilterRule">
            <summary>
            The TextDoesNotContainFilterRule class evaluates a string item to 
            check if it is does not contain the rule's value within it.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextDoesNotContainFilterRule.#ctor">
            <summary>
            Initializes a new instance of the TextDoesNotContainFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextDoesNotContainFilterRule.Evaluate(System.String)">
            <summary>
            Determines if Value is not contained within data.
            </summary>
            <param name="data">
            The data to compare with.
            </param>
            <returns>
            Returns true if data does not contain Value, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.TextDoesNotEqualFilterRule">
            <summary>
            The TextDoesNotEqualFilterRule class evaluates a string item to 
            check if it is not equal to the rule's value.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextDoesNotEqualFilterRule.#ctor">
            <summary>
            Initializes a new instance of the TextDoesNotEqualFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextDoesNotEqualFilterRule.Evaluate(System.String)">
            <summary>
            Determines if data is not equal to Value.
            </summary>
            <param name="data">
            The value to compare against.
            </param>
            <returns>
            Returns true is data does not equal Value, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.TextEndsWithFilterRule">
            <summary>
            The TextEndsWithFilterRule class evaluates a string item to 
            check if it ends with the rule's value.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextEndsWithFilterRule.#ctor">
            <summary>
            Initializes a new instance of the TextEndsWithFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextEndsWithFilterRule.Evaluate(System.String)">
            <summary>
            Determines if data ends with Value.
            </summary>
            <param name="data">
            The value to compare with.
            </param>
            <returns>
            Returns true is data ends with Value, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.TextEqualsFilterRule">
            <summary>
            The TextEqualsFilterRule class evaluates a string item to 
            check if it is equal to the rule's value.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextEqualsFilterRule.#ctor">
            <summary>
            Initializes a new instance of the TextEqualsFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextEqualsFilterRule.Evaluate(System.String)">
            <summary>
            Determines if data is equal to Value.
            </summary>
            <param name="data">
            The value to compare against.
            </param>
            <returns>
            Returns true is data equals Value, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.TextFilterRule">
            <summary>
            The TextFilterRule class supports derived rules by offering services for
            evaluating string operations.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.TextFilterRule.WordBoundaryRegexPattern">
            <summary>
            Gets a regex pattern that describes a word boundary that can include symbols.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.TextFilterRule.IgnoreCase">
            <summary>
            Gets or sets whether to ignore case when evaluating.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.TextFilterRule.CultureInvariant">
            <summary>
            Gets or sets whether culture differences in language are ignored when evaluating.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextFilterRule.#ctor">
            <summary>
            Initializes a new instance of the TextFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextFilterRule.GetParsedValue(System.Boolean@)">
            <summary>
            Gets the current value and determines whether it should be evaluated as an exact match.
            </summary>
            <param name="evaluateAsExactMatch">Whether the current value should be evaluated as an exact match.</param>
            <returns>The current value.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextFilterRule.GetRegexPattern(System.String,System.String)">
            <summary>
            Gets a regular expression pattern based on the current value and the specified patterns.
            If the current value is an exact-match string, <paramref name="exactMatchPattern"/> will be used; otherwise, <paramref name="pattern"/> will be used.
            </summary>
            <param name="pattern">The pattern to use if the current value is not an exact-match string. The pattern must contain a <c>{0}</c> token.</param>
            <param name="exactMatchPattern">The pattern to use if the current value is an exact-match string. The pattern must contain a <c>{0}</c> token.</param>
            <returns>A regular expression pattern based on the current value and the specified patterns.</returns>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextFilterRule.GetRegexOptions">
            <summary>
            Gets a <see cref="T:System.Text.RegularExpressions.RegexOptions"/> object that matches the values of <see cref="P:Microsoft.Management.UI.Internal.TextFilterRule.IgnoreCase"/> and <see cref="P:Microsoft.Management.UI.Internal.TextFilterRule.CultureInvariant"/>.
            </summary>
            <returns>A <see cref="T:System.Text.RegularExpressions.RegexOptions"/> object that matches the values of <see cref="P:Microsoft.Management.UI.Internal.TextFilterRule.IgnoreCase"/> and <see cref="P:Microsoft.Management.UI.Internal.TextFilterRule.CultureInvariant"/>.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextFilterRule.ExactMatchEvaluate(System.String,System.String,System.String)">
            <summary>
            Gets a value indicating whether the specified data matches one of the specified patterns.
            If the current value is an exact-match string, <paramref name="exactMatchPattern"/> will be used; otherwise, <paramref name="pattern"/> will be used.
            </summary>
            <param name="data">The data to evaluate.</param>
            <param name="pattern">The pattern to use if the current value is not an exact-match string. The pattern must contain a <c>{0}</c> token.</param>
            <param name="exactMatchPattern">The pattern to use if the current value is an exact-match string. The pattern must contain a <c>{0}</c> token.</param>
            <returns><c>true</c> if the specified data matches one of the specified patterns; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.TextStartsWithFilterRule">
            <summary>
            The TextStartsWithFilterRule class evaluates a string item to 
            check if it starts with the rule's value.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextStartsWithFilterRule.#ctor">
            <summary>
            Initializes a new instance of the TextStartsWithFilterRule class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.TextStartsWithFilterRule.Evaluate(System.String)">
            <summary>
            Determines if data starts with Value.
            </summary>
            <param name="data">
            The value to compare with.
            </param>
            <returns>
            Returns true is data starts with Value, false otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.DataErrorInfoValidationResult">
            <summary>
            The DataErrorInfoValidationResult supports reporting validation result
            data needed for the IDataErrorInfo interface.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.DataErrorInfoValidationResult.IsUserVisible">
            <summary>
            Gets a value indicating whether the error should
            be presented to the user.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.DataErrorInfoValidationResult.ErrorMessage">
            <summary>
            Gets a value used to communicate what the error is.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.DataErrorInfoValidationResult.ValidResult">
            <summary>
            Geta an instance of DataErrorInfoValidationResult that corresponds
            to a valid result.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DataErrorInfoValidationResult.#ctor(System.Boolean,System.Object,System.String)">
            <summary>
            Initializes a new instance of the DataErrorInfoValidationResult class.
            </summary>
            <param name="isValid">
            Indicates whether the value checked against the 
            DataErrorInfoValidationResult is valid
            </param>
            <param name="errorContent">
            Information about the invalidity.
            </param>
            <param name="errorMessage">
            The error message to display to the user. If the result is invalid
            and the error message is empty (""), the result will be treated as
            invalid but no error will be presented to the user.
            </param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.DataErrorInfoValidationRule">
            <summary>
            Provides a way to create a custom rule in order to check the validity of user input.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DataErrorInfoValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            When overridden in a derived class, performs validation checks on a value. 
            </summary>
            <param name="value">
            The value to check.
            </param>
            <param name="cultureInfo">
            The culture to use in this rule.
            </param>
            <returns>
            A DataErrorInfoValidationResult object.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.DefaultFilterRuleCustomizationFactory">
            <summary>
            The BuiltinDataErrorInfoValidationRuleFactory creates default settings for the
            builtin FilterRules.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.DefaultFilterRuleCustomizationFactory.PropertyValueGetter">
            <summary>
            Gets or sets a <see cref="T:Microsoft.Management.UI.Internal.IPropertyValueGetter"/> that can retrieve the values of properties on a given object.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DefaultFilterRuleCustomizationFactory.CreateDefaultFilterRulesForPropertyValueSelectorFilterRule``1">
            <summary>
            Returns a collection containing the default rules used by a PropertyValueSelectorFilterRule
            for type t.
            </summary>
            <typeparam name="T">
            The type used to determine what rules to include.
            </typeparam>
            <returns>
            Returns a collection of FilterRules.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DefaultFilterRuleCustomizationFactory.TransferValues(Microsoft.Management.UI.Internal.FilterRule,Microsoft.Management.UI.Internal.FilterRule)">
            <summary>
            Transfers the values from the old rule into the new rule.
            </summary>
            <param name="oldRule">
            The old filter rule.
            </param>
            <param name="newRule">
            The new filter rule.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DefaultFilterRuleCustomizationFactory.ClearValues(Microsoft.Management.UI.Internal.FilterRule)">
            <summary>
            Clears the values from the filter rule.
            </summary>
            <param name="rule">
            The rule to clear.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DefaultFilterRuleCustomizationFactory.GetErrorMessageForInvalidValue(System.String,System.Type)">
            <summary>
            Get an error message to display to a user when they
            provide a string value that cannot be parsed to type
            typeToParseTo.
            </summary>
            <param name="value">
            The value entered by the user.
            </param>
            <param name="typeToParseTo">
            The desired type to parse value to.
            </param>
            <returns>
            An error message to a user to explain how they can
            enter a valid value.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterEvaluator">
            <summary>
            The FilterEvaluator class is responsible for allowing the registeration of 
            the FilterExpressionProviders and producing a FilterExpression composed of
            the FilterExpression returned from the providers.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterEvaluator.FilterExpressionProviders">
            <summary>
            Gets a readonly collection of the registered FilterExpressionProviders.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterEvaluator.FilterStatus">
            <summary>
            Gets a value indicating the status of the filter evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterEvaluator.StartFilterOnExpressionChanged">
            <summary>
            Gets a value indicating the status of the filter evaluation.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterEvaluator.HasFilterExpression">
            <summary>
            Gets a value indicating whether this provider currently has a non-empty filter expression.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.FilterEvaluator.PropertyChanged">
            <summary>
            Notifies listeners that a property has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterEvaluator.StartFilter">
            <summary>
            Applies the filter.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterEvaluator.StopFilter">
            <summary>
            Stops the filter.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterEvaluator.FilterExpression">
            <summary>
            Returns a FilterExpression composed of FilterExpressions returned from the 
            registered providers.
            </summary>
            <returns>
            The FilterExpression composed of FilterExpressions returned from the 
            registered providers.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterEvaluator.AddFilterExpressionProvider(Microsoft.Management.UI.Internal.IFilterExpressionProvider)">
            <summary>
            Adds a FilterExpressionProvider to the FilterEvaluator.
            </summary>
            <param name="provider">
            The provider to add.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterEvaluator.RemoveFilterExpressionProvider(Microsoft.Management.UI.Internal.IFilterExpressionProvider)">
            <summary>
            Removes a FilterExpressionProvider from the FilterEvaluator.
            </summary>
            <param name="provider">
            The provider to remove.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterEvaluator.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property has changed.
            </summary>
            <param name="propertyName">
            The propertyName which has changed.
            </param>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.FilterEvaluator.FilterExpressionChanged">
            <summary>
            Occurs when the filter expression has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterEvaluator.NotifyFilterExpressionChanged">
            <summary>
            Notifies any listeners that the filter expression has changed.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterExceptionEventArgs">
            <summary>
            The EventArgs detailing the exception raised while
            evaluating the filter.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterExceptionEventArgs.Exception">
            <summary>
            Gets the Exception that was raised when filtering was
            evaluated.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the FilterExceptionEventArgs
            class.
            </summary>
            <param name="exception">
            The Exception that was raised when filtering was evaluated.
            </param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterRuleCustomizationFactory">
            <summary>
            The FilterRuleCustomizationFactory class provides a central location 
            a return an abstract factory which creates the standard settings and rules
            used by the builtin FilterRules.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRuleCustomizationFactory.FactoryInstance">
            <summary>
            Gets or sets a factory instance which is used by builtin 
            filter rules.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRuleCustomizationFactory.#cctor">
            <summary>
            Initializes the static state of the DataErrorInfoValidationRuleFactory class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRuleCustomizationFactory.PropertyValueGetter">
            <summary>
            Gets or sets a <see cref="T:Microsoft.Management.UI.Internal.IPropertyValueGetter"/> that can retrieve the values of properties on a given object.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRuleCustomizationFactory.CreateDefaultFilterRulesForPropertyValueSelectorFilterRule``1">
            <summary>
            Returns a collection containing the default rules used by a PropertyValueSelectorFilterRule
            for type T.
            </summary>
            <typeparam name="T">
            The type used to determine what rules to include.
            </typeparam>
            <returns>
            Returns a collection of FilterRules.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRuleCustomizationFactory.TransferValues(Microsoft.Management.UI.Internal.FilterRule,Microsoft.Management.UI.Internal.FilterRule)">
            <summary>
            Transfers the values from the old rule into the new rule.
            </summary>
            <param name="oldRule">
            The old filter rule.
            </param>
            <param name="newRule">
            The new filter rule.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRuleCustomizationFactory.ClearValues(Microsoft.Management.UI.Internal.FilterRule)">
            <summary>
            Clears the values from the filter rule.
            </summary>
            <param name="rule">
            The rule to clear.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRuleCustomizationFactory.GetErrorMessageForInvalidValue(System.String,System.Type)">
            <summary>
            Get an error message to display to a user when they
            provide a string value that cannot be parsed to type
            typeToParseTo.
            </summary>
            <param name="value">
            The value entered by the user.
            </param>
            <param name="typeToParseTo">
            The desired type to parse value to.
            </param>
            <returns>
            An error message to a user to explain how they can
            enter a valid value.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterStatus">
            <summary>
            The FilterStatus enum is used to classify the current status a <see cref="T:Microsoft.Management.UI.Internal.FilterEvaluator" /> is in.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.FilterStatus.NotApplied">
            <summary>
            A FilterStatus of NotApplied indicates that the filter is currently
            not applied.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.FilterStatus.InProgress">
            <summary>
            A FilterStatus of InProgress indicates that the filter is being
            applied but is not done.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.FilterStatus.Applied">
            <summary>
            A FilterStatus of Applied indicates that the filter has been
            applied.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterUtilities">
            <summary>
            Provides common utilities for filtering.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IEvaluate">
            <summary>
            The IEvaluate interface provides the most basic
            support for the evaluation of an item against
            criteria defined in a derived class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IEvaluate.Evaluate(System.Object)">
            <summary>
            Gets a values indicating whether the supplied item has meet the
            criteria rule specificed by the rule.
            </summary>
            <param name="item">
            The item to evaluate.
            </param>
            <returns>
            Returns true if the item meets the criteria. False otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IFilterExpressionProvider">
            <summary>
            The IFilterExpressionProvider interface defines the contract between
            providers of FilterExpressions and consumers thereof.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.IFilterExpressionProvider.FilterExpression">
            <summary>
            Gets a FilterExpression representing the current
            relational organization of FilterRules for this provider.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.IFilterExpressionProvider.HasFilterExpression">
            <summary>
            Gets a value indicating whether this provider currently has a non-empty filter expression.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.IFilterExpressionProvider.FilterExpressionChanged">
            <summary>
            Raised when the FilterExpression of this provider
            has changed.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ItemsControlFilterEvaluator">
            <summary>
            The ItemsControlFilterEvaluator class provides functionality to
            apply a filter against an ItemsControl.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ItemsControlFilterEvaluator.FilterTarget">
            <summary>
            Gets or sets an ItemsControl which is
            the target for filtering.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ItemsControlFilterEvaluator.FilterExceptionOccurred">
            <summary>
            Used to notify listeners that an unhandled exception has occurred while
            evaluating the filter.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ItemsControlFilterEvaluator.StartFilter">
            <summary>
            Applies the filter.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ItemsControlFilterEvaluator.StopFilter">
            <summary>
            Stops the filter.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ValidatingSelectorValue`1">
            <summary>
            The ValidatingSelectorValue class provides support for selecting 
            a value from a collection of available values.
            </summary>
            <typeparam name="T">
            The generic parameter.
            </typeparam>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ValidatingSelectorValue`1.AvailableValues">
            <summary>
            Gets the collection of values available for selection.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ValidatingSelectorValue`1.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected item or 
            returns negative one (-1) if the selection is empty.
            </summary>
            <remarks>
            If you set SelectedIndex to a value less that -1, an 
            ArgumentException is thrown. If you set SelectedIndex to a 
            value equal or greater than the number of child elements, 
            the value is ignored. 
            </remarks>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ValidatingSelectorValue`1.SelectedValue">
            <summary>
            Gets the item within AvailableValues at the offset indicated
            by SelectedIndex or returns default(T) if the selection is empty. 
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ValidatingSelectorValue`1.DisplayNameConverter">
            <summary>
            Gets or sets the converter used to display a friendly
            value to the user.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ValidatingSelectorValue`1.SelectedValueChanged">
            <summary>
            Notifies listeners that the selected value has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingSelectorValue`1.Validate">
            <summary>
            Called to validate the entire object.
            </summary>
            <returns>
            Returns a DataErrorInfoValidationResult which indicates the validation state
            of the object.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingSelectorValue`1.Validate(System.String)">
            <summary>
            Called to validate the property with the given name. 
            </summary>
            <param name="columnName">
            The name of the property whose error message will be checked.
            </param>
            <returns>
            Returns a DataErrorInfoValidationResult which indicates
            the validation state of the property.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="columnName"/> may only be
            <see cref="F:Microsoft.Management.UI.Internal.ValidatingSelectorValue`1.SelectedIndexPropertyName"/>.
            </exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingSelectorValue`1.NotifySelectedValueChanged(`0,`0)">
            <summary>
            Notifies listeners that the selected value with the available
            values has changed.
            </summary>
            <param name="oldValue">
            The previous selected value.
            </param>
            <param name="newValue">
            The current selected value.
            </param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ValidatingValue`1">
            <summary>
            The ValidatingValue class supports setting a value and validating the
            value.
            </summary>
            <typeparam name="T">
            The generic parameter.
            </typeparam>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ValidatingValue`1.Value">
            <summary>
            Gets or sets a value.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValue`1.GetCastValue">
            <summary>
            Gets the raw value cast/transformed into
            type T.
            </summary>
            <returns>
            The cast value.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValue`1.ForceValidationUpdate">
            <summary>
            Forces a validation update to occur.
            </summary>
            <remarks>
            The validation update occurs via signaling that
            the Value property has changed.
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValue`1.Validate">
            <summary>
            Called to validate the entire object.
            </summary>
            <returns>
            Returns a DataErrorInfoValidationResult which indicates the validation state
            of the object.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValue`1.Validate(System.String)">
            <summary>
            Called to validate the property with the given name. 
            </summary>
            <param name="columnName">
            The name of the property whose error message will be checked.
            </param>
            <returns>
            Returns a DataErrorInfoValidationResult which indicates
            the validation state of the property.
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="columnName"/> may only be
            <see cref="F:Microsoft.Management.UI.Internal.ValidatingValue`1.ValuePropertyName"/>.
            </exception>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ValidatingValueBase">
            <summary>
            The ValidatingValueBase class provides basic services for base 
            classes to support validation via the IDataErrorInfo interface.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ValidatingValueBase.ValidationRules">
            <summary>
            Gets the collection of validation rules used to validate the value.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ValidatingValueBase.IsValid">
            <summary>
            Gets a value indicating whether the value is valid.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ValidatingValueBase.Item(System.String)">
            <summary>
            Gets the error message for the property with the given name. 
            </summary>
            <param name="columnName">
            The name of the property whose error message will be checked.
            </param>
            <returns>
            The error message for the property, or an empty string ("") if 
            the property is valid. 
            </returns>
            <exception cref="T:System.ArgumentException">
            <paramref name="columnName"/> is invalid.
            </exception>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ValidatingValueBase.Error">
            <summary>
            Gets an error message indicating what is wrong with this object.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ValidatingValueBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>
            The listeners attached to this event are not serialized.
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValueBase.AddValidationRule(Microsoft.Management.UI.Internal.DataErrorInfoValidationRule)">
            <summary>
            Adds a validation rule to the ValidationRules collection.
            </summary>
            <param name="rule">The validation rule to add.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValueBase.RemoveValidationRule(Microsoft.Management.UI.Internal.DataErrorInfoValidationRule)">
            <summary>
            Removes a validation rule from the ValidationRules collection.
            </summary>
            <param name="rule">The rule to remove.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValueBase.ClearValidationRules">
            <summary>
            Clears the ValidationRules collection.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValueBase.Validate">
            <summary>
            Called to validate the entire object.
            </summary>
            <returns>
            Returns a DataErrorInfoValidationResult which indicates the validation state
            of the object.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValueBase.Validate(System.String)">
            <summary>
            Called to validate the property with the given name. 
            </summary>
            <param name="propertyName">
            The name of the property whose error message will be checked.
            </param>
            <returns>
            Returns a DataErrorInfoValidationResult which indicates the validation state
            of the property.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValueBase.InvalidateValidationResult">
            <summary>
            Calling InvalidateValidationResult causes the
            Validation to be reevaluated.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValueBase.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property has changed.
            </summary>
            <param name="propertyName">
            The propertyName which has changed.
            </param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.AddFilterRulePicker">
            <summary>
            The AddFilterRulePicker class is responsible for allowing users to
            add rules to an FilterRulePanel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.AddFilterRulePicker.ShortcutFilterRules">
            <summary>
            Gets the collection of shortcut rules available for addition to the FilterRulePanel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.AddFilterRulePicker.ColumnFilterRules">
            <summary>
            Gets the collection of column rules available for addition to the FilterRulePanel.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.AddFilterRulePicker.CancelAddFilterRulesCommand">
            <summary>
            Closes the picker and unchecks all items in the panel.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AddFilterRulePicker.OnCancelAddFilterRulesExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when CancelAddFilterRules executes.
            </summary>
            <remarks>
            Closes the picker and unchecks all items in the panel.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.AddFilterRulePicker.OkAddFilterRulesCommand">
            <summary>
            Closes the picker and calls AddFilterRulesCommand with the collection of checked items from the picker.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AddFilterRulePicker.OnOkAddFilterRulesCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Called to determine if OkAddFilterRules can execute.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AddFilterRulePicker.OnOkAddFilterRulesExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when OkAddFilterRules executes.
            </summary>
            <remarks>
            Closes the picker and calls AddFilterRulesCommand with the collection of checked items from the picker.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.AddFilterRulePicker.AddFilterRulesCommandProperty">
            <summary>
            Identifies the AddFilterRulesCommand dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.AddFilterRulePicker.AddFilterRulesCommand">
            <summary>
            Gets or sets the command used to communicate that the action has occurred.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.AddFilterRulePicker.AddFilterRulesCommandChanged">
            <summary>
            Occurs when AddFilterRulesCommand property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AddFilterRulePicker.OnAddFilterRulesCommandChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.Input.ICommand})">
            <summary>
            Called when AddFilterRulesCommand property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.AddFilterRulePicker.AddFilterRulesCommandTargetProperty">
            <summary>
            Identifies the AddFilterRulesCommandTarget dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.AddFilterRulePicker.AddFilterRulesCommandTarget">
            <summary>
            Gets or sets a target of the Command.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.AddFilterRulePicker.AddFilterRulesCommandTargetChanged">
            <summary>
            Occurs when AddFilterRulesCommandTarget property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AddFilterRulePicker.OnAddFilterRulesCommandTargetChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Windows.IInputElement})">
            <summary>
            Called when AddFilterRulesCommandTarget property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.AddFilterRulePicker.IsOpenProperty">
            <summary>
            Identifies the IsOpen dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.AddFilterRulePicker.IsOpen">
            <summary>
            Gets or sets a value indicating whether the Popup is visible.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.AddFilterRulePicker.IsOpenChanged">
            <summary>
            Occurs when IsOpen property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AddFilterRulePicker.OnIsOpenChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when IsOpen property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AddFilterRulePicker.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AddFilterRulePicker.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.AddFilterRulePickerItem">
            <summary>
            The AddFilterRulePicker class is responsible for holding state 
            information needed by the AddFilterRulePicker class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.AddFilterRulePickerItem.IsChecked">
            <summary>
            Gets or sets a value indicating whether this item should
            be added to the FilterRulePanel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.AddFilterRulePickerItem.FilterRule">
            <summary>
            Gets the FilterRulePanelItem that will be added to the FilterRulePanel.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AddFilterRulePickerItem.#ctor(Microsoft.Management.UI.Internal.FilterRulePanelItem)">
            <summary>
            Initializes a new instance of the FilterRulePanelItem class.
            </summary>
            <param name="filterRule">
            The FilterRulePanelItem that will be added to the FilterRulePanel.
            </param>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.AddFilterRulePickerItem.PropertyChanged">
            <summary>
            Notifies listeners that a property has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.AddFilterRulePickerItem.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property has changed.
            </summary>
            <param name="propertyName">
            The propertyName which has changed.
            </param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.InputFieldBackgroundTextConverter">
            <summary>
            The InputFieldBackgroundTextConverter is responsible for determing the
            correct background text to display for a particular type of data.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InputFieldBackgroundTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value of type ValidatingValue of T into a background string
            which provides a hint to the end user (e.g. Empty, M/d/yy).
            </summary>
            <param name="value">
            A value of type ValidatingValue.
            </param>
            <param name="targetType">
            The parameter is not used.
            </param>
            <param name="parameter">
            The parameter is not used.
            </param>
            <param name="culture">
            The parameter is not used.
            </param>
            <returns>
            Returns a background string for value.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InputFieldBackgroundTextConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not used.
            </summary>
            <param name="value">The parameter is not used.</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The parameter is not used.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IsValidatingValueValidConverter">
            <summary>
            The IsValidatingValueValidConverter is responsible for determining if
            a ValidatingValueBase object is valid.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsValidatingValueValidConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Determines if ValidatingValueBase.Error indicates
            if the object is valid.
            </summary>
            <param name="value">
            The Error string to check.
            </param>
            <param name="targetType">
            The parameter is not used.
            </param>
            <param name="parameter">
            The parameter is not used.
            </param>
            <param name="culture">
            The parameter is not used.
            </param>
            <returns>
            Returns true if value is null or empty, false otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IsValidatingValueValidConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not used.
            </summary>
            <param name="value">The parameter is not used.</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The parameter is not used.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterRulePanel">
            <summary>
            The FilterRulePanel allows users to construct and display a complex query built using <see cref="T:Microsoft.Management.UI.Internal.FilterRule"/>s.
            </summary>
            <remarks>
            <para>
            The FilterRulePanel manages two primary entities: <see cref="T:Microsoft.Management.UI.Internal.FilterRulePanelItem"/>s and DataTemplates.
            /// </para>
            <para>
            <see cref="T:Microsoft.Management.UI.Internal.FilterRulePanelItem" />s are the data classes that store the state for each item in the panel. 
            They are added and removed to/from the panel using the AddRulesCommand and the RemoveRuleCommand commands.
            </para>
            <para>
            For a FilterRule to display in the panel it must have a DataTemplate registered. To add and remove 
            DataTemplates, use the AddFilterRulePanelItemContentTemplate and RemoveFilterRulePanelItemContentTemplate methods.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanel.FilterRulePanelItems">
            <summary>
            Gets the collection of FilterRulePanelItems that are currently
            displayed in the panel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanel.FilterExpression">
            <summary>
            Gets a FilterExpression representing the current
            relational organization of FilterRules for this provider.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanel.Controller">
            <summary>
            Gets the FilterRulePanelController associated with this FilterRulePanel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanel.FilterRuleTemplateSelector">
            <summary>
            Gets a FilterRuleTemplateSelector that stores
            the templates used for items in the panel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanel.HasFilterExpression">
            <summary>
            Gets a value indicating whether this provider currently has a non-empty filter expression.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.FilterRulePanel.FilterExpressionChanged">
            <summary>
            Raised when a FilterRulePanelItem has been added or removed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanel.#ctor">
            <summary>
            Initializes a new instance of the FilterRulePanel class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanel.AddFilterRulePanelItemContentTemplate(System.Type,System.Windows.DataTemplate)">
            <summary>
            Associates a DataTemplate with a Type so that objects of that Type
            that are displayed in FilterRulePanel use the specified DataTemplate.
            </summary>
            <param name="type">
            The type to associate the DataTemplate with.
            </param>
            <param name="dataTemplate">
            The DataTemplate to associate the type with.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanel.RemoveFilterRulePanelItemContentTemplate(System.Type)">
            <summary>
            Removes the Type and associated DataTemplate from usage when displaying objects
            of that type in the FilterRulePanel.
            </summary>
            <param name="type">
            The type to remove.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanel.TryGetContentTemplate(System.Type,System.Windows.DataTemplate@)">
            <summary>
            Gets a DataTemplate associated with a type.
            </summary>
            <param name="type">A Type whose DataTemplate will be returned.</param>
            <param name="dataTemplate">A DataTemplate registered for type.</param>
            <returns>Returns true if there is a DataTemplate registered for type, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanel.ClearContentTemplates">
            <summary>
            Removes all the registered content templates.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanel.NotifyFilterExpressionChanged">
            <summary>
            Notifies any listeners that the filter expression has changed.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.FilterRulePanel.AddRulesCommand">
            <summary>
            Adds a collection of FilterRules to the panel.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanel.OnAddRulesExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when AddRules executes.
            </summary>
            <remarks>
            Adds a collection of FilterRules to the panel.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.FilterRulePanel.RemoveRuleCommand">
            <summary>
            Removes a FilterRulePanelItem from the panel.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanel.OnRemoveRuleExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when RemoveRule executes.
            </summary>
            <remarks>
            Removes a FilterRulePanelItem from the panel.
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanel.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanel.OnCreateAutomationPeer">
            <summary>
            Create an instance of the AutomationPeer.
            </summary>
            <returns>
            An instance of the AutomationPeer.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterRulePanelContentPresenter">
            <summary>
            The FilterRulePanelContentPresenter selects a template based upon the ContentConverter
            provided.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanelContentPresenter.#ctor">
            <summary>
            Initializes a new instance of the FilterRulePanelContentPresenter class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanelContentPresenter.ContentConverter">
            <summary>
            Gets or sets an IValueConverter used to convert the Content
            value.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanelContentPresenter.ChooseTemplate">
            <summary>
            Chooses a template based upon the provided ContentConverter.
            </summary>
            <returns>
            Returns a DataTemplate.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterRulePanelController">
            <summary>
            The FilterRulePanelController is responsible managing the addition and removal of
            <see cref="P:Microsoft.Management.UI.Internal.FilterRulePanelController.FilterRulePanelItems" />s to a <see cref="T:Microsoft.Management.UI.Internal.FilterRulePanel"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanelController.FilterRulePanelItems">
            <summary>
            Gets the collection of FilterRulePanelItems that are currently
            displayed in the panel.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanelController.FilterExpression">
            <summary>
            Gets a FilterExpression representing the current
            relational organization of FilterRules for this provider.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanelController.HasFilterExpression">
            <summary>
            Gets a value indicating whether this provider currently has a non-empty filter expression.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.FilterRulePanelController.FilterExpressionChanged">
            <summary>
            Raised when a FilterRulePanelItem has been added or removed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanelController.#ctor">
            <summary>
            Initializes a new instance of the FilterRulePanelController class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanelController.AddFilterRulePanelItem(Microsoft.Management.UI.Internal.FilterRulePanelItem)">
            <summary>
            Adds an item to the panel.
            </summary>
            <param name="item">
            The item to add.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanelController.RemoveFilterRulePanelItem(Microsoft.Management.UI.Internal.FilterRulePanelItem)">
            <summary>
            Removes an item from the panel.
            </summary>
            <param name="item">
            The item to remove.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanelController.ClearFilterRulePanelItems">
            <summary>
            Removes all items from the panel.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanelController.NotifyFilterExpressionChanged">
            <summary>
            Notifies any listeners that the filter expression has changed.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterRulePanelItem">
            <summary>
            The FilterRulePanelItem class maintains the state for a row item within a <see cref="T:Microsoft.Management.UI.Internal.FilterRulePanel"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanelItem.Rule">
            <summary>
            Gets a FilterRule that is stored in this FilterRulePanelItem.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanelItem.GroupId">
            <summary>
            Gets a string that indentifies which group this 
            item belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRulePanelItem.ItemType">
            <summary>
            Gets the type of FilterRulePanelItemType.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.FilterRulePanelItem.PropertyChanged">
            <summary>
            Notifies listeners that a property has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanelItem.#ctor(Microsoft.Management.UI.Internal.FilterRule,System.String)">
            <summary>
            Initializes a new instance of the FilterRulePanelItem class.
            </summary>
            <param name="rule">
            The FilterRule to store in this FilterRulePanelItem.
            </param>
            <param name="groupId">
            A string which identifies which group this 
            item belongs to.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRulePanelItem.NotifyPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property has changed.
            </summary>
            <param name="propertyName">
            The name of a property that has changed.
            </param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterRulePanelItemType">
            <summary>
            The FilterRulePanelItemType enum is used to classify a <see cref="T:Microsoft.Management.UI.Internal.FilterRulePanelItem"/>'s 
            hierarchical relationship within a <see cref="T:Microsoft.Management.UI.Internal.FilterRulePanel"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.FilterRulePanelItemType.FirstHeader">
            <summary>
            A FilterRulePanelItemType of FirstHeader indicates that a FilterRulePanelItem
            is the first item in the FilterRulePanel.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.FilterRulePanelItemType.Header">
            <summary>
            A FilterRulePanelItemType of Header indicates that a FilterRulePanelItem with 
            some GroupId is the first item in the FilterRulePanel with that GroupId.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.FilterRulePanelItemType.Item">
            <summary>
            A FilterRulePanelItemType of Item indicates that a FilterRulePanelItem with 
            some GroupId is not the first item in the FilterRulePanel with that GroupId.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterRuleTemplateSelector">
            <summary>
            The FilterRuleTemplateSelector class selects a template based upon the type of 
            the item and the corresponding template that is registered in the TemplateDictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.FilterRuleTemplateSelector.TemplateDictionary">
            <summary>
            Gets the dictionary containing the type-template values.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRuleTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            Selects a template based upon the type of the item and and the 
            corresponding template that is registered in the TemplateDictionary.
            </summary>
            <param name="item">
            The item to return a template for.
            </param>
            <param name="container">
            The parameter is not used.
            </param>
            <returns>
            Returns a DataTemplate for item.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.FilterRuleToDisplayNameConverter">
            <summary>
            The FilterRuleToDisplayNameConverter is responsible for converting
            a FilterRule value to its DisplayName.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRuleToDisplayNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a FilterRule value to its DisplayName.
            </summary>
            <param name="value">
            A FilterRule.
            </param>
            <param name="targetType">
            Type of String.
            </param>
            <param name="parameter">
            The parameter is not used.
            </param>
            <param name="culture">
            The parameter is not used.
            </param>
            <returns>
            The display name of the FilterRule.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.FilterRuleToDisplayNameConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            The method is not used.
            </summary>
            <param name="value">
            The parameter is not used.
            </param>
            <param name="targetType">
            The parameter is not used.
            </param>
            <param name="parameter">
            The parameter is not used.
            </param>
            <param name="culture">
            The parameter is not used.
            </param>
            <returns>
            The method does not return a value.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.SearchBox">
            <content>
            Partial class implementation for SearchBox control.
            </content>
            <summary>
            Represents a control that parses search text to return a filter expression.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.SearchBox"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SearchBox.FilterExpression">
            <summary>
            Gets the filter expression representing the current search text.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SearchBox.HasFilterExpression">
            <summary>
            Gets a value indicating whether this provider currently has a non-empty filter expression.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.SearchBox.FilterExpressionChanged">
            <summary>
            Occurs when the filter expression has changed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchBox.NotifyFilterExpressionChanged">
            <summary>
            Notifies any listeners that the filter expression has changed.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SearchBox.Parser">
            <summary>
            Gets or sets the parser used to parse the search text.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchBox.ConvertToFilterExpression(System.Collections.Generic.ICollection{Microsoft.Management.UI.Internal.SearchTextParseResult})">
            <summary>
            Converts the specified collection of searchbox items to a filter expression.
            </summary>
            <param name="searchBoxItems">A collection of searchbox items to convert.</param>
            <returns>A filter expression.</returns>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.SearchBox.ClearTextCommand">
            <summary>
            Clears the search text.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchBox.OnClearTextCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Called to determine if ClearText can execute.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchBox.OnClearTextExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when ClearText executes.
            </summary>
            <remarks>
            Clears the search text.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.SearchBox.BackgroundTextProperty">
            <summary>
            Identifies the BackgroundText dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SearchBox.BackgroundText">
            <summary>
            Gets or sets the background text of the search box.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.SearchBox.BackgroundTextChanged">
            <summary>
            Occurs when BackgroundText property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchBox.OnBackgroundTextChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.String})">
            <summary>
            Called when BackgroundText property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.SearchBox.TextProperty">
            <summary>
            Identifies the Text dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SearchBox.Text">
            <summary>
            Gets or sets the text contents of the search box.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.SearchBox.TextChanged">
            <summary>
            Occurs when Text property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchBox.OnTextChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.String})">
            <summary>
            Called when Text property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchBox.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchBox.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.SearchTextParser">
            <summary>
            Provides functionality for parsing search text.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchTextParser.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Management.UI.Internal.SearchTextParser"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SearchTextParser.FullTextRule">
            <summary>
            Gets or sets the full-text rule for searching.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchTextParser.TryAddSearchableRule``1(Microsoft.Management.UI.Internal.SelectorFilterRule)">
            <summary>
            Allows the specified rule to be included in the search expression.
            The rule must have an available rule of type <typeparamref name="T"/> that will be set with the search value.
            </summary>
            <typeparam name="T">The type of the text rule within the specified selector rule.</typeparam>
            <param name="selectorRule">The rule to include in the search expression.</param>
            <returns><c>true</c> if a rule of type <typeparamref name="T"/> was added; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchTextParser.ClearSearchableRules">
            <summary>
            Removes the searchable rules, including the full-text rule.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchTextParser.Parse(System.String)">
            <summary>
            Parses the specified text and returns a read-only collection of results.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A read-only collection of results.</returns>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.SearchTextParser.FullTextRuleGroupName">
            <summary>
            Gets the group name of the full-text search pattern.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.SearchTextParser.ValueGroupName">
            <summary>
            Gets the group name of the value search pattern.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.SearchTextParser.ValuePattern">
            <summary>
            Gets the search pattern used for values.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchTextParser.GetPattern">
            <summary>
            Gets a regular expression pattern used to parse the search text.
            </summary>
            <returns>A regular expression pattern used to parse the search text.</returns>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SearchTextParser.SearchableRules">
            <summary>
            Gets a list of the searchable rules.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.SearchTextParser.SearchableRule">
            <summary>
            Provides functionality for getting a FilterRule from search text.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchTextParser.SearchableRule.#ctor(System.String,Microsoft.Management.UI.Internal.SelectorFilterRule,Microsoft.Management.UI.Internal.TextFilterRule)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Management.UI.Internal.SearchTextParser.SearchableRule"/> with the specified unique ID, selector rule, and child rule.
            </summary>
            <param name="uniqueId">A unique ID for this instance.</param>
            <param name="selectorFilterRule">A selector rule that contains <paramref name="childRule"/>.</param>
            <param name="childRule">A text rule within <paramref name="selectorFilterRule"/>.</param>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SearchTextParser.SearchableRule.UniqueId">
            <summary>
            Gest the unique ID for this instance.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SearchTextParser.SearchableRule.Pattern">
            <summary>
            Gets the regular expression pattern for this instance.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchTextParser.SearchableRule.GetRuleWithValueSet(System.String)">
            <summary>
            Gets a rule with the specified search value set.
            </summary>
            <param name="value">The search value.</param>
            <returns>A rule with the specified search value set.</returns>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.SearchTextParseResult">
            <summary>
            Represents the result of search text parsing.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.SearchTextParseResult.#ctor(Microsoft.Management.UI.Internal.FilterRule)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Management.UI.Internal.SearchTextParseResult"/> with the specified <see cref="P:Microsoft.Management.UI.Internal.SearchTextParseResult.FilterRule"/>.
            </summary>
            <param name="rule">The rule that resulted from parsing the search text.</param>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.SearchTextParseResult.FilterRule">
            <summary>
            Gets the rule that resulted from parsing the search text.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ValidatingSelectorValueToDisplayNameConverter">
            <summary>
            The ValidatingSelectorValueToDisplayNameConverterTakes class is responsible for returning a display
            friendly name for the ValidatingSelectorValue class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingSelectorValueToDisplayNameConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Takes in a value and a converter and runs the converter on the value returning
            a display friendly name.
            </summary>
            <param name="values">
            The first parameter is the value to get the display name for.
            The second parameter is the converter.
            </param>
            <param name="targetType">
            Type of string.
            </param>
            <param name="parameter">
            The parameter is not used.
            </param>
            <param name="culture">
            The parameter is not used.
            </param>
            <returns>
            Returns a display friendly name for the first value.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingSelectorValueToDisplayNameConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            The method is not used.
            </summary>
            <param name="value">
            The parameter is not used.
            </param>
            <param name="targetTypes">
            The parameter is not used.
            </param>
            <param name="parameter">
            The parameter is not used.
            </param>
            <param name="culture">
            The parameter is not used.
            </param>
            <returns>
            The method does not return a value.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ValidatingValueToGenericParameterTypeConverter">
            <summary>
            The ValidatingValueToGenericParameterTypeConverter class is responsible for 
            converting a <see cref="T:Microsoft.Management.UI.Internal.ValidatingValue`1"/> to its generic parameter T.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ValidatingValueToGenericParameterTypeConverter.Instance">
            <summary>
            Gets an instance of the ValidatingValueToGenericParameterTypeConverter class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValueToGenericParameterTypeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a <see cref="T:Microsoft.Management.UI.Internal.ValidatingValue`1" /> to its generic parameter T.
            </summary>
            <param name="value">
            The <see cref="T:Microsoft.Management.UI.Internal.ValidatingValue`1"/> to convert.
            </param>
            <param name="targetType">
            The parameter is not used.
            </param>
            <param name="parameter">
            The parameter is not used.
            </param>
            <param name="culture">
            The parameter is not used.
            </param>
            <returns>
            The type of value.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ValidatingValueToGenericParameterTypeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not used.
            </summary>
            <param name="value">The parameter is not used.</param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>The parameter is not used.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ColumnPicker">
            <summary>
            Interaction logic for ColumnPicker.xaml.
            </summary>
            <remarks>
            The logic for manipulating the column lists is in
            <see cref="M:Microsoft.Management.UI.Internal.InnerListGridView.OnColumnPicker(System.Object,System.Windows.RoutedEventArgs)"/>.
            </remarks>
            <summary>
            ColumnPicker
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.#ctor(System.Collections.Generic.ICollection{System.Windows.Controls.GridViewColumn},System.Collections.Generic.ICollection{Microsoft.Management.UI.Internal.InnerListColumn})">
            <summary>
            Constructor which initializes lists.
            </summary>
            <param name="columns">Initially selected columns.</param>
            <param name="availableColumns">
            All initial columns, if these include any which are selected
            these are excluded.
            </param>
            <remarks>
            It is not sufficient to just get
            <paramref name="availableColumns"/>, since this does not
            communicate the current ordering of visible columns.
            </remarks>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ColumnPicker.SelectedColumns">
            <summary>
            Gets the columns in "Selected columns" list.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ColumnPicker.NotSelectedColumns">
            <summary>
            Gets the columns in "Available columns" list.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.OkButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            OK button was clicked.
            </summary>
            <param name="sender">OK button.</param>
            <param name="e">The RoutedEventArgs.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.MoveUpButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Move Up button was clicked.
            </summary>
            <param name="sender">Move Up button.</param>
            <param name="e">The RoutedEventArgs.</param>
            <remarks>
            Moving the selected item in the bound collection does not
            trigger the SelectionChanged event in the listbox.
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.MoveDownButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Move Down button was clicked.
            </summary>
            <param name="sender">Move Down button.</param>
            <param name="e">The RoutedEventArgs.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.AddButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Add button was clicked.
            </summary>
            <param name="sender">Add button.</param>
            <param name="e">The RoutedEventArgs.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.RemoveButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Remove button was clicked.
            </summary>
            <param name="sender">Remove button.</param>
            <param name="e">The RoutedEventArgs.</param>
            <remarks>
            Note that we do not attempt to maintain the ordering of items
            in the NotSelected list when they are removed and then added back.
            In the current implementation, the View of the NotSelected list is
            sorted by name through the CollectionViewSource.
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.OnCreateAutomationPeer">
            <summary>
            Creates AutomationPeer (<see cref="M:System.Windows.UIElement.OnCreateAutomationPeer"/>).
            </summary>
            <returns>New AutomationPeer.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.ListSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            The selection changed in either the Selected or NotSelected list.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The eventargs.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.OnSelectionChanged">
            <summary>
            Update which buttons are enabled based on current selection,
            also whether RequiredColumnText or LastColumnText
            should be visible.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.NotSelectedList_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse double-click of items in
            <see cref="F:Microsoft.Management.UI.Internal.ColumnPicker.PART_NotSelectedList"/>.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The eventargs.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.SelectedList_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles mouse double-click of items in
            <see cref="F:Microsoft.Management.UI.Internal.ColumnPicker.PART_SelectedList"/>.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The eventargs.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ColumnPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.DefaultStringConverter">
            <summary>
            Converts the value of the single <see cref="T:System.Windows.Data.Binding"/> in a
            <see cref="T:System.Windows.Data.MultiBinding"/> to a string,
            and returns that string if not null/empty,
            otherwise returns DefaultValue.
            The <see cref="T:System.Windows.Data.MultiBinding"/> must have exactly one
            <see cref="T:System.Windows.Data.Binding"/>.
            </summary>
            <remarks>
            The problem solved by this <see cref="T:System.Windows.Data.IMultiValueConverter"/>
            is that for an ordinary <see cref="T:System.Windows.Data.Binding"/> which is bound to
            "Path=PropertyA.PropertyB", the Converter is not called if the value
            of PropertyA was null (and therefore PropertyB could not be accessed).
            By contrast, the converter for an <see cref="T:System.Windows.Data.IMultiValueConverter"/>
            will be called even if any or all of the bindings fail to evaluate
            down to the last property.
            
            Note that the <see cref="T:System.Windows.Data.MultiBinding"/> which uses this
            <see cref="T:System.Windows.Data.IMultiValueConverter"/> must have exactly one
            <see cref="T:System.Windows.Data.Binding"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.DefaultStringConverter.DefaultValue">
            <summary>
            Gets or sets default string returned by the converter
            if the value is null/empty.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DefaultStringConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value of the single <see cref="T:System.Windows.Data.Binding"/> in the
            <see cref="T:System.Windows.Data.IMultiValueConverter"/> to a string,
            and returns that string if not null/empty,
            otherwise returns DefaultValue.
            </summary>
            <param name="values">
            Must contain exactly one value, of any type.
            </param>
            <param name="targetType">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>
            A string, either the value of the first <see cref="T:System.Windows.Data.Binding"/>
            converted to string, or DefaultValue.
            </returns>
            <remarks>
            Note that the <see cref="T:System.Windows.Data.MultiBinding"/> which uses this
            <see cref="T:System.Windows.Data.IMultiValueConverter"/> must have exactly one
            <see cref="T:System.Windows.Data.Binding"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.DefaultStringConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Skip ConvertBack binding.
            </summary>
            <param name="value">The parameter is not used.</param>
            <param name="targetTypes">The parameter is not used.</param>
            <param name="parameter">The parameter is not used.</param>
            <param name="culture">The parameter is not used.</param>
            <returns>Binding.DoNothing blocks ConvertBack binding.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.InnerList">
            <content>
            Partial class implementation for InnerList control.
            </content>
            <summary>
            List control for Inner Applications.  This Control supports grouping, sorting, filtering and GUI Virtualization through DataBinding.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerList.CollectionView">
            <summary>
            The current ICollectionView being displayed
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerList.innerGrid">
            <summary>
            The current GridView.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerList.contextMenu">
            <summary>
            ContextMenu for InnerList columns.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerList.columns">
            <summary>
            Private setter for <see cref="P:Microsoft.Management.UI.Internal.InnerList.Columns"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerList.itemsSourceIsEmpty">
            <summary>
            Gets or sets whether the current items source is non-null and has items.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.#ctor">
            <summary>
            Initializes a new instance of this control.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.InnerList.ItemSourcesPropertyChanged">
            <summary>
             Register PropertyChangedEventHandler ItemSourcesPropertyChanged .
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerList.Items">
            <summary>
            Gets ItemsSource instead.
            <seealso cref="T:Microsoft.Management.UI.Internal.InnerList"/> Does not support adding to Items.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerList.SortedColumn">
            <summary>
            Gets the column that is sorted, or <c>null</c> if no column is sorted.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerList.InnerGrid">
            <summary>
            Gets InnerListGridView.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerList.Columns">
            <summary>
            Gets the collection of columns that this list should display.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.ScrollIntoView(System.Object)">
            <summary>
            Causes the object to scroll into view.
            </summary>
            <param name="item">Object to scroll.</param>
            <remarks>This method overrides ListBox.ScrollIntoView(), which throws NullReferenceException when VirtualizationMode is set to Recycling.
            This implementation uses a workaround recommended by the WPF team.</remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.ScrollIntoViewFromTop(System.Object)">
            <summary>
            Causes the object to scroll into view from the top, so that it tends to appear at the bottom of the scroll area.
            </summary>
            <param name="item">Object to scroll.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.RefreshColumns">
            <summary>
            Updates the InnerGrid based upon the columns collection.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.ApplySort(Microsoft.Management.UI.Internal.InnerListColumn,System.Boolean)">
            <summary>
            Sorts the list by the specified column. This has no effect if the list does not have a data source.
            </summary>
            <param name="column">
            The column to sort
            </param>
            <param name="shouldScrollIntoView">
            Indicates whether the SelectedItem should be scrolled into view.
            </param>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.GetDescriptionsForSorting">
            <summary>
            Gets a list of data descriptions for the columns that are not the primary sort column.
            </summary>
            <returns>A list of data descriptions for the columns that are not the primary sort column.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.ClearSort">
            <summary>
            Clears the sort order from the list.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the ItemsSource changes to set internal fields, subscribe to the view change 
            and possibly autopopulate columns.
            </summary>
            <param name="oldValue">Previous ItemsSource.</param>
            <param name="newValue">Current ItemsSource.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when ItemsChange to throw an exception indicating we don't support
            changing Items directly.
            </summary>
            <param name="e">Event parameters.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed while within the InnerList scope.
            </summary>
            <param name="e">The event args.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.InnerList_OnViewChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the View property is changed.
            </summary>
            <param name="obj">InnerList whose property is being changed.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.GetItemsException">
            <summary>
            Gets the exception to be thrown when using Items.
            </summary>
            <returns>The exception to be thrown when using Items.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.SetCollectionView(System.Collections.IEnumerable)">
            <summary>
            Called from OnItemsSourceChanged to set the collectionView field and
            subscribe to the collectionView changed event.
            </summary>
            <param name="newValue">ITemsSource passed to OnItemsSourceChanged.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.UpdateViewAndCollectionView(System.Collections.IEnumerable)">
            <summary>
            Update View And CollectionView.
            </summary>
            <param name="value">InnerList object.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.ReleaseInnerGridReferences">
            <summary>
            Releases all references to the current inner grid, if one exists.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.SetColumnHeaderActions">
            <summary>
            Called when the ItemsSource changes, after SetGridview to add event handlers
            to the column header.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.GetClipboardTextForSelectedItems">
            <summary>
            Gets a tab-delimited string representing the data of the selected rows.
            </summary>
            <returns>A tab-delimited string representing the data of the selected rows.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.Header_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Called to implement sorting functionality on column header pressed by space or enter key.
            </summary>
            <param name="sender">Typically a GridViewColumnHeader.</param>
            <param name="e">The event information.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.Header_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to implement sorting functionality on column header click.
            </summary>
            <param name="sender">Typically a GridViewColumnHeader.</param>
            <param name="e">The event information.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.HeaderActionProcess(System.Object)">
            <summary>
            Called to implement sorting functionality.
            </summary>
            <param name="sender">Typically a GridViewColumnHeader.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.GetListColumnsContextMenu">
            <summary>
            Create default Context Menu.
            </summary>
            <returns>ContextMenu of List Columns.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.SetColumnPickerContextMenuItem">
            <summary>
            Set up context menu item for Column Picker feature.
            </summary>
            <returns>True if it is successfully set up.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.OnCopyCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Called to determine if Copy can execute.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.OnCopyExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when Copy executes.
            </summary>
            <remarks>
            When executed, the currently selected items are copied to the clipboard.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerList.AutoGenerateColumnsProperty">
            <summary>
            Identifies the AutoGenerateColumns dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerList.AutoGenerateColumns">
            <summary>
            Gets or sets a value indicating whether this list&apos;s columns should be automatically generated based on its data.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.InnerList.AutoGenerateColumnsChanged">
            <summary>
            Occurs when AutoGenerateColumns property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.OnAutoGenerateColumnsChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when AutoGenerateColumns property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerList.IsGroupsExpandedProperty">
            <summary>
            Identifies the IsGroupsExpanded dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerList.IsGroupsExpanded">
            <summary>
            Gets or sets a value indicating whether is groups expanded or not.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.InnerList.IsGroupsExpandedChanged">
            <summary>
            Occurs when IsGroupsExpanded property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.OnIsGroupsExpandedChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when IsGroupsExpanded property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerList.IsPrimarySortColumnPropertyKey">
            <summary>
            Identifies the IsPrimarySortColumn dependency property key.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerList.IsPrimarySortColumnProperty">
            <summary>
            Identifies the IsPrimarySortColumn dependency property.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.GetIsPrimarySortColumn(System.Windows.DependencyObject)">
            <summary>
            Gets whether a column is the primary sort in a list.
            </summary>
            <param name="element">The dependency object that the property is attached to.</param>
            <returns>
            The value of IsPrimarySortColumn that is attached to element.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.SetIsPrimarySortColumn(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether a column is the primary sort in a list.
            </summary>
            <param name="element">The dependency object that the property will be attached to.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerList.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.InnerListColumn">
            <summary>
            InnerList Columns class.
            Derives and extends GridViewColumn to add concepts such as column visibility.
            </summary>
            <summary>
            Derives and extends GridViewColumn to add concepts such as column visibility..
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.#cctor">
            <summary>
            Static Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.#ctor">
            <summary>
            Constructor for <see cref="T:Microsoft.Management.UI.Internal.InnerListColumn"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.#ctor(Microsoft.Management.UI.Internal.UIPropertyGroupDescription)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Management.UI.Internal.InnerListColumn"/> class with the specified data description, and creates a simple binding to its property.
            The column will be initially visible by default.
            </summary>
            <param name="dataDescription">The property description for this column's data.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.#ctor(Microsoft.Management.UI.Internal.UIPropertyGroupDescription,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Management.UI.Internal.InnerListColumn"/> class with the specified data description and visibility, and creates a simple binding to its property.
            </summary>
            <param name="dataDescription">The property description for this column's data.</param>
            <param name="isVisible">Whether the column is initially visible.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.#ctor(Microsoft.Management.UI.Internal.UIPropertyGroupDescription,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Management.UI.Internal.InnerListColumn"/> class with the specified data description and visibility.
            </summary>
            <param name="dataDescription">The description of the data this column is bound to.</param>
            <param name="isVisible">Whether the column is initially visible.</param>
            <param name="createDefaultBinding">Whether the column should create a default binding using the specified data's property.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.GetDefaultStringFormat(System.Type)">
            <summary>
            Gets a default string format for the specified type.
            </summary>
            <param name="type">The type to get a string format for.</param>
            <returns>A default string format for the specified type.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.ToString">
            <summary>
            Displayable string identifying this class instance.
            </summary>
            <returns>A string to represent the instance of this class.</returns>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerListColumn.DataDescriptionProperty">
            <summary>
            Identifies the DataDescription dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerListColumn.DataDescription">
            <summary>
            Gets or sets the data description.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.OnDataDescriptionChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.UIPropertyGroupDescription})">
            <summary>
            Called when DataDescription property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerListColumn.MinWidthProperty">
            <summary>
            Identifies the MinWidth dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerListColumn.MinWidth">
            <summary>
            Gets or sets a value that dictates the minimum allowable width of the column.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.OnMinWidthChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Double})">
            <summary>
            Called when MinWidth property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerListColumn.RequiredProperty">
            <summary>
            Identifies the Required dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerListColumn.Required">
            <summary>
            Gets or sets a value indicating whether the column may not be removed.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.OnRequiredChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when Required property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerListColumn.VisibleProperty">
            <summary>
            Identifies the Visible dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerListColumn.Visible">
            <summary>
            Gets or sets a value indicating whether the columns we want to have available in the list.
            </summary>
            <remarks>
            Modifying the Visible property does not in itself make the column visible or not visible.  This should always be kept in sync with the Columns property.
            </remarks>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListColumn.OnVisibleChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when Visible property changes.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.InnerListGridView">
            <summary>
            Extends the basic GrdView class to introduce the Visible concept to the 
            Columns collection.
            </summary>
            <!--We create our own version of Columns, that:
            1) Only takes InnerListColumn's
            2) Passes through the underlying ListView Columns, only the InnerListColumns
            that have Visible=true.-->
        </member>
        <member name="F:Microsoft.Management.UI.Internal.InnerListGridView.canChangeColumns">
            <summary>
            Set to true when we want to change the Columns collection.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListGridView.#ctor">
            <summary>
            Instanctiates a new object of this class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListGridView.#ctor(System.Collections.ObjectModel.ObservableCollection{Microsoft.Management.UI.Internal.InnerListColumn})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.InnerListGridView"/> class with the specified columns.
            </summary>
            <param name="availableColumns">The columns this grid should display.</param>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.InnerListGridView.AvailableColumns">
            <summary>
            Gets a collection of all columns which can be
            added to the ManagementList, for example through ColumnPicker.
            Columns is the collection of the columns which are currently
            displayed (in the order in which they are displayed).
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListGridView.ReleaseReferences">
            <summary>
            Releases this instance's references to its controls.
            This API supports the framework infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListGridView.PopulateColumns(System.Collections.IEnumerable)">
            <summary>
            Called when the ItemsSource changes to auto populate the GridView columns
            with reflection information on the first element of the ItemsSource.
            </summary>
            <param name="newValue">
            The new ItemsSource. 
            This is used just to fetch .the first collection element.
            </param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListGridView.OnColumnPicker(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Callback for displaying the Column Picker.
            </summary>
            <param name="sender">The send object.</param>
            <param name="e">The Event RoutedEventArgs.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListGridView.Columns_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when Columns changes so we can check we are the ones changing it.
            </summary>
            <param name="sender">The collection changing.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListGridView.AvailableColumns_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the AvailableColumns changes to pass through the VisibleColumns to Columns.
            </summary>
            <param name="sender">The collection changing.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListGridView.AddOrRemoveNotifications(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called from availableColumns_CollectionChanged to add or remove the notifications
            used to track the Visible property.
            </summary>
            <param name="e">The parameter passed to availableColumns_CollectionChanged.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListGridView.SynchronizeColumns">
            <summary>
            Syncronizes AvailableColumns and Columns preserving the order from Columns that
            comes from the user moving Columns around.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.InnerListGridView.Column_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the Visible property of a column changes.
            </summary>
            <param name="sender">The column whose property changed.</param>
            <param name="e">The event parameters.</param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.IPropertyValueGetter">
            <summary>
            Provides methods for retrieving the property values of objects.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IPropertyValueGetter.TryGetPropertyValue(System.String,System.Object,System.Object@)">
            <summary>Gets the value of the specified property on the specified object.</summary>
            <param name="propertyName">The name of the property to get the value for.</param>
            <param name="value">The object to get value from.</param>
            <param name="propertyValue">The value of the property.</param>
            <returns><c>true</c> if the property value could be retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.IPropertyValueGetter.TryGetPropertyValue``1(System.String,System.Object,``0@)">
            <summary>Gets the value of the specified property on the specified object.</summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="propertyName">The name of the property to get the value for.</param>
            <param name="value">The object to get value from.</param>
            <param name="propertyValue">The value of the property if it exists; otherwise, <c>default(T)</c>.</param>
            <returns><c>true</c> if the property value of the specified type could be retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ManagementList">
            <summary>
            Interaction logic for ManagementList.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.Views">
            <summary>
            Gets the collection of saved views.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.SavedViewFactory">
            <summary>
            Gets or sets a factory used to create new views.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.#ctor">
            <summary>
            Initializes a new instance of the ManagementList class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Moves focus to the SearchBox when Ctrl+E is pressed.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.LogicalChildren">
            <summary>
            Gets an enumerator for logical child elements of this element.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.AddColumn(Microsoft.Management.UI.Internal.InnerListColumn)">
            <summary>
            Adds the specified column.
            Default filter rules for the column will be added if the filter is shown.
            A default search rule will be added if the search box is shown and the column's data type is searchable.
            </summary>
            <param name="column">The column to add.</param>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.AddColumn(Microsoft.Management.UI.Internal.InnerListColumn,System.Boolean)">
            <summary>
            Adds the specified columns, and optionally default filter and search rules.
            </summary>
            <param name="column">The column to add.</param>
            <param name="addDefaultFilterRules">Whether to add default filter rules for the specified column.</param>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.AddRule(Microsoft.Management.UI.Internal.FilterRule)">
            <summary>
            Adds the specified rule, using the rule's display name as its group name.
            </summary>
            <param name="rule">The rule to add.</param>
            <exception cref="T:System.ArgumentNullException">The specified value is a null reference.</exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.ResetView">
            <summary>
            Clears all of the current columns, searchable rules and filter rules. 
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.ViewsChangedEvent">
            <summary>
            Identifies the ViewsChanged RoutedEvent.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.ViewsChanged">
            <summary>
            Occurs when any of this instance's views change.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.ClearFilterCommand">
            <summary>
            Informs the ManagementList that it should clear the filter that is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnClearFilterCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Called to determine if ClearFilter can execute.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnClearFilterExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when ClearFilter executes.
            </summary>
            <remarks>
            Informs the ManagementList that it should clear the filter that is applied.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.SaveViewCommand">
            <summary>
            Informs the PickerBase that it should close the dropdown.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnSaveViewCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Called to determine if SaveView can execute.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnSaveViewExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when SaveView executes.
            </summary>
            <remarks>
            Informs the PickerBase that it should close the dropdown.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.StartFilterCommand">
            <summary>
            Informs the ManagementList that it should apply the filter.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnStartFilterCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Called to determine if StartFilter can execute.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnStartFilterExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when StartFilter executes.
            </summary>
            <remarks>
            Informs the ManagementList that it should apply the filter.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.StopFilterCommand">
            <summary>
            Informs the ManagementList that it should stop filtering that is in progress.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnStopFilterCanExecute(System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Called to determine if StopFilter can execute.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnStopFilterExecuted(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Called when StopFilter executes.
            </summary>
            <remarks>
            Informs the ManagementList that it should stop filtering that is in progress.
            </remarks>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.AddFilterRulePickerPropertyKey">
            <summary>
            Identifies the AddFilterRulePicker dependency property key.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.AddFilterRulePickerProperty">
            <summary>
            Identifies the AddFilterRulePicker dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.AddFilterRulePicker">
            <summary>
            Gets the filter rule picker.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.AddFilterRulePickerChanged">
            <summary>
            Occurs when AddFilterRulePicker property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnAddFilterRulePickerChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.AddFilterRulePicker})">
            <summary>
            Called when AddFilterRulePicker property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.CurrentViewPropertyKey">
            <summary>
            Identifies the CurrentView dependency property key.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.CurrentViewProperty">
            <summary>
            Identifies the CurrentView dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.CurrentView">
            <summary>
            Gets or sets current view.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.CurrentViewChanged">
            <summary>
            Occurs when CurrentView property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnCurrentViewChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.StateDescriptor{Microsoft.Management.UI.Internal.ManagementList}})">
            <summary>
            Called when CurrentView property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.EvaluatorProperty">
            <summary>
            Identifies the Evaluator dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.Evaluator">
            <summary>
            Gets or sets the FilterEvaluator.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.EvaluatorChanged">
            <summary>
            Occurs when Evaluator property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnEvaluatorChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.ItemsControlFilterEvaluator})">
            <summary>
            Called when Evaluator property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.FilterRulePanelPropertyKey">
            <summary>
            Identifies the FilterRulePanel dependency property key.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.FilterRulePanelProperty">
            <summary>
            Identifies the FilterRulePanel dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.FilterRulePanel">
            <summary>
            Gets the filter rule panel.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.FilterRulePanelChanged">
            <summary>
            Occurs when FilterRulePanel property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnFilterRulePanelChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.FilterRulePanel})">
            <summary>
            Called when FilterRulePanel property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.IsFilterShownProperty">
            <summary>
            Identifies the IsFilterShown dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.IsFilterShown">
            <summary>
            Gets or sets a value indicating whether the filter is shown.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.IsFilterShownChanged">
            <summary>
            Occurs when IsFilterShown property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnIsFilterShownChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when IsFilterShown property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.IsLoadingItemsProperty">
            <summary>
            Identifies the IsLoadingItems dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.IsLoadingItems">
            <summary>
            Gets or sets a value indicating whether items are loading.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.IsLoadingItemsChanged">
            <summary>
            Occurs when IsLoadingItems property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnIsLoadingItemsChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when IsLoadingItems property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.IsSearchShownProperty">
            <summary>
            Identifies the IsSearchShown dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.IsSearchShown">
            <summary>
            Gets or sets a value indicating whether the search box is shown.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.IsSearchShownChanged">
            <summary>
            Occurs when IsSearchShown property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnIsSearchShownChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Boolean})">
            <summary>
            Called when IsSearchShown property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.ListPropertyKey">
            <summary>
            Identifies the List dependency property key.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.ListProperty">
            <summary>
            Identifies the List dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.List">
            <summary>
            Gets the list.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.ListChanged">
            <summary>
            Occurs when List property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnListChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.InnerList})">
            <summary>
            Called when List property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.SearchBoxPropertyKey">
            <summary>
            Identifies the SearchBox dependency property key.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.SearchBoxProperty">
            <summary>
            Identifies the SearchBox dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.SearchBox">
            <summary>
            Gets the search box.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.SearchBoxChanged">
            <summary>
            Occurs when SearchBox property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnSearchBoxChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.SearchBox})">
            <summary>
            Called when SearchBox property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.ViewManagerUserActionStateProperty">
            <summary>
            Identifies the ViewManagerUserActionState dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.ViewManagerUserActionState">
            <summary>
            Gets or sets the user interaction state of the view manager.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.ViewManagerUserActionStateChanged">
            <summary>
            Occurs when ViewManagerUserActionState property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnViewManagerUserActionStateChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.UserActionState})">
            <summary>
            Called when ViewManagerUserActionState property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementList.ViewSaverUserActionStateProperty">
            <summary>
            Identifies the ViewSaverUserActionState dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementList.ViewSaverUserActionState">
            <summary>
            Gets or sets the user interaction state of the view saver.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementList.ViewSaverUserActionStateChanged">
            <summary>
            Occurs when ViewSaverUserActionState property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnViewSaverUserActionStateChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.UserActionState})">
            <summary>
            Called when ViewSaverUserActionState property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnApplyTemplate">
            <summary>
            Called when ApplyTemplate is called.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementList.OnCreateAutomationPeer">
            <summary>
            Create an instance of the AutomationPeer.
            </summary>
            <returns>
            An instance of the AutomationPeer.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ManagementListStateDescriptor">
            <summary>
            Allows the state of the ManagementList to be saved and restored.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.#ctor">
            <summary>
            Constructs a new instance of the ManagementListStateDescriptor class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.#ctor(System.String)">
            <summary>
            Constructs a new instance of the ManagementListStateDescriptor class.
            </summary>
            <param name="name">The name that will be displayed to users.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.SaveState(Microsoft.Management.UI.Internal.ManagementList)">
            <summary>
            Saves a snapshot of the ManagementList state.
            </summary>
            <param name="subject">
            The ManagementList instance whose state should be preserved.
            </param>
            <remarks>
            Columns will not be saved if not supported per
            <see cref="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.VerifyColumnsSavable(Microsoft.Management.UI.Internal.ManagementList,Microsoft.Management.UI.Internal.RetryActionCallback{Microsoft.Management.UI.Internal.ManagementList})"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            ManagementList.AutoGenerateColumns not supported.
            </exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.RestoreState(Microsoft.Management.UI.Internal.ManagementList)">
            <summary>
            Restores the state of the passed in ManagementList and applies the restored filter.
            </summary>
            <param name="subject">The ManagementList instance whose state should be restored.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.RestoreState(Microsoft.Management.UI.Internal.ManagementList,System.Boolean)">
            <summary>
            Restores the state of the passed in ManagementList.
            </summary>
            <param name="subject">
            The ManagementList instance whose state should be restored.
            </param>
            <param name="applyRestoredFilter">
            Whether the restored filter should be automatically applied.
            </param>
            <remarks>
            Columns will not be restored if not supported per
            <see cref="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.VerifyColumnsRestorable(Microsoft.Management.UI.Internal.ManagementList,Microsoft.Management.UI.Internal.RetryActionCallback{Microsoft.Management.UI.Internal.ManagementList})"/>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            ManagementList.AutoGenerateColumns not supported.
            </exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.VerifyColumnsRestorable(Microsoft.Management.UI.Internal.ManagementList,Microsoft.Management.UI.Internal.RetryActionCallback{Microsoft.Management.UI.Internal.ManagementList})">
            <summary>
            Checks whether columns can be restored.
            </summary>
            <param name="subject">Target ManagementList.</param>
            <param name="callback">RetryActionAfterLoaded callback method.</param>
            <returns>true iff columns restorable</returns>
            <exception cref="T:System.InvalidOperationException">
            ManagementList.AutoGenerateColumns not supported.
            </exception>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.RestoreColumnsState(Microsoft.Management.UI.Internal.ManagementList)">
            <summary>
            Set column state for target <see cref="T:Microsoft.Management.UI.Internal.ManagementList"/> to
            previously persisted state.
            </summary>
            <param name="subject">
            Target <see cref="T:Microsoft.Management.UI.Internal.ManagementList"/> whose column state
            is to be restored.
            </param>
            <remarks>
            Required columns are always visible regardless of persisted state.
            </remarks>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.ColumnStateDescriptor.Index">
            <summary>
            Gets or sets the location of the column.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.ColumnStateDescriptor.IsInUse">
            <summary>
            Gets or sets a value indicating whether the column should be shown.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.ColumnStateDescriptor.SortDirection">
            <summary>
            Gets or sets the sort direction of the column.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.ColumnStateDescriptor.Width">
            <summary>
            Gets or sets a value indicating the width of a column.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.RuleStateDescriptor.UniqueName">
            <summary>
            Gets or sets the UniqueName associated with the rule.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.RuleStateDescriptor.Rule">
            <summary>
            Gets the FilterRule associated with the rule.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.InnerListColumnOrderComparer.#ctor(System.Collections.Generic.Dictionary{System.String,Microsoft.Management.UI.Internal.ManagementListStateDescriptor.ColumnStateDescriptor})">
            <summary>
            Constructor that takes a lookup dictionary of column information.
            </summary>
            <param name="columns">The lookup dictionary.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.InnerListColumnOrderComparer.Compare(Microsoft.Management.UI.Internal.InnerListColumn,Microsoft.Management.UI.Internal.InnerListColumn)">
            <summary>
            Compares two InnerListColumn objects and determines their relative
            ordering.
            </summary>
            <param name="x">The first object.</param>
            <param name="y">The second object.</param>
            <returns>
            Returns 1 if x should ordered after y in the list, returns -1 if
            x should be order before y, and returns 0 if the ordering should not
            be changed.
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptor.ToString">
            <summary>
            Displayable string identifying this class instance.
            </summary>
            <returns>A string to represent the instance of this class.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ManagementListStateDescriptorFactory">
            <summary>
            Defines a factory which returns ManagementListStateDescriptors.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListStateDescriptorFactory.Create">
            <summary>
            Factory method that creates a ManagementListStateDescriptor.
            </summary>
            <returns>A new ManagementListStateDescriptor.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ManagementListTitle">
            <content>
            Partial class implementation for ManagementListTitle control.
            </content>
            <summary>
            Provides a common control for displaying header information about a list.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListTitle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.ManagementListTitle" /> class.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementListTitle.ListProperty">
            <summary>
            Identifies the List dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementListTitle.List">
            <summary>
            Gets or sets the list this title is for. This is a dependency property.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementListTitle.ListChanged">
            <summary>
            Occurs when List property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListTitle.OnListChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{Microsoft.Management.UI.Internal.ManagementList})">
            <summary>
            Called when List property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementListTitle.ListStatusProperty">
            <summary>
            Identifies the ListStatus dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementListTitle.ListStatus">
            <summary>
            Gets the status of the list. This is a dependency property.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementListTitle.ListStatusChanged">
            <summary>
            Occurs when ListStatus property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListTitle.OnListStatusChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.String})">
            <summary>
            Called when ListStatus property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementListTitle.TitleProperty">
            <summary>
            Identifies the Title dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementListTitle.Title">
            <summary>
            Gets or sets the title. This is a dependency property.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementListTitle.TitleChanged">
            <summary>
            Occurs when Title property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListTitle.OnTitleChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.String})">
            <summary>
            Called when Title property changes.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ManagementListTitle.TotalItemCountProperty">
            <summary>
            Identifies the TotalItemCount dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ManagementListTitle.TotalItemCount">
            <summary>
            Gets or sets the number of items in the list before filtering is applied. This is a dependency property.
            </summary>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ManagementListTitle.TotalItemCountChanged">
            <summary>
            Occurs when TotalItemCount property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListTitle.OnTotalItemCountChanged(Microsoft.Management.UI.Internal.PropertyChangedEventArgs{System.Int32})">
            <summary>
            Called when TotalItemCount property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListTitle.RaisePropertyChangedEvent``1(System.EventHandler{Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0}},Microsoft.Management.UI.Internal.PropertyChangedEventArgs{``0})">
            <summary>
            Called when a property changes.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListTitle.#cctor">
            <summary>
            Called when the type is initialized.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ManagementListTitle.OnCreateAutomationPeer">
            <summary>
            Create an instance of the AutomationPeer.
            </summary>
            <returns>
            An instance of the AutomationPeer.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.PropertyValueComparer">
            <summary>
            Provides a mechanism for comparing objects based on specific properties.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertyValueComparer.#ctor(System.Collections.Generic.List{Microsoft.Management.UI.Internal.UIPropertyGroupDescription},System.Boolean,Microsoft.Management.UI.Internal.IPropertyValueGetter)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Management.UI.Internal.PropertyValueComparer"/>.
            </summary>
            <param name="dataDescriptions">The data descriptions containing sort information for all columns.</param>
            <param name="sortRecursively">Whether sorting should compare additional columns when equal values are found.</param>
            <param name="valueGetter">The <see cref="T:Microsoft.Management.UI.Internal.PropertyValueGetter"/> used to retrieve property values.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertyValueComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares properties of the specified objects and returns a value indicating whether one is less than, equal to or greater than the other.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>
            Less than zero if <paramref name="a"/> is less than <paramref name="b"/>;
            greater than zero if <paramref name="a"/> is greater than <paramref name="b"/>;
            otherwise, zero.
            </returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.PropertyValueGetter">
            <summary>
            Provides methods for retrieving the property values of objects.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertyValueGetter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.PropertyValueGetter"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertyValueGetter.TryGetPropertyValue(System.String,System.Object,System.Object@)">
            <summary>Gets the value of the specified property on the specified object.</summary>
            <param name="propertyName">The name of the property to get the value for.</param>
            <param name="value">The object to get value from.</param>
            <param name="propertyValue">The value of the property.</param>
            <returns><c>true</c> if the property value could be retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.PropertyValueGetter.TryGetPropertyValue``1(System.String,System.Object,``0@)">
            <summary>Gets the value of the specified property on the specified object.</summary>
            <typeparam name="T">The type of the property value.</typeparam>
            <param name="propertyName">The name of the property to get the value for.</param>
            <param name="value">The object to get value from.</param>
            <param name="propertyValue">The value of the property if it exists; otherwise, <c>default(T)</c>.</param>
            <returns><c>true</c> if the property value of the specified type could be retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.UIPropertyGroupDescription">
            <summary>
            Describes a property that has visual representation and can be sorted and grouped.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.UIPropertyGroupDescription.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.UIPropertyGroupDescription"/> class with the specified property name and display name.
            This constructor assumes that the type of data is <see cref="T:System.String"/>.
            </summary>
            <param name="propertyName">The name of the property that this instance describes.</param>
            <param name="displayName">The name displayed to users for this data.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.UIPropertyGroupDescription.#ctor(System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Management.UI.Internal.UIPropertyGroupDescription"/> class with the specified property name, display name and data type.
            </summary>
            <param name="propertyName">The name of the property that this instance describes.</param>
            <param name="displayName">The name displayed to users for this data.</param>
            <param name="dataType">The type of the data that this instance describes.</param>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UIPropertyGroupDescription.DisplayName">
            <summary>
            Gets or sets the localizable display name representing the associated property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UIPropertyGroupDescription.DisplayContent">
            <summary>
            Gets or sets the display content representing the associated property.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UIPropertyGroupDescription.SortDirection">
            <summary>
            Gets or sets which direction the associated property should be sorted.
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.UIPropertyGroupDescription.DataType">
            <summary>
            Gets or sets the type of the associated property.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.UIPropertyGroupDescription.ReverseSortDirection">
            <summary>
            Reverses the current sort direction.
            </summary>
            <returns>The new sort direction.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.UIPropertyGroupDescription.ToString">
            <summary>
            Displayable string identifying this class instance.
            </summary>
            <returns>A string to represent the instance of this class.</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ViewGroupToStringConverter">
            <summary>
            Converter from ViewGroup to group title string.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ViewGroupToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert each ViewGroup into its name and its count.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="targetType">Type to convert the value to.</param>
            <param name="parameter">The conversion parameter.</param>
            <param name="culture">Conversion culture.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ViewGroupToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            ConvertBack is not supported.
            </summary>
            <param name="value">Value to be converted.</param>
            <param name="targetType">Type to convert the value to.</param>
            <param name="parameter">The conversion parameter.</param>
            <param name="culture">Conversion culture.</param>
            <returns>This method is not supported.</returns>
            <exception cref="T:System.NotSupportedException">when calling the method.</exception>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.WaitRing">
            <summary>
            Waiting Ring class.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.WaitRing.#cctor">
            <summary>
            Static constructor for WaitRing.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.HelpParagraphBuilder">
            <summary>
            Builds a help paragraph for a cmdlet
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.HelpParagraphBuilder.IndentSize">
            <summary>
            Indentation size
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.HelpParagraphBuilder.Separators">
            <summary>
            new line separators 
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.HelpParagraphBuilder.psObj">
            <summary>
            Object with the cmdelt
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.#ctor(System.Windows.Documents.Paragraph,System.Management.Automation.PSObject)">
            <summary>
            Initializes a new instance of the HelpParagraphBuilder class
            </summary>
            <param name="paragraph">paragraph being built</param>
            <param name="psObj">object with help information</param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.HelpParagraphBuilder.HelpCategory">
            <summary>
            Enum for category of Help.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.GetPropertyString(System.Management.Automation.PSObject,System.String)">
            <summary>
            Gets the string value of a property or null if it could not be retrieved
            </summary>
            <param name="psObj">object with the property</param>
            <param name="propertyName">property name</param>
            <returns>the string value of a property or null if it could not be retrieved</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddTextToParagraphBuilder">
            <summary>
            Adds the help text to the paragraph
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.GetProperty(System.Management.Automation.PSObject,System.String)">
            <summary>
            Gets the object property or null if it could not be retrieved
            </summary>
            <param name="psObj">object with the property</param>
            <param name="propertyName">property name</param>
            <returns>the object property or null if it could not be retrieved</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.GetInnerPSObjectPropertyString(System.Management.Automation.PSObject,System.String,System.String)">
            <summary>
            Gets a PSObject and then a value from it or null if the value could not be retrieved
            </summary>
            <param name="psObj">PSObject that contains another PSObject as a property</param>
            <param name="psObjectName">property name that contains the PSObject</param>
            <param name="propertyName">property name in thye inner PSObject</param>
            <returns>the string from the inner psObject property or null if it could not be retrieved</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.GetPropertyObject(System.Management.Automation.PSObject,System.String)">
            <summary>
            Gets the value of a property or null if the value could not be retrieved
            </summary>
            <param name="psObj">object with the property</param>
            <param name="propertyName">property name</param>
            <returns>the value of a property or null if the value could not be retrieved</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.GetTextFromArray(System.Management.Automation.PSObject,System.String)">
            <summary>
            Gets the text from a property of type PSObject[] where the first object has a text property
            </summary>
            <param name="psObj">objhect to get text from</param>
            <param name="propertyText">property with PSObject[] containing text</param>
            <returns>the text from a property of type PSObject[] where the first object has a text property</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.LargestSize(System.String[])">
            <summary>
            Returns the largest size of a group of strings
            </summary>
            <param name="strs">strings to evaluate the largest size from</param>
            <returns>the largest size of a group of strings</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddIndent(System.String)">
            <summary>
            Splits the string adding indentation before each line
            </summary>
            <param name="str">string to add indentation to</param>
            <returns>the string indented</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddIndent(System.String,System.Int32)">
            <summary>
            Splits the string adding indentation before each line
            </summary>
            <param name="str">string to add indentation to</param>
            <param name="numberOfIdents">number of indentations</param>
            <returns>the string indented</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddIndent(System.String,System.String)">
            <summary>
            Splits the string adding indentation before each line
            </summary>
            <param name="str">string to add indentation to</param>
            <param name="indentString">indentation string</param>
            <returns>the string indented</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.GetPropertyObjectArray(System.Management.Automation.PSObject,System.String)">
            <summary>
            Get the object array value of a property
            </summary>
            <param name="obj">object containing the property</param>
            <param name="propertyName">property with the array value</param>
            <returns>the object array value of a property</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddStringSection(System.Boolean,System.String,System.String)">
            <summary>
            Adds a section that contains only a string
            </summary>
            <param name="setting">true if it should add the segment</param>
            <param name="sectionName">name of the section to add</param>
            <param name="sectionTitle">title of the section</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddSyntax(System.Boolean,System.String)">
            <summary>
            Adds the help syntax segment
            </summary>
            <param name="setting">true if it should add the segment</param>
            <param name="sectionTitle">title of the section</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddDescription(System.Boolean,System.String,System.String)">
            <summary>
            Adds the help description segment
            </summary>
            <param name="setting">true if it should add the segment</param>
            <param name="sectionTitle">title of the section</param>
            <param name="propertyName">propertyName that has description</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddExamples(System.Boolean,System.String)">
            <summary>
            Adds the help examples segment
            </summary>
            <param name="setting">true if it should add the segment</param>
            <param name="sectionTitle">title of the section</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddParameters(System.Boolean,System.String,System.String,Microsoft.Management.UI.Internal.HelpParagraphBuilder.HelpCategory)">
            <summary>
            Adds the help parameters segment
            </summary>
            <param name="setting">true if it should add the segment</param>
            <param name="sectionTitle">title of the section</param>
            <param name="paramPropertyName">name of the property which has properties</param>
            <param name="helpCategory">category of help</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddNavigationLink(System.Boolean,System.String)">
            <summary>
            Adds the help navigation links segment
            </summary>
            <param name="setting">true if it should add the segment</param>
            <param name="sectionTitle">title of the section</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddInputOrOutputEntries(System.Boolean,System.String,System.String,System.String)">
            <summary>
            Adds the help input or output segment
            </summary>
            <param name="setting">true if it should add the segment</param>
            <param name="sectionTitle">title of the section</param>
            <param name="inputOrOutputProperty">property with the outter object</param>
            <param name="inputOrOutputInnerProperty">property with the inner object</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpParagraphBuilder.AddNotes(System.Boolean,System.String)">
            <summary>
            Adds the help notes segment
            </summary>
            <param name="setting">true if it should add the segment</param>
            <param name="sectionTitle">title of the section</param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.HelpViewModel">
            <summary>
            ViewModel for the Help Dialog used to:
                build the help document
                search the help document
                offer text for labels
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.HelpViewModel.helpBuilder">
            <summary>
            The builder for the help FlowDocument Paragraph  used in a RichEditText control
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.HelpViewModel.searcher">
            <summary>
            Searcher for selecting current matches in paragraph text
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.HelpViewModel.helpTitle">
            <summary>
            Title of the help window
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.HelpViewModel.zoom">
            <summary>
            the zoom bound to the zoom slider value
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.HelpViewModel.findText">
            <summary>
            Text to be found. This is bound to the find TextBox
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.HelpViewModel.matchesLabel">
            <summary>
            text for the number of matches found
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpViewModel.#ctor(System.Management.Automation.PSObject,System.Windows.Documents.Paragraph)">
            <summary>
            Initializes a new instance of the HelpViewModel class
            </summary>
            <param name="psObj">object containing help</param>
            <param name="documentParagraph">paragraph in which help text is built/searched</param>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.HelpViewModel.PropertyChanged">
            <summary>
            Used to notify of property changes
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpViewModel.Zoom">
            <summary>
            Gets or sets the Zoom bound to the zoom slider value
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpViewModel.ZoomLevel">
            <summary>
            Gets the value bound to the RichTextEdit zoom, which is calculated based on the zoom
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpViewModel.ZoomLabel">
            <summary>
            Gets the label to be displayed for the zoom
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpViewModel.FindText">
            <summary>
            Gets or sets the text to be found
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpViewModel.HelpTitle">
            <summary>
            Gets the title of the window
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpViewModel.MatchesLabel">
            <summary>
            Gets or sets the label for current matches
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpViewModel.CanGoToNextOrPrevious">
            <summary>
            Gets a value indicating whether there are matches to go to
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpViewModel.Searcher">
            <summary>
            Gets the searcher for selecting current matches in paragraph text
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.HelpViewModel.HelpBuilder">
            <summary>
            Gets the paragraph builder used to write help content
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpViewModel.Search">
            <summary>
            Highlights all matches to this.findText
            Called when findText changes or whenever the search has to be refreshed
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpViewModel.ZoomIn">
            <summary>
            Increases Zoom if not above maximum
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpViewModel.ZoomOut">
            <summary>
            Decreases Zoom if not below minimum
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpViewModel.HelpBuilder_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called to update the matches label
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpViewModel.SetMatchesLabel">
            <summary>
            Sets the current matches label
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.HelpViewModel.OnNotifyPropertyChanged(System.String)">
            <summary>
            Called internally to notify when a proiperty changed
            </summary>
            <param name="propertyName">property name</param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ParagraphBuilder">
            <summary>
            Builds a paragraph based on Text + Bold + Highlight information.
            Bold are the segments of thexct that should be bold, and Highlight are 
            the segments of thext that should be highlighted (like search results).
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ParagraphBuilder.boldSpans">
            <summary>
            The text spans that should be bold
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ParagraphBuilder.highlighedSpans">
            <summary>
            The text spans that should be highlighted
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ParagraphBuilder.textBuilder">
            <summary>
            The text displayed
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ParagraphBuilder.paragraph">
            <summary>
            Paragraph built in BuildParagraph
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.#ctor(System.Windows.Documents.Paragraph)">
            <summary>
            Initializes a new instance of the ParagraphBuilder class
            </summary>
            <param name="paragraph">paragraph we will be adding lines to in BuildParagraph</param>
        </member>
        <member name="E:Microsoft.Management.UI.Internal.ParagraphBuilder.PropertyChanged">
            <summary>
            Used to notify of property changes
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ParagraphBuilder.HighlightCount">
            <summary>
            Gets the number of highlights. 
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ParagraphBuilder.Paragraph">
            <summary>
            Gets the paragraph built in BuildParagraph
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.BuildParagraph">
            <summary>
            Called after all the AddText calls have been made to build the paragraph
            based on the current text.
            This method goes over 3 collections simultaneouslly:
               1) characters in this.textBuilder
               2) spans in this.boldSpans
               3) spans in this.highlightedSpans
            And adds the minimal number of Inlines to the paragraph so that all 
            characters that should be bold and/or highlighed are.
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.HighlightAllInstancesOf(System.String,System.Boolean,System.Boolean)">
            <summary>
            Highlights all ocurrences of <paramref name="search"/>.
            This is called after all calls to AddText have been made
            </summary>
            <param name="search">search string</param>
            <param name="caseSensitive">true if search should be case sensitive</param>
            <param name="wholeWord">true if we should search whole word only</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.AddText(System.String,System.Boolean)">
            <summary>
            Adds text to the paragraph later build with BuildParagraph
            </summary>
            <param name="str">text to be added</param>
            <param name="bold">true if the text should be bold</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.ResetAllText">
            <summary>
            Called before a derived class starts adding text
            to reset the current content
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.AddInline(System.Windows.Documents.Paragraph,System.Boolean,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Adds an inline to <paramref name="currentParagraph"/> based on the remaining parameters.
            </summary>
            <param name="currentParagraph">paragraph to add Inline to</param>
            <param name="currentBold">true if text should be added in bold</param>
            <param name="currentHighlighted">true if the text should be added with highlight</param>
            <param name="sequence">the text to add and clear</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.MoveSpanToPosition(System.Int32@,System.Nullable{Microsoft.Management.UI.Internal.ParagraphBuilder.TextSpan}@,System.Int32,System.Collections.Generic.List{Microsoft.Management.UI.Internal.ParagraphBuilder.TextSpan})">
            <summary>
            This is an auxiliar method in BuildParagraph to move the current bold or highlighed spans
            according to the <paramref name="caracterPosition"/>
            The current bold and higlighed span should be ending ahead of the current position.
            Moves <paramref name="currentSpanIndex"/> and <paramref name="currentSpan"/> to the 
            propper span in <paramref name="allSpans"/> according to the <paramref name="caracterPosition"/>
            This is an auxiliar method in BuildParagraph. 
            </summary>
            <param name="currentSpanIndex">current index within <paramref name="allSpans"/></param>
            <param name="currentSpan">current span within <paramref name="allSpans"/></param>
            <param name="caracterPosition">caracter position. This comes from a position within this.textBuilder</param>
            <param name="allSpans">the collection of spans. This is either this.boldSpans or this.highlightedSpans</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.AddHighlight(System.Int32,System.Int32)">
            <summary>
            Adds one individual text highlight
            This is called after all calls to AddText have been made
            </summary>
            <param name="start">highlight start</param>
            <param name="length">highlight length</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.OnNotifyPropertyChanged(System.String)">
            <summary>
            Called internally to notify when a proiperty changed
            </summary>
            <param name="propertyName">property name</param>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ParagraphBuilder.TextSpan">
            <summary>
            A text span used to mark bold and highlighed segments 
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ParagraphBuilder.TextSpan.start">
            <summary>
            Index of the first character in the span
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ParagraphBuilder.TextSpan.end">
            <summary>
            Index of the last character in the span
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.TextSpan.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TextSpan struct
            </summary>
            <param name="start">Index of the first character in the span</param>
            <param name="length">Index of the last character in the span</param>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ParagraphBuilder.TextSpan.Start">
            <summary>
            Gets the index of the first character in the span
            </summary>
        </member>
        <member name="P:Microsoft.Management.UI.Internal.ParagraphBuilder.TextSpan.End">
            <summary>
            Gets the index of the first character in the span
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphBuilder.TextSpan.Contains(System.Int32)">
            <summary>
            Returns true if the <paramref name="position"/> is between start and end (inclusive)
            </summary>
            <param name="position">position to verify if is in the span</param>
            <returns>true if the <paramref name="position"/> is between start and end (inclusive)</returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.ParagraphSearcher">
            <summary>
            Moves through search highlights built in a ParagraphBuilder 
            changing the color of the current highlight
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ParagraphSearcher.HighlightBrush">
            <summary>
            Highlight for all matches except the current
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ParagraphSearcher.CurrentHighlightBrush">
            <summary>
            Highlight for the current match
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.ParagraphSearcher.currentHighlightedMatch">
            <summary>
            Current match being highlighted in search
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphSearcher.#ctor">
            <summary>
            Initializes a new instance of the ParagraphSearcher class
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphSearcher.MoveAndHighlightNextNextMatch(System.Boolean,System.Windows.Documents.TextPointer)">
            <summary>
            Move to the next highlight starting at the <paramref name="caretPosition"/>
            </summary>
            <param name="forward">true for next false for previous</param>
            <param name="caretPosition">caret position</param>
            <returns>the next highlight starting at the <paramref name="caretPosition"/></returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphSearcher.ResetSearch">
            <summary>
            Resets the search for fresh calls to MoveAndHighlightNextNextMatch
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphSearcher.Ishighlighted(System.Windows.Documents.Run)">
            <summary>
            Returns true if <paramref name="run"/> is highlighted
            </summary>
            <param name="run">run to check if is highlighted</param>
            <returns>true if <paramref name="run"/> is highlighted</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphSearcher.GetNextRun(System.Windows.Documents.Run,System.Boolean)">
            <summary>
            Get the next or previous run according to <paramref name="forward"/>
            </summary>
            <param name="currentRun">the current run</param>
            <param name="forward">true for next false for previous</param>
            <returns>the next or previous run according to <paramref name="forward"/></returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphSearcher.GetRun(System.Windows.Documents.Inline)">
            <summary>
            Gets the run of an inline. Inlines in a ParagrahBuilder are either a Run or a Bold
            which contains a Run
            </summary>
            <param name="inline">inline to get the run from</param>
            <returns>the run of the inline</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphSearcher.GetNextMatch(System.Windows.Documents.Run,System.Boolean)">
            <summary>
            Gets the next highlighted run starting and including <paramref name="currentRun"/>
            according to the direction specified in <paramref name="forward"/>
            </summary>
            <param name="currentRun">the current run</param>
            <param name="forward">true for next false for previous</param>
            <returns>
            the next highlighted run starting and including <paramref name="currentRun"/>
            according to the direction specified in <paramref name="forward"/>
            </returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphSearcher.GetParagraph(System.Windows.Documents.Run)">
            <summary>
            Gets the run's paragraph
            </summary>
            <param name="run">run to get the paragraph from</param>
            <returns>the run's paragraph</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphSearcher.IsFirstRun(System.Windows.Documents.Run)">
            <summary>
            Returns true if the run is the fiorst run of the paragraph
            </summary>
            <param name="run">run to check</param>
            <returns>true if the run is the fiorst run of the paragraph</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.ParagraphSearcher.GetFirstOrLastRun(System.Windows.Documents.Run,System.Boolean)">
            <summary>
            Gets the first or lasr run in the paragraph containing <paramref name="caretRun"/>
            </summary>
            <param name="caretRun">run containing the caret</param>
            <param name="forward">true for first false for last</param>
            <returns>the first or last run in the paragraph containing <paramref name="caretRun"/></returns>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.OutGridViewWindow">
            <summary>
            OutGridViewWindow definition for PowerShell command out-gridview.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.ZOOM_INCREMENT">
            <summary>
            Zoom Increments
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.ZOOM_MAX">
            <summary>
            Max ZoomLevel
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.ZOOM_MIN">
            <summary>
            Min ZoomLevel
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.gridViewWindow">
            <summary>
            Window for gridView.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.managementList">
            <summary>
            Local ManagementList.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.listItems">
            <summary>
            A collection of PSObjects to be data bound to the local Management List.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.gridViewWindowLoaded">
            <summary>
            Event used for the thread gridViewWindows signaling main thread after Windows loaded
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.exception">
            <summary> Is used to store any Management list calls exceptions. </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.closedEvent">
            <summary>
            Is used to block thread of the pipeline.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.OKButtonContent">
            <summary>
            OK Button's content.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.CancelButtonContent">
            <summary>
            Cancel Button's content.
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.selectedItems">
            <summary>
            Used to store selected items in the ok processing
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.guiThread">
            <summary>
            The GUI thread of Out-GridView
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.Internal.OutGridViewWindow.zoomLevel">
            <summary>
            private constants for ZoomLevel
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.#ctor">
            <summary>
            Constructor for OutGridView.
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.Internal.OutGridViewWindow.ThreadDelegate">
            <summary>
            ThreadDelegate definition.
            </summary>
            <param name="arg">Start GridView Window delegate.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.StartWindow(System.String,System.String,System.Threading.AutoResetEvent)">
            <summary>
            Start a new thread as STA for gridView Window.
            </summary>
            <param name="invocation">commands of the PowerShell.</param>
            <param name="outputModeOptions">selection mode of the list</param>
            <param name="closedEvent">closedEvent</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.ZoomEventHandlerPlus(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Implements ZoomIn
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.ZoomEventHandlerMinus(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Implements ZoomOut
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.CreateManagementList(System.String)">
            <summary>
            Creates a new ManagementList.
            </summary>
            <param name="outputMode">Output mode of the out-gridview</param>
            <returns>A new ManagementList</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.CreateMainGrid(System.String)">
            <summary>
            Creates a new main grid for window.
            </summary>
            <param name="outputMode">Output mode of the out-gridview</param>
            <returns>A new mainGrid</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.CreateButtonGrid">
            <summary>
            Creates a OK button.
            </summary>
            <returns>A new buttonGrid</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.CreateOKButton">
            <summary>
            Creates a OK button.
            </summary>
            <returns>A new OK button</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.CreateCancelButton">
            <summary>
            Creates a Cancel button.
            </summary>
            <returns>A new Cancel button</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.OK_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Store the selected items for use in EndProcessing
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.Cancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Closes the window
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.SelectedItems">
            <summary>
            Gets selected items from List.
            </summary>
            <returns>Selected items of the list</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.CloseWindow">
            <summary>
            Closes the window
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.AddColumns(System.String[],System.String[],System.Type[])">
            <summary>
            Add column defenitions to the underlying management list.
            </summary>
            <param name="propertyNames">An array of property names to add.</param>
            <param name="displayNames">An array of display names to add.</param>
            <param name="types">An array of types to add.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.AddItem(System.Management.Automation.PSObject)">
            <summary>
            Add an item to ObservableCollection.
            </summary>
            <param name="value">PSObject of comlet data.</param>  
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.GetWindowClosedStatus">
            <summary>
            Returns the state of GridView Window.
            </summary>
            <returns>The status of GridView Window close or not.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.GetLastException">
            <summary>
            Returns any exception that has been thrown by previous method calls.
            </summary>
            <returns>The thrown and caught exception. It returns null if no exceptions were thrown by any previous method calls.</returns>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.GridViewWindowClosed(System.Object,System.EventArgs)">
            <summary>
            GridView Window is closing callback process.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">Event Args.</param>
        </member>
        <member name="M:Microsoft.Management.UI.Internal.OutGridViewWindow.GridViewWindowLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Set loaded as true when this method invoked.
            </summary>
            <param name="sender">The sender object.</param>
            <param name="e">RoutedEvent Args.</param>
        </member>
        <member name="T:Microsoft.Management.UI.HelpWindow">
            <summary>
            A window displaying help content and allowing search
            </summary>
            <summary>
            HelpWindow
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.HelpWindow.MinimumZoom">
            <summary>
            Minimum zoom in the slider
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.HelpWindow.MaximumZoom">
            <summary>
            Maximum zoom in the slider
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.HelpWindow.ZoomInterval">
            <summary>
            Zoom interval
            </summary>
        </member>
        <member name="F:Microsoft.Management.UI.HelpWindow.viewModel">
            <summary>
            The ViewModel for the dialog
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.#ctor(System.Management.Automation.PSObject)">
            <summary>
            Initializes a new instance of the HelpWindow class
            </summary>
            <param name="helpObject">the object with help information</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handles the mouse wheel to zoom in/out
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles key down to fix the Page/Douwn going to end of help issue
            And to implement some additional shortcuts like Ctrl+F and ZoomIn/ZoomOut
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.ReadZoomUserSetting">
            <summary>
            Reads the zoom part of the user settings
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.HandleZoomInAndZoomOut(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles Zoom in and Zoom out keys
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.ViewModel_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Listens to changes in the zoom in order to update the user settings
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.HelpDialog_Closed(System.Object,System.EventArgs)">
            <summary>
            Saves the user settings
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.HelpDialog_StateChanged(System.Object,System.EventArgs)">
            <summary>
            Updates the user setting with window state
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.HelpDialog_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Sets the positions from user settings and start monitoring position changes
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.HelpDialog_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Saves size changes in user settings
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.HelpDialog_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            Saves position changes in user settings
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.Settings_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the settings button is clicked
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.PreviousMatch_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Previous button is clicked
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.NextMatch_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Next button is clicked
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.MoveToNextMatch(System.Boolean)">
            <summary>
            Moves to the previous or next match
            </summary>
            <param name="forward">true for forward false for backwards</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.MoveToRun(System.Windows.Documents.Run)">
            <summary>
            Moves to the caret and brings the view to the <paramref name="run"/>
            </summary>
            <param name="run">run to move to</param>
        </member>
        <member name="M:Microsoft.Management.UI.HelpWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.SettingsDialog">
            <summary>
            Dialog with settings for the help dialog
            </summary>
            <summary>
            SettingsDialog
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.SettingsDialog.#ctor">
            <summary>
            Initializes a new instance of the SettingsDialog class
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.SettingsDialog.OK_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the OK button has been clicked
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Management.UI.SettingsDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Management.UI.CommonHelper">
            <summary>
            Utilities in common in this assembly
            </summary>
        </member>
        <member name="M:Microsoft.Management.UI.CommonHelper.SetStartingPositionAndSize(System.Windows.Window,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Restore the values from the settings to the actual window position, size and state.
            </summary>
            <param name="target">the window we are setting position and size of</param>
            <param name="userSettingTop">the value for top from the user settings</param>
            <param name="userSettingLeft">the value for left from the user settings</param>
            <param name="userSettingWidth">the value for width from the user settings</param>
            <param name="userSettingHeight">the value for height from the user settings</param>
            <param name="defaultWidth">the with used if <paramref name="userSettingWidth"/> is not valid</param>
            <param name="defaultHeight">the height used if <paramref name="userSettingHeight"/> is not valid</param>
            <param name="userSettingMaximized">true if the window is maximized in the user setting</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesControl">
            <summary>
            Interaction logic for AllModulesControl.xaml
            </summary>
            <summary>
            AllModulesControl
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesControl.#ctor">
            <summary>
            Initializes a new instance of the AllModulesControl class
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesControl.CurrentShowModuleControl">
            <summary>
            Gets current control of the ShowModuleControl
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl">
            <summary>
            Interaction logic for CmdletControl.xaml
            </summary>
            <summary>
            CmdletControl
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl.currentCommandViewModel">
            <summary>
            Field used for the CurrentCommandViewModel parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl.#ctor">
            <summary>
            Initializes a new instance of the CmdletControl class
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl.CurrentCommandViewModel">
            <summary>
            Gets the owner of the ViewModel.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl.ParameterSetTabControl_DataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DataContextChanged event.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl.CmdletControl_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Key down event for user press F1 button.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl.HelpButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Help button event.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl.ImportModuleButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Import Module Button event
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CmdletControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButton">
            <summary>
            Button with images to represent enabled and disabled states
            </summary>
            <summary>
            ImageButton
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButton.#ctor">
            <summary>
            Initializes a new instance of the ImageButton class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButton.ImageButton_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Copies the automation id and name from the parent control to the inner button
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButton.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonBase">
            <summary>
            Implements the ImageButtonBase base class to the ImageButton and ImageToggleButton.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonBase.CommandProperty">
            <summary>
            Command associated with this button
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonBase.EnabledImageSourceProperty">
            <summary>
            Image to be used for the enabled state
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonBase.DisabledImageSourceProperty">
            <summary>
            Image to be used for the disabled state
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonBase.EnabledImageSource">
            <summary>
            Gets or sets the image to be used for the enabled state
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonBase.DisabledImageSource">
            <summary>
            Gets or sets the image to be used for the disabled state
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonBase.Command">
            <summary>
            Gets or sets the command associated with this button
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonToolTipConverter">
            <summary>
            Converts a an ImageButtonBase to its corresponding ToolTip
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonToolTipConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a an ImageButtonBase to its corresponding ToolTip by checking if it has a tooltip property
            or a command with tooltip text
            </summary>
            <param name="value">The ImageButtonBase we are trying to Convert.</param>
            <param name="targetType"><paramref name="targetType"/> is not used.</param>
            <param name="parameter"><paramref name="parameter"/> is not used.</param>
            <param name="culture"><paramref name="culture"/> is not used.</param>
            <returns>The resulting object obtained from retrieving the property value in <paramref name="parameter"/> (or property values if <paramref name="parameter"/> contains dots) out of <paramref name="value"/>. </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageButtonToolTipConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not supported.
            </summary>
            <param name="value"><paramref name="value"/> is not used.</param>
            <param name="targetType"><paramref name="targetType"/> is not used.</param>
            <param name="parameter"><paramref name="parameter"/> is not used.</param>
            <param name="culture"><paramref name="culture"/> is not used.</param>
            <returns>No value is returned.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageToggleButton">
            <summary>
            Toggle button with images to represent enabled and disabled states
            </summary>
            <summary>
            ImageToggleButton
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageToggleButton.IsCheckedProperty">
            <summary>
            Value indicating the button is checked
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageToggleButton.#ctor">
            <summary>
            Initializes a new instance of the ImageToggleButton class.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageToggleButton.IsChecked">
            <summary>
            Gets or sets a value indicating whether the button is checked
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageToggleButton.ImageButton_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Copies the automation id and name from the parent control to the inner button
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ImageToggleButton.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.NotImportedCmdletControl">
            <summary>
            Interaction logic for NotImportedCmdletControl.xaml
            </summary>
            <summary>
            NotImportedCmdletControl
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.NotImportedCmdletControl.#ctor">
            <summary>
            Initializes a new instance of the NotImportedCmdletControl class
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.NotImportedCmdletControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionControl">
            <summary>
            Interaction logic for MultipleSelectionControl.xaml
            </summary>
            <summary>
            MultipleSelectionControl
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionControl.#ctor">
            <summary>
            Initializes a new instance of the MultipleSelectionControl class
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionControl.ButtonBrowse_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Show more items in new dialog
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl">
            <summary>
            Interaction logic for ParameterSetControl.xaml
            </summary>
            <summary>
            ParameterSetControl
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.firstFocusableElement">
            <summary>
            First focusable element in the generated UI.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.currentParameterSetViewModel">
            <summary>
            Field used for the CurrentParameterSetViewModel parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.#ctor">
            <summary>
            Initializes a new instance of the ParameterSetControl class
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.FocusFirstElement">
            <summary>
            Focuses the first focusable element in this control.
            </summary>    
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.CurrentParameterSetViewModel">
            <summary>
            Gets current ParameterSetViewModel.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.CreateCheckBox(Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel,System.Int32)">
            <summary>
            Creates a CheckBox for switch parameters
            </summary>
            <param name="parameterViewModel">DataContext object</param>
            <param name="rowNumber">Row number</param>
            <returns>a CheckBox for switch parameters</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.CreateComboBoxControl(Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel,System.Int32,System.Collections.IEnumerable)">
            <summary>
            Creates a ComboBox control for input type field
            </summary>
            <param name="parameterViewModel">DataContext object</param>
            <param name="rowNumber">Row number</param>
            <param name="itemsSource">Control data source</param>
            <returns>Return a ComboBox control</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.CreateMultiSelectComboControl(Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel,System.Int32,System.Collections.IEnumerable)">
            <summary>
            Creates a MultiSelectCombo control for input type field
            </summary>
            <param name="parameterViewModel">DataContext object</param>
            <param name="rowNumber">Row number</param>
            <param name="itemsSource">Control data source</param>
            <returns>Return a MultiSelectCombo control</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.CreateTextBoxControl(Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel,System.Int32)">
            <summary>
            Creates a TextBox control for input type field
            </summary>
            <param name="parameterViewModel">DataContext object</param>
            <param name="rowNumber">Row number</param>
            <returns>Return a TextBox control</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.MultiLineTextBox_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called for a newly created multiline text box to increase its height and 
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.ParameterSetControl_DataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            When user switch ParameterSet.It will trigger this event.
            This event method will renew generate all controls for current ParameterSet.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.CheckBox_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            When user trigger click on anyone CheckBox. Get value from sender.
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.CreateNewRow">
            <summary>
            Creates a RowDefinition for MainGrid
            </summary>
            <returns>Return a RowDefinition object</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.AddControlToMainGrid(System.Windows.UIElement)">
            <summary>
            Adds a control to MainGrid;
            </summary>
            <param name="uiControl">Will adding UIControl</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.CreateAndAddLabel(Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel,System.Int32)">
            <summary>
            Creates a Lable control and add it to MainGrid
            </summary>
            <param name="parameterViewModel">DataContext object</param>
            <param name="rowNumber">Row number</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.CreateLabel(Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel,System.Int32)">
            <summary>
            Creates a Label control for input type field
            </summary>
            <param name="parameterViewModel">DataContext object</param>
            <param name="rowNumber">Row number</param>
            <returns>Return a Label control</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper">
            <summary>
            Implements thw WPF window part of the show-command cmdlet
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.methodThatReturnsDialog">
            <summary>
            Method that will return the dialog from ShowAllModulesWindow or ShowCommandWindow.
            This is necessary because the PlainInvokeAndShowDialog thread starter cannot receive parameters
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.windowClosed">
            <summary>
            Event set when the window is closed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.helpNeeded">
            <summary>
            Event set when help is needed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.importModuleNeeded">
            <summary>
            Event set when it is necessary to import a module
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.windowLoaded">
            <summary>
            Event set when the window is loaded
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.commandNeedingHelp">
            <summary>
            String with the command that needs help set when helpNeeded is set
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.commandNeedingImportModule">
            <summary>
            String with the command name that needs to import a module
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.parentModuleNeedingImportModule">
            <summary>
            String with the module name that needs to be imported
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.selectedModuleNeedingImportModule">
            <summary>
            String with the selected module at the time a module needs to be imported
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.window">
            <summary>
            Keeps the window for the implementation of CloseWindow
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.hostWindow">
            <summary>
            host window, if any
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.allModulesViewModel">
            <summary>
            ViewModel when showing all modules
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.commandViewModel">
            <summary>
            ViewModel when showing a single command
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.dialogCanceled">
            <summary>
            true when the window is closed with cancel
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.#ctor">
            <summary>
            Prevents a default instance of the ShowCommandHelper class from being created 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.Finalize">
            <summary>
            Finalizes an instance of the ShowCommandHelper class
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ScreenWidth">
            <summary>
            Gets the Screen Width
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ScreenHeight">
            <summary>
            Gets the Screen Height
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.WindowClosed">
            <summary>
            Gets the event set when the show-command window is closed
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.HelpNeeded">
            <summary>
            Gets the event set when help is needed for a command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ImportModuleNeeded">
            <summary>
            Gets the event set when it is necessary to import a module
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.WindowLoaded">
            <summary>
            Gets the event set when the window is loaded
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.CommandNeedingHelp">
            <summary>
            Gets the command needing help when HelpNeeded is set
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ParentModuleNeedingImportModule">
            <summary>
            Gets the module we want to import
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.HasHostWindow">
            <summary>
            Gets a value indicating whether there is a host window
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.Dispose">
            <summary>
            Dispose method in IDisposeable
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.SetClipboardText(System.String)">
            <summary>
            Sets the text in the clipboard
            </summary>
            <param name="text">text to set the clipboard to</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetShowAllModulesCommand(System.Boolean,System.Boolean)">
            <summary>
            Gets the command to be run to get commands and imported modules
            </summary>
            <param name="isRemoteRunspace">Boolean flag determining whether Show-Command is queried in the local or remote runspace scenario </param>
            <param name="isFirstChance">Boolean flag to indicate that it is the second attempt to query Show-Command data </param>
            <returns>the command to be run to get commands and imported modules</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetSerializedCommandScript">
            <summary>
            Retrieves the script for Get-SerializedCommand from local machine
            </summary>
            <returns>String representation of the script for Get-SerializedCommand</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetImportModuleCommand(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the command to be run to in order to import a module and refresh the command data
            </summary>
            <param name="module">module we want to import</param>
            <param name="isRemoteRunspace">Boolean flag determining whether Show-Command is queried in the local or remote runspace scenario </param>
            <param name="isFirstChance">Boolean flag to indicate that it is the second attempt to query Show-Command data </param>
            <returns>the command to be run to in order to import a module and refresh the command data</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetHelpCommand(System.String)">
            <summary>
            gets the command to be run in order to show help for a command
            </summary>
            <param name="command">command we want to get help from</param>
            <returns>the command to be run in order to show help for a command</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetImportedModulesDictionary(System.Object[])">
            <summary>
            Constructs a dictionary of imported modules based on the module names
            </summary>
            <param name="moduleObjects">the imported modules</param>
            <returns>a dictionary of imported modules based on the module names</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetCommandList(System.Object[])">
            <summary>
            Constructs a list of commands out of <paramref name="commandObjects"/>
            </summary>
            <param name="commandObjects">the results of a get-command command</param>
            <returns>a list of commands out of <paramref name="commandObjects"/></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ObjectArrayFromObjectCollection(System.Object)">
            <summary>
            Constructs an array of objects out of <paramref name="commandObjects"/>
            </summary>
            <param name="commandObjects">The result of a get-command command</param>
            <returns>An array of objects out of <paramref name="commandObjects"/></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetNewAllModulesViewModel(Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel,System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo},System.Collections.Generic.IEnumerable{Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo},System.String,System.String,System.String)">
            <summary>
            Called after a module in <paramref name="oldViewModel"/> is imported to refresh the view model.
            Gets a new AllModulesViewModel populated with <paramref name="importedModules"/> and <paramref name="commands"/>.
            The <paramref name="oldViewModel"/> is used to cleanup event listening in the old view model and to copy NoCommonParameters.
            The new ViewModel will have the command selected according to <paramref name="selectedModuleNeedingImportModule"/>, 
            <paramref name="parentModuleNeedingImportModule"/> and <paramref name="commandNeedingImportModule"/>.
            </summary>
            <param name="oldViewModel">the viewModel before the module was imported</param>
            <param name="importedModules">the list of imported modules</param>
            <param name="commands">the list of commands</param>
            <param name="selectedModuleNeedingImportModule">the name of the module that was selected in <paramref name="oldViewModel"/></param>
            <param name="parentModuleNeedingImportModule">the name of the module that was imported</param>
            <param name="commandNeedingImportModule">the name of the command that was selected in <paramref name="oldViewModel"/></param>
            <returns>The new ViewModel based on <paramref name="importedModules"/> and <paramref name="commands"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetImportModuleFailedMessage(System.String,System.String,System.String)">
            <summary>
            Gets an error message to be displayed when failed to import a module
            </summary>
            <param name="command">command belongiong to the module to import</param>
            <param name="module">module to import</param>
            <param name="error">error importing the module</param>
            <returns>an error message to be displayed when failed to import a module</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.SingleQuote(System.String)">
            <summary>
            Single quotes <paramref name="str"/>
            </summary>
            <param name="str">string to quote</param>
            <returns><paramref name="str"/> single quoted</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetHostWindow(System.Management.Automation.PSCmdlet)">
            <summary>
            Gets the host window, if it is present or null if it is not
            </summary>
            <param name="cmdlet">cmdlet calling this method</param>
            <returns>the host window, if it is present or null if it is not</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetPropertyValue(System.Type,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            Gets a property value using reflection
            </summary>
            <param name="type">type containing the property</param>
            <param name="obj">object containing the property (null for a static property)</param>
            <param name="propertyName">name of property to get</param>
            <param name="bindingFlags">flags passed to reflection</param>
            <returns>
            property value or null if it was not able to retrieve it. This method is not suitable to return a property value that might be null.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.SetPropertyValue(System.Type,System.Object,System.String,System.Object,System.Reflection.BindingFlags)">
            <summary>
            Sets a property value using reflection
            </summary>
            <param name="type">type containing the property</param>
            <param name="obj">object containing the property (null for a static property)</param>
            <param name="propertyName">name of property to set</param>
            <param name="value">value to set the property with</param>
            <param name="bindingFlags">flags passed to reflection</param>
            <returns>true if it was able to set</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetGetModuleSuffix">
            <summary>
            Gets the suffix that adds imported modules to a command
            </summary>
            <returns>the suffix that adds imported modules to a command</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetShowCommandCommand(System.String,System.Boolean)">
            <summary>
            Gets the command to be run when calling show-command for a particular command
            </summary>
            <param name="commandName">the particular command we are running show-command on</param>
            <param name="includeAliasAndModules">true if we want to include aliases and retrieve modules</param>
            <returns>the command to be run when calling show-command for a particular command</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetCommandViewModel(Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo,System.Boolean,System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo},System.Boolean)">
            <summary>
            Gets a CommandViewModel of a CommandInfo
            </summary>
            <param name="command">command we want to get a CommandViewModel of</param>
            <param name="noCommonParameter">true if we do not want common parameters</param>
            <param name="importedModules">the loaded modules</param>
            <param name="moduleQualify">True to qualify command with module name in GetScript</param>
            <returns>a CommandViewModel of a CommandInfo</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ActivateWindow(System.Windows.Window)">
            <summary>
            Dispatches a message to the window for it to activate
            </summary>
            <param name="window">window to be activated</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.SetPendingISECommand(System.String)">
            <summary>
            Sets a property in ISE that will allow the command to be run
            </summary>
            <param name="command">command to be run</param>
            <returns>true if it was possible to set  the pending ISE command</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ShowAllModulesWindow(System.Management.Automation.PSCmdlet,System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo},System.Collections.Generic.IEnumerable{Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo},System.Boolean,System.Double,System.Double,System.Boolean)">
            <summary>
            Shows the window listing cmdlets
            </summary>
            <param name="cmdlet">cmdlet calling this method</param>
            <param name="importedModules">All loaded modules</param>
            <param name="commands">commands to be listed</param>
            <param name="noCommonParameter">true if we should not show common parameters</param>
            <param name="windowWidth">window width</param>
            <param name="windowHeight">window height</param>
            <param name="passThrough">true if the GUI should mention ok instead of run</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.CallShowDialog(System.Management.Automation.PSCmdlet)">
            <summary>
            Calls ShowsDialog on methodThatReturnsDialog either in a separate thread or dispatched 
            to the hostWindow thread if there is a hostWindow
            </summary>
            <param name="cmdlet">cmdlet used to retrieve the host window</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.PlainInvokeAndShowDialog">
            <summary>
            Called from CallMethodThatShowsDialog as the thtead start when there is no host window
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ShowCommandWindow(System.Management.Automation.PSCmdlet,System.Object,System.Double,System.Double,System.Boolean)">
            <summary>
            Shows the window for the cmdlet
            </summary>
            <param name="cmdlet">cmdlet calling this method</param>
            <param name="commandViewModelObj">command to show in the window</param>
            <param name="windowWidth">window width</param>
            <param name="windowHeight">window height</param>
            <param name="passThrough">true if the GUI should mention ok instead of run</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ImportModuleDone(System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo},System.Collections.Generic.IEnumerable{Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo})">
            <summary>
            Called when the module importation is done
            </summary>
            <param name="importedModules">all modules currently imported</param>
            <param name="commands">commands to be displayed</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ImportModuleFailed(System.Exception)">
            <summary>
            Called when the module importation has failed
            </summary>
            <param name="reason">reason why the module importation failed</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.DisplayHelp(System.Collections.ObjectModel.Collection{System.Management.Automation.PSObject})">
            <summary>
            Called when the results or get-help are ready in order to display the help window for a command
            </summary>
            <param name="getHelpResults">results of a get-help call</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ActivateWindow">
            <summary>
            Activates this.window
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.GetScript">
            <summary>
            returns the script to execute if dialog has not been canceled
            </summary>
            <returns>the script to execute if dialog has not been canceled</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.SetupWindow(System.Windows.Window)">
            <summary>
            Sets up window settings common between the two flavors of show-command
            </summary>
            <param name="commandWindow">the window being displayed</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.CommandNeedsImportModule(System.Object,Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs)">
            <summary>
            Handles the SelectedCommandInSelectedModuleNeedsImportModule event
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.CommandNeedsHelp(System.Object,Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs)">
            <summary>
            Handles the SelectedCommandInSelectedModuleNeedsHelp event
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.Window_Closed(System.Object,System.EventArgs)">
            <summary>
            Called when the window is closed to set this.dialogCanceled
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.Window_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the window is loaded to set this.Window_Loaded
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.SetupButtonEvents(System.Windows.Controls.Button,System.Windows.Controls.Button,System.Windows.Controls.Button,System.Boolean)">
            <summary>
            Sets up event listening on the buttons
            </summary>
            <param name="run">button to run command</param>
            <param name="copy">button to copy command code</param>
            <param name="cancel">button to close window</param>
            <param name="passThrough">true to change the text of Run to OK</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.SetupViewModel">
            <summary>
            Sets up event listening for a new viewModel
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.Buttons_CopyClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Copies the script into the clipboard
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.Buttons_RunClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Sets a succesfull dialog result and then closes the window
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.Buttons_CancelClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Closes the window
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.CloseWindow">
            <summary>
            closes the window
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.ShowErrorString(System.String)">
            <summary>
            Showing a MessageBox when user type a invalidate command name.
            </summary>
            <param name="errorString">error message</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.InternalGetScript">
            <summary>
            returns the script to execute
            </summary>
            <returns>the script to execute</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandHelper.Dispose(System.Boolean)">
            <summary>
            Implements IDisposable logic
            </summary>
            <param name="isDisposing">true if being called from Dispose</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowModuleControl">
            <summary>
            Control taht shows cmdlets in a module and details for a selected cmdlet
            </summary>
            <summary>
            ShowModuleControl
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowModuleControl.owner">
            <summary>
            Field used for the Owner parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowModuleControl.#ctor">
            <summary>
            Initializes a new instance of the ShowModuleControl class
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowModuleControl.Owner">
            <summary>
            Gets or sets the owner of the container.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowModuleControl.CommandList_PreviewMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            WPF has an interesting feature in list selection where if you hold the mouse button down, 
            it will select the item under it, but if you keep the mouse button down and move the mouse 
            (if the list supported drag and drop, the mouse action would be the same as dragging) it 
            will select other list items. 
            If the first selection change causes  details for the item to be displayed and resizes the list
            the selection can skip to another list item it happend to be over as the list got resized.
            In summary, resizing the list on selection can cause a selection bug. If the user selects an 
            item in the end of the list the next item downwards can be selected.
            The WPF drag-and-select feature is not a standard win32 list behavior, and we can do without it
            since it causes this problem.
            WPF sets up this behavior by using a mouse capture. We undo the behavior in the handler below
            which removes the behavior.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowModuleControl.CommandList_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Ensures the selected item is scrolled into view and that the list is focused.
            An item could be out of the view if the selection was changed in the object model
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowModuleControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel">
            <summary>
            Contains all Commands, Parameters, ParameterSet and Common Parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.waitMessageDisplayed">
            <summary>
            Flag indicating a wait message is being displayed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.noCommonParameter">
            <summary>
            True if this ViewModel is not supposed to show common parameters
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.commandNameFilter">
            <summary>
            the filterName of command
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.modules">
            <summary>
            Field used for the Modules property.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.canRun">
            <summary>
            true if a command can be run
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.canCopy">
            <summary>
            true if a command can be copied
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.selectedModule">
            <summary>
            the selected module being displayed in the GUI
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.refreshVisibility">
            <summary>
            the visibility of the refresh button
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.extraViewModel">
            <summary>
            Provides an extra viewModel object that allows callers to control certain aspects of the GUI
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.zoomLevel">
            <summary>
            private property for ZoomLevel
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.#ctor(System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo},System.Collections.Generic.IEnumerable{Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo})">
            <summary>
            Initializes a new instance of the AllModulesViewModel class
            </summary>
            <param name="importedModules">the loaded modules</param>
            <param name="commands">commands to show</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.#ctor(System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo},System.Collections.Generic.IEnumerable{Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo},System.Boolean)">
            <summary>
            Initializes a new instance of the AllModulesViewModel class
            </summary>
            <param name="importedModules">the loaded modules</param>
            <param name="commands">All PowerShell commands</param>
            <param name="noCommonParameter">true not to show common parameters</param>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.PropertyChanged">
            <summary>
            PropertyChanged Event
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.SelectedCommandInSelectedModuleNeedsHelp">
            <summary>
            Indicates the selected command in the selected module needs to display the help for a command
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.SelectedCommandInSelectedModuleNeedsImportModule">
            <summary>
            Indicates the selected command in the selected module needs to import a module for a command
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.RunSelectedCommandInSelectedModule">
            <summary>
            Indicates the selected command in the selected module should be run
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.Refresh">
            <summary>
            Indicates we want to refresh the viewModel
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.ZoomLevel">
            <summary>
            Get or Sets Zoom level
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.RefreshTooltip">
            <summary>
            Gets the tooltip for the refresh button
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.RefreshVisibility">
            <summary>
            Gets or sets the visibility of the refresh button
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.NoCommonParameter">
            <summary>
            Gets a value indicating whether common parameters are displayed
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.CommandNameFilter">
            <summary>
            Gets or sets the filterName of command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.SelectedModule">
            <summary>
            Gets or sets the selected module being displayed in the GUI
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.CanRun">
            <summary>
            Gets a value indicating whether we can run a command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.CanCopy">
            <summary>
            Gets a value indicating whether we can copy a command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.Modules">
            <summary>
            Gets the Modules parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.WaitMessageVisibility">
            <summary>
            Gets the visibility of the wait message
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.MainGridVisibility">
            <summary>
            Gets the visibility of the main grid
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.MainGridDisplayed">
            <summary>
            Gets a value indicating whether the main grid is displayed
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.WaitMessageDisplayed">
            <summary>
            Gets or sets a value indicating whether the wait message is displayed
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.ExtraViewModel">
            <summary>
            Gets or sets an extra viewModel object that allows callers to control certain aspects of the GUI
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.GetScript">
            <summary>
            Returns the selected script
            </summary>
            <returns>the selected script</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.OnRefresh">
            <summary>
            Triggers Refresh
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.IsAll(System.String)">
            <summary>
            If current modules name is ALL, then return true.
            </summary>
            <param name="name">The modules name</param>
            <returns>Return true is the module name is ALLModulesViewModel.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.SelectedModule_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Monitors property changes in the selected module to call:
                SetCanRun for IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues
                SetCanCopy for SetCanCopy
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.SetCanRun">
            <summary>
            Called to set this.CanRun when:
                The SelectedModule changes, since there will be no selected command in the new module, and CanRun should be false
                WaitMessageDisplayedMessage changes since this being true will cause this.MainGridDisplayed to be false and CanRun should be false
                IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues changes in the selected module
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.SetCanCopy">
            <summary>
            Called to set this.CanCopy when:
                The SelectedModule changes, since there will be no selected command in the new module, and CanCopy should be false
                WaitMessageDisplayedMessage changes since this being true will cause this.MainGridDisplayed to be false and CanCopy should be false
                IsThereASelectedCommand changes in the selected module
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.Initialization(System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo},System.Collections.Generic.IEnumerable{Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo},System.Boolean)">
            <summary>
            Initialize AllModulesViewModel.
            </summary>
            <param name="importedModules">All loaded modules</param>
            <param name="commands">List of commands in all modules</param>
            <param name="noCommonParameterInModel">Whether showing common parameter</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.Compare(Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel,Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel)">
            <summary>
            Compare two ModuleViewModel target and source.
            </summary>
            <param name="source">The source ModuleViewModel</param>
            <param name="target">The target ModuleViewModel</param>
            <returns>Compare result</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.SelectedModule_SelectedCommandNeedsHelp(System.Object,Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs)">
            <summary>
            Called when the SelectedCommandNeedsHelp event is triggered in the Selected Module
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.SelectedModule_SelectedCommandNeedsImportModule(System.Object,Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs)">
            <summary>
            Called when the SelectedCommandNeedsImportModule event is triggered in the Selected Module
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.OnSelectedCommandInSelectedModuleNeedsHelp(Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs)">
            <summary>
            Triggers SelectedCommandInSelectedModuleNeedsHelp
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.OnSelectedCommandInSelectedModuleNeedsImportModule(Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs)">
            <summary>
            Triggers SelectedCommandInSelectedModuleNeedsImportModule
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.SelectedModule_RunSelectedCommand(System.Object,Microsoft.PowerShell.Commands.ShowCommandInternal.CommandEventArgs)">
            <summary>
            Called when the RunSelectedCommand is triggered in the selected module
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.OnRunSelectedCommandInSelectedModule(Microsoft.PowerShell.Commands.ShowCommandInternal.CommandEventArgs)">
            <summary>
            Triggers RunSelectedCommandInSelectedModule
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel.OnNotifyPropertyChanged(System.String)">
            <summary>
            If property changed will be notify
            </summary>
            <param name="propertyName">The changed property</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandEventArgs">
            <summary>
            Arguments for the event triggered when something happens at the cmdlet level
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandEventArgs.command">
            <summary>
            the command targeted by the event
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandEventArgs.#ctor(Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel)">
            <summary>
            Initializes a new instance of the CommandEventArgs class.
            </summary>
            <param name="command">the command targeted by the event</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandEventArgs.Command">
            <summary>
            Gets the command targeted by the event
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel">
            <summary>
            Contains information about a cmdlet's Shard ParameterSet,
            ParameterSets, Parameters, Common Parameters and error message.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.SharedParameterSetName">
            <summary>
            The name of the AllParameterSets
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.star">
            <summary>
            Grid length constant
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.parentModule">
            <summary>
            The module containing this cmdlet in the gui
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.defaultParameterSetName">
            <summary>
            The name of the default ParameterSet
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.areCommonParametersExpanded">
            <summary>
            Field used for the AreCommonParametersExpanded parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.selectedParameterSet">
            <summary>
            Field used for the SelectedParameterSet parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.parameterSets">
            <summary>
            Field used for the ParameterSets parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.noCommonParameters">
            <summary>
            Field used for the ParameterSetTabControlVisibility parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.comonParameters">
            <summary>
            Field used for the CommonParameters parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.commandInfo">
            <summary>
            The ShowCommandCommandInfo this model is based on
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.selectedParameterSetAllMandatoryParametersHaveValues">
            <summary>
             value indicating whether the selected parameter set has all mandatory parameters valid
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.moduleQualifyCommandName">
            <summary>
            value indicating whether the command name should be qualified by the module in GetScript
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.commonParametersHeight">
            <summary>
            The height for common parameters that will depend on CommonParameterVisibility
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.#ctor">
            <summary>
            Prevents a default instance of the CommandViewModel class from being created
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.PropertyChanged">
            <summary>
            PropertyChanged Event
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.HelpNeeded">
            <summary>
            Indicates the command needs to display the help for a command
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.ImportModule">
            <summary>
            Indicates a module needs to be imported
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.ModuleQualifyCommandName">
            <summary>
            Gets or sets a value indicating whether the command name should be qualified by the module in GetScript
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.AreCommonParametersExpanded">
            <summary>
            Gets or sets a value indicating whether the common parameters are expanded
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.SelectedParameterSet">
            <summary>
            Gets or sets the SelectedParameterSet parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.SelectedParameterSetAllMandatoryParametersHaveValues">
            <summary>
            Gets or sets a value indicating whether the selected parameter set has all mandatory parameters valid.
            If there is no selected parameter set this value is true
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.ParameterSets">
            <summary>
            Gets the ParameterSets parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.ParameterSetTabControlVisibility">
            <summary>
            Gets the visibility for the tab control displaying several ParameterSetControl. This is displayed when there are more than 1 parameter sets.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.SingleParameterSetControlVisibility">
            <summary>
            Gets the visibility for the single ParameterSetControl displayed when there is only 1 parameter set
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.CommonParameters">
            <summary>
            Gets the CommonParameters parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.CommonParameterVisibility">
            <summary>
            Gets the CommonParameterVisibility parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.CommonParametersHeight">
            <summary>
            Gets or sets the height for common parameters that will depend on CommonParameterVisibility
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.NotImportedVisibility">
            <summary>
            Gets the visibility for the control displayed when the module is not imported
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.NoParameterVisibility">
            <summary>
            Gets the visibility for the control displayed when there are no parameters
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.IsImported">
            <summary>
            Gets a value indicating whether the cmdlet comes from a module which is imported
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.Name">
            <summary>
            Gets the Name parameter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.ModuleName">
            <summary>
            Gets the module path if it is not null or empty, or the name otherwise
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.ParentModule">
            <summary>
            Gets the module containing this cmdlet in the GUI.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.ToolTip">
            <summary>
            Gets Tooltip string for the cmdlet
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.ImportModuleMessage">
            <summary>
            Gets the message to be displayed when the cmdlet belongs to a module that is not imported
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.DetailsTitle">
            <summary>
            Gets the title for the cmdlet details
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.Star">
            <summary>
            Gets a Grid length constant
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.GetScript">
            <summary>
            Gets the builded PowerShell script.
            </summary>
            <returns>Return script as string</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.OpenHelpWindow">
            <summary>
            Showing help information for current actived cmdlet.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.IsSharedParameterSetName(System.String)">
            <summary>
            Determins whether current command name and a specifed ParameterSetName have same name.
            </summary>
            <param name="name">The name of ShareParameterSet</param>
            <returns>Return true is ShareParameterSet. Else return false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.GetCommandViewModel(Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel,Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandCommandInfo,System.Boolean)">
            <summary>
            Creates a new CommandViewModel out the <paramref name="commandInfo"/>.
            </summary>
            <param name="module">Module to which the CommandViewModel will belong to</param>
            <param name="commandInfo">Will showing command</param>
            <param name="noCommonParameters">true to ommit displaying common parameter</param>
            <exception cref="T:System.ArgumentNullException">If commandInfo is null</exception>
            <exception cref="T:System.Management.Automation.RuntimeException">
            If could not create the CommandViewModel. For instance the ShowCommandCommandInfo corresponding to
            the following function will throw a RuntimeException when the ShowCommandCommandInfo Parameters
            are retrieved:
            function CrashMe ([I.Am.A.Type.That.Does.Not.Exist]$name) {}
            </exception>
            <returns>The CommandViewModel corresponding to commandInfo</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.OnHelpNeeded">
            <summary>
            Called to trigger the event fired when help is needed for the command
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.OnImportModule">
            <summary>
            Called to trigger the event fired when a module needs to be imported
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.SetCommonParametersHeight">
            <summary>
            Called to set the height for common parameters initially or when the AreCommonParametersExpanded changes
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.Compare(Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel,Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel)">
            <summary>
            Compares source and target by being the default parameter set and then by name
            </summary>
            <param name="source">source paremeterset</param>
            <param name="target">target parameterset</param>
            <returns>0 if they are the same, -1 if source is smaller, 1 if source is larger</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.OnNotifyPropertyChanged(System.String)">
            <summary>
            If property changed will be notify
            </summary>
            <param name="propertyName">The changed property</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel.SelectedParameterSet_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the PropertyChanged event is triggered on the SelectedParameterSet
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs">
            <summary>
            Arguments for the event triggered when it is necessary to display help for a command
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs.commandName">
            <summary>
            the name for the command needing help
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HelpNeededEventArgs class.
            </summary>
            <param name="commandName">the name for the command needing help</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs.CommandName">
            <summary>
            Gets the name for the command needing help
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs">
            <summary>
            Arguments for the event triggered when it is necessary to display help for a command
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs.commandName">
            <summary>
            the name for the command belonging to the module to be imported
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs.parentModuleName">
            <summary>
            the module path or name for the module we want to import
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs.selectedModuleName">
            <summary>
            the name of the module that is selected, which can be different from parentModuleName
            if "All" is selected
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the ImportModuleEventArgs class.
            </summary>
            <param name="commandName">the name for the command needing help</param>
            <param name="parentModuleName">the name of the module containing the command</param>
            <param name="selectedModuleName">
            the name of the module that is selected, which can be different from parentModuleName
            if "All" is selected
            </param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs.CommandName">
            <summary>
            Gets the name for the command belonging to the module to be imported
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs.ParentModuleName">
            <summary>
            Gets the module path or name for the module we want to import
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs.SelectedModuleName">
            <summary>
            Gets the name of the module that is selected, which can be different from parentModuleName
            if "All" is selected
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel">
            <summary>
            ModuleViewModel Contains information about a PowerShell module.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.isModuleImported">
            <summary>
            True if the module is imported
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.name">
            <summary>
            Field used for the Name parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.filteredCommands">
            <summary>
             Filter commands property of this module
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.selectedCommand">
            <summary>
            The selected command property of this module
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.commands">
            <summary>
            Field used for the Commands parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.isThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues">
            <summary>
            value indicating whether there is a selected command which belongs to an imported module, 
            with no parameter sets or with a selected parameter set where all mandatory parameters have values
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.isThereASelectedCommand">
            <summary>
            value indicating whether there is a selected command
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.allModules">
            <summary>
            The AllModulesViewModel containing this, if any
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandModuleInfo})">
            <summary>
            Initializes a new instance of the ModuleViewModel class.
            </summary>
            <param name="name">Module name</param>
            <param name="importedModules">All loaded modules</param>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.PropertyChanged">
            <summary>
            PropertyChanged Event
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.SelectedCommandNeedsHelp">
            <summary>
            Indicates the selected command in needs to display the help for a command
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.SelectedCommandNeedsImportModule">
            <summary>
            Indicates the selected command needs to import a module
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.RunSelectedCommand">
            <summary>
            Indicates the selected command should be run
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.Name">
            <summary>
            Gets the name property of this ModuleView
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.DisplayName">
            <summary>
            Gets the GUI friendly module name
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.CommandControlVisibility">
            <summary>
            Gets CommandControl is visibility or not
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.CommandRowHeight">
            <summary>
             Gets CommandControl Height
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.Commands">
            <summary>
            Gets the commands under in this module
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.FilteredCommands">
            <summary>
             Gets the filter commands of this module
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.SelectedCommand">
            <summary>
            Gets or sets the selected commands of this module
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.IsThereASelectedCommand">
            <summary>
            Gets or sets a value indicating whether there is a selected command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues">
            <summary>
            Gets or sets a value indicating whether there is a selected command which belongs
            to an imported module, with no parameter sets or with a selected parameter set 
            where all mandatory parameters have values
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.AllModules">
            <summary>
            Gets the AllModulesViewModel containing this, if any
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.IsModuleImported">
            <summary>
            Gets a value indicating whether the module is imported
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.SetAllModules(Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel)">
            <summary>
            Sets the AllModulesViewModel containing this
            </summary>
            <param name="parentAllModules">the AllModulesViewModel containing this</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.SortCommands(System.Boolean)">
            <summary>
            Sorts commands and optionally sets ModuleQualifyCommandName
            </summary>
            <param name="markRepeatedCmdlets">true to mark repeated commands with a flag that will produce a module qualified name in GetScript</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.RefreshFilteredCommands(System.String)">
            <summary>
            According commandNameFilter to filter command,and added the filter commands into filteredCommands property
            </summary>
            <param name="filter">current filter</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.OnRunSelectedCommand">
            <summary>
            Callled in response to a GUI event that requires the command to be run
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.OnSelectedCommandNeedsHelp(Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs)">
            <summary>
            Triggers the SelectedCommandNeedsHelp event
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.OnSelectedCommandNeedsImportModule">
            <summary>
            Triggers the SelectedCommandNeedsImportModule event
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.Matches(System.Management.Automation.WildcardPattern,System.String,System.String)">
            <summary>
            Uses pattern matching if pattern is not null or calls MatchesEvenIfInPlural otherwise
            </summary>
            <param name="filterPattern">pattern corresponding to filter</param>
            <param name="commandName">command name string</param>
            <param name="filter">filter string</param>
            <returns>true if coparisonText matches str or pattern</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.MatchesEvenIfInPlural(System.String,System.String)">
            <summary>
            Returns true if filter matches commandName, even when filter is in the plural
            </summary>
            <param name="commandName">command name string</param>
            <param name="filter">filter string</param>
            <returns>return match result</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.SelectedCommand_HelpNeeded(System.Object,Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs)">
            <summary>
            Handles the HelpNeeded event in the selected command and triggers the SelectedCommandNeedsHelp event
            </summary>
            <param name="sender">HelpNeeded event sender</param>
            <param name="e">HelpNeeded event argument</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.SelectedCommand_ImportModule(System.Object,System.EventArgs)">
            <summary>
            Handles the ImportModule event in the selected command and triggers the SelectedCommandNeedsImportModule event
            </summary>
            <param name="sender">HelpNeeded event sender</param>
            <param name="e">HelpNeeded event argument</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.SelectedCommand_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the SelectedCommand property changes to update IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.SetIsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues">
            <summary>
            Called to set IsThereASelectedImportedCommandWhereAllMandatoryParametersHaveValues when 
            SelectedParameterSetAllMandatoryParametersHaveValues changes in the SelectedCommand or
            when the SelectedCommand changes
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.Compare(Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel,Microsoft.PowerShell.Commands.ShowCommandInternal.CommandViewModel)">
            <summary>
            Compare source commandmodule is equal like target commandmodule
            </summary>
            <param name="source">source commandmodule </param>
            <param name="target">target commandmodule</param>
            <returns>return compare result</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ModuleViewModel.OnNotifyPropertyChanged(System.String)">
            <summary>
            If property changed will be notify
            </summary>
            <param name="propertyName">The changed property</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel">
            <summary>
             Contains information about a single ParameterSet inside a cmdlet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.name">
            <summary>
            Field used for the Name parameter.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.allMandatoryParametersHaveValues">
            <summary>
            value indicating all mandatory parameters have values
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.parameters">
            <summary>
            Field used for the Parameters parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.#ctor(System.String,System.Collections.Generic.List{Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel})">
            <summary>
            Initializes a new instance of the ParameterSetViewModel class.
            </summary>
            <param name="name">The name of the parameterSet</param>
            <param name="parameters">The array parametes of the parameterSet</param>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.PropertyChanged">
            <summary>
            PropertyChanged Event
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.Name">
            <summary>
            Gets the ParameterSet Name
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.Parameters">
            <summary>
            Gets the Parameters of this parameterset 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.AllMandatoryParametersHaveValues">
            <summary>
            Gets or sets a value indicating whether all mandatory parameters have values
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.GetScript">
            <summary>
            Creates script according parameters of this parameterset
            </summary>
            <returns>Return script of this parameterset parameters</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.GetIndividualParameterCount">
            <summary>
            Gets the individual parameter count of this parameterset
            </summary>
            <returns>Return individual parameter count of this parameterset</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.Compare(Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel,Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel)">
            <summary>
            Compare source parametermodel is equal like target parametermodel
            </summary>
            <param name="source">the source of parametermodel</param>
            <param name="target">the target of parametermodel</param>
            <returns>Return compare result</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.GetDelimitedParameter(System.String,System.String,System.String)">
            <summary>
            Gets the delimited poarameter if it needs delimitation and is not delimited
            </summary>
            <param name="parameterValue">value needing delimitation</param>
            <param name="openDelimiter">open delimitation</param>
            <param name="closeDelimiter">close delimitation</param>
            <returns>the delimited poarameter if it needs delimitation and is not delimited</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.ParameterNeedsDelimitation(System.String,System.Boolean)">
            <summary>
            Returns '0' if the <paramref name="parameterValue"/> does not need delimitation, '1' if it does, and a quote character if it needs to be delimited with a quote
            </summary>
            <param name="parameterValue">parameter value to check</param>
            <param name="requireScriptblock">true if the parameter value should be a scriptblock</param>
            <returns>'0' if the parameter does not need delimitation, '1' if it needs, '\'' if it needs to be delimited with single quote and '\"' if it needs to be delimited with double quotes</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.EvaluateAllMandatoryParametersHaveValues">
            <summary>
            Called to evaluate the value of AllMandatoryParametersHaveValues
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.OnNotifyPropertyChanged(System.String)">
            <summary>
            If property changed will be notify
            </summary>
            <param name="propertyName">The changed property</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterSetViewModel.MandatoryParameter_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Used to track changes to parameter values in order to verify the enabled state of buttons
            </summary>
            <param name="sender">event arguments</param>
            <param name="e">event sender</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel">
            <summary>
            Contains information about a single parameter inside a parameter set. 
            If a parameter with the same name belongs to two (or more) parameter sets, 
            there will be two (or more) ParameterViewModel objects for the parameters, 
            each one inside its own ParameterSetViewModel.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.parameter">
            <summary>
            ParameterMetadata contains information that is the same throughout parameter sets
            like Name and Type. 
            Note: It also happens to contain a list of all ParameterSetMetadata for the parametersets
            in this cmdlet, but this information is not used in this class since if a parameter is
            in multiple parametersets, there will be a ParameterViewModel for each time the parameter
            appears in a parameterset.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.parameterValue">
            <summary>
            value entered in the GUI for the parameter
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.parameterSetName">
            <summary>
            Name of the parameter set this parameter is in
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.#ctor(Microsoft.PowerShell.Commands.ShowCommandExtension.ShowCommandParameterInfo,System.String)">
            <summary>
            Initializes a new instance of the ParameterViewModel class.
            </summary>
            <param name="parameter">The parameter information for this parameter</param>
            <param name="parameterSetName">the name of the parameter set this parameter is in</param>
        </member>
        <member name="E:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.PropertyChanged">
            <summary>
            PropertyChanged Event
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.Parameter">
            <summary>
            Gets the ParameterMetadata that contains information that is the same throughout parameter sets
            like Name and Type. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.Value">
            <summary>
            Gets or sets the value for this parameter from the GUI
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.Name">
            <summary>
            Gets the parameter name
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.ParameterSetName">
            <summary>
            Gets the name of the parameter set this parameter is in
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.IsInSharedParameterSet">
            <summary>
            Gets a value indicating whether this parameter is in the shared parameterset
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.NameTextLabel">
            <summary>
            Gets Name with an extra suffix to indicate if the parameter is mandatory to serve 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.NameCheckLabel">
            <summary>
            Gets Label in the case this parameter is used in a combo box
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.ToolTip">
            <summary>
            Gets Tooltip string for the parameter
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.IsMandatory">
            <summary>
            Gets a value indicating whether the parameter is mandatory
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.HasValue">
            <summary>
            Gets a value indicating whether the parameter has a value
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.EvaluateTooltip(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Evaluates the tooltip based on the parameters
            </summary>
            <param name="typeName">parameter type name</param>
            <param name="position">parameter position</param>
            <param name="mandatory">true if the parameter is mandatory</param>
            <param name="shared">true if the parameter is shared by parameter sets</param>
            <param name="valueFromPipeline">true if the parameter takes value from the pipeline</param>
            <returns> the tooltip based on the parameters</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ParameterViewModel.OnNotifyPropertyChanged(System.String)">
            <summary>
            If property changed will be notify
            </summary>
            <param name="propertyName">The changed property</param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow">
            <summary>
            Interaction logic for CmdletGUI.xaml
            </summary>
            <summary>
            ShowAllModulesWindow
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.zoomLevel">
            <summary>
            private constants for ZoomLevel
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.ZOOM_INCREMENT">
            <summary>
            Zoom Increments
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.ZOOM_MAX">
            <summary>
            Max ZoomLevel
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.ZOOM_MIN">
            <summary>
            Min ZoomLevel
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.#ctor">
            <summary>
            Initializes a new instance of the ShowAllModulesWindow class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.OnClosed(System.EventArgs)">
            <summary>
            Saves the user settings
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.ShowAllModulesWindow_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Sets the focus on the CommandName control
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.ShowAllModulesWindow_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Saves size changes in user settings
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.ShowAllModulesWindow_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            Saves position changes in user settings
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.ShowAllModulesWindow_StateChanged(System.Object,System.EventArgs)">
            <summary>
            Updates the user setting with window state
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.ZoomEventHandlerPlus(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Implements ZoomIn
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.ZoomEventHandlerMinus(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Implements ZoomOut
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowAllModulesWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandWindow">
            <summary>
            Interaction logic for CmdletGUI.xaml
            </summary>
            <summary>
            ShowCommandWindow
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandWindow.#ctor">
            <summary>
            Initializes a new instance of the ShowCommandWindow class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandWindow.OnClosed(System.EventArgs)">
            <summary>
            Saves the user settings
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandWindow.ShowCommandWindow_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Saves size changes in user settings
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandWindow.ShowCommandWindow_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            Saves position changes in user settings
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandWindow.ShowCommandWindow_StateChanged(System.Object,System.EventArgs)">
            <summary>
            Updates the user setting with window state
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.ShowCommandWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionDialog">
            <summary>
            Interaction logic for MultipleSelectionDialog.xaml
            </summary>
            <summary>
            MultipleSelectionDialog
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionDialog.#ctor">
            <summary>
            Initializes a new instance of the MultipleSelectionDialog class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionDialog.ButtonOK_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            OK Click event function
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionDialog.ButtonCancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Cancel Click event function
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ShowCommandInternal.MultipleSelectionDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.Internal.HelpWindowHelper">
            <summary>
            Implements thw WPF window part of the the ShowWindow option of get-help
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.Internal.HelpWindowHelper.ShowHelpWindow(System.Management.Automation.PSObject,System.Management.Automation.PSCmdlet)">
            <summary>
            Shows the help window
            </summary>
            <param name="helpObj">object with help information</param>
            <param name="cmdlet">cmdlet calling this method</param>
        </member>
    </members>
</doc>
