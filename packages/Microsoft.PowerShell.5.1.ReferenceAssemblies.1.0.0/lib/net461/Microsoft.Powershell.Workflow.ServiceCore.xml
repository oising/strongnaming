<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PowerShell.Workflow.ServiceCore</name>
    </assembly>
    <members>
        <member name="F:Microsoft.PowerShell.Workflow.DefinitionCache._workflowDetailsCache">
            <summary>
            Cache of workflow details. This is unbounded
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.DefinitionCache._cachedActivities">
            <summary>
            this is the cache of compiled activities which will be bounded
            </summary>
            <remarks>this is separate since Opalis will not use our cache</remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.DefinitionCache._cacheSize">
            <summary>
            Cache size
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.DefinitionCache.WindowsPath">
            <summary>
            Path to Windows folder
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.DefinitionCache.Instance">
            <summary>
            Return the singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.DefinitionCache.CompileActivityAndSaveInCache(Microsoft.PowerShell.Workflow.WorkflowJobDefinition,System.Activities.Activity,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean@,System.String)">
            <summary>
            Compiles the activity and adds it to the cache before returning it.
            </summary>
            <param name="definition">WorkflowJobDefinition defined to represent a compiled activity.</param>
            <param name="activityTree">Activity Tree used for external activities</param>
            <param name="requiredAssemblies"></param>
            <param name="windowsWorkflow">indicates if the specified xaml is a Windows workflow</param>
            <param name="rootWorkflowName">Optional, once assigned, only root Workflow will be compiled</param>
            <returns>Activity compiled from xaml given, or retrieved from cache.
            Null if not found.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.DefinitionCache.GetActivityFromCache(Microsoft.PowerShell.Workflow.WorkflowJobDefinition,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="definition"></param>
            <param name="windowsWorkflow"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.DefinitionCache.GetActivityFromCache(System.String,Microsoft.PowerShell.Workflow.WorkflowJobDefinition@)">
            <summary>
            
            </summary>
            <param name="xaml"></param>
            <param name="workflowJobDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.DefinitionCache.RemoveCachedActivity(System.Management.Automation.JobDefinition)">
            <summary>
            Remove a cached definition. Needed when functions are removed to release resources.
            </summary>
            <param name="definition">Xaml definition to remove.</param>
            <returns>True if succeeded.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobDefinition.#ctor(System.Type,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="jobSourceAdapterType"></param>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobDefinition.AsWorkflowJobDefinition(System.Management.Automation.JobDefinition)">
            <summary>
            Returns the same object is the specified job definition is a
            WorkflowJobDefinition. If not creates a new one and assigns
            the same
            </summary>
            <param name="definition">job definition to check</param>
            <returns>WorkflowJobDefinition equivalent</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobDefinition.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowJobDefinition.WorkflowScriptFile">
            <summary>
            Workflow script file name or null if no associated file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowJobDefinition.WorkflowFullScript">
            <summary>
            Full workflow script source.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSPersistableIdleAction">
            <summary>
            Specifies the action that occurs when a workflow becomes idle when persistence is allowed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSPersistableIdleAction.NotDefined">
            <summary>
            No or null action is defined so fall back to default.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSPersistableIdleAction.None">
            <summary>
            Specifies that no action is taken.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSPersistableIdleAction.Persist">
            <summary>
            Specifies that the System.Activities.WorkflowApplication should persist the workflow.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSPersistableIdleAction.Unload">
            <summary>
            Specifies that the System.Activities.WorkflowApplication should persist and unload the workflow.
            The job will remain in running state because aysnc operation (out of proc or remote operation) is in progress.
            The System.Activities.WorkflowApplication will be loaded when async operation gets completed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSPersistableIdleAction.Suspend">
            <summary>
            Specifies that the System.Activities.WorkflowApplication should persist and unload the workflow and Job is marked as suspended.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowId">
            <summary>
            This class encapsulate the guid to avoid the confusion be job instance id and workflow instance id.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowId.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowId.#ctor(System.Guid)">
            <summary>
            Constructor which takes guid.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowId.NewWorkflowGuid">
            <summary>
            NewWorkflowGuid
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowId.Guid">
            <summary>
            Gets Guid
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.WorkflowUnhandledErrorAction">
            <summary>
            WorkflowOnHandledErrorAction
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowUnhandledErrorAction.Suspend">
            <summary>
            Suspend
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowUnhandledErrorAction.Stop">
            <summary>
            Stop
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowUnhandledErrorAction.Terminate">
            <summary>
            Terminate
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.WorkflowInstanceCreationMode">
            <summary>
            Possible workflow instance creation modes.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceCreationMode.Normal">
            <summary>
            Workflow instance created normally.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceCreationMode.AfterCrashOrShutdown">
            <summary>
            Workflow instance created normally.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowRemoteActivityState">
            <summary>
            PSWorkflowRemoteActivityState
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowRemoteActivityState.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore)">
            <summary>
            PSWorkflowRemoteActivityState constructor
            </summary>
            <param name="store"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowRemoteActivityState.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.Int32,System.Tuple{System.Object,System.String}}})">
            <summary>
            Creates a PSWorkflowRemoteActivityState for a workflow instance based on deserialized object
            </summary>
            <param name="store"></param>
            <param name="deserializedRemoteActivityState"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowRemoteActivityState.GetSerializedData">
            <summary>
            Retrieves RemoteActivityState object to be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowRemoteActivityState.InternalUnloaded">
            <summary>
            InternalUnloaded property
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowRemoteActivityState.GetRemoteActivityRunspaceEntry(System.String,System.Int32)">
            <summary>
            GetRemoteActivityRunspaceEntry
            </summary>
            <param name="activityId"></param>
            <param name="taskId"></param>
            <returns>task entry object</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowRemoteActivityState.SetRemoteActivityRunspaceEntry(System.String,System.Int32,System.Object,System.String)">
            <summary>
            SetRemoteActivityRunspaceEntry
            </summary>
            <param name="activityId"></param>
            <param name="taskId"></param>
            <param name="taskState">task state can be "NotStarted", Guid, or "Completed"</param>
            <param name="computerName">computer name of the task</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowRemoteActivityState.RemoteActivityResumeRequired(Microsoft.PowerShell.Activities.PSActivity,System.Boolean)">
            <summary>
            RemoteActivityResumeRequired
            </summary>
            <param name="activity"></param>
            <param name="duringResumeBookmark"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance">
            <summary>
            Collects all the information related to a workflow instance.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.Tracer">
            <summary>
            Tracer initialization.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.workflowApplication">
            <summary>
            Workflow Application executes the workflow and it is part of CLR 4.0.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.id">
            <summary>
            The Guid, which represents the unique instance of a workflow.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance._definition">
            <summary>
            Workflow definition.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance._streams">
            <summary>
            Workflow output, which represent all streams from the workflow.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance._errorException">
            <summary>
            Workflow error exception, which represent the terminating error workflow.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance._remoteActivityState">
            <summary>
            the remote runspace instance ids collection
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance._metadatas">
            <summary>
            Workflow metadatas.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance._debugger">
            <summary>
            Workflow debugger.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance._timers">
            <summary>
            Workflow timers.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.creationMode">
            <summary>
            The workflow creation mode.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowRuntime,Microsoft.PowerShell.Workflow.PSWorkflowDefinition,Microsoft.PowerShell.Workflow.PSWorkflowContext,System.Management.Automation.PSDataCollection{System.Management.Automation.PSObject},Microsoft.PowerShell.Workflow.PSWorkflowJob)">
            <summary>
            Workflow instance constructor.
            </summary>
            <param name="runtime"></param>
            <param name="definition">The workflow definition.</param>
            <param name="metadata">The metadata which includes parameters etc.</param>
            <param name="pipelineInput">This is input coming from pipeline, which is added to the input stream.</param>
            <param name="job"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowRuntime,Microsoft.PowerShell.Workflow.PSWorkflowId)">
            <summary>
            Workflow instance constructor for shutdown or crashed workflows.
            </summary>
            <param name="runtime"></param>
            <param name="instanceId"></param>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.Id">
            <summary>
            Gets the Guid of workflow instance.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoLoadInstanceForReactivation">
            <summary>
            Load instance for resuming the workflow
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.PerformTaskAtTerminalState">
            <summary>
            PerformTaskAtTerminalState
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.SaveStreamsIfNecessary">
            <summary>
            Save streams if they are not already persisted
            </summary>
            <returns>false, if persistence was attempted and there
            was an error
            true - otherwise</returns>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.PSWorkflowJob">
            <summary>
            PSWorkflowJob
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.InstanceId">
            <summary>
            Gets the Guid of workflow instance.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.CreationContext">
            <summary>
            Gets the Creation Context of workflow job.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.InstanceStore">
            <summary>
            InstanceStore
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.PSWorkflowDefinition">
            <summary>
            Gets the definition of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.Streams">
            <summary>
            Gets the streams of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.RemoteActivityState">
            <summary>
            Gets the remote runspace instance ids collection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.Error">
            <summary>
            Gets the streams of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.Timer">
            <summary>
            Gets the timers of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.PSWorkflowContext">
            <summary>
            Gets the metadatas of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.PSWorkflowDebugger">
            <summary>
            PSWorkflowDebugger
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DisposeStreams">
            <summary>
            Dispose the streams to save memory
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoStopInstance">
            <summary>
            DoStopInstance
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoAbortInstance(System.String)">
            <summary>
            DoAbortInstance
            </summary>
            <param name="reason">Reason for aborting workflow.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoTerminateInstance(System.String)">
            <summary>
            DoTerminateInstance
            </summary>
            <param name="reason">Reason message for termination</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoTerminateInstance(System.String,System.Boolean)">
            <summary>
            DoTerminateInstance
            </summary>
            <param name="reason">Reason message for termination</param>
            <param name="suppressError">Suppress error for termination</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoResumeInstance(System.String)">
            <summary>
            DoResumeInstance
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoSuspendInstance(System.Boolean)">
            <summary>
            DoSuspendInstance
            </summary>
            <param name="notStarted"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoExecuteInstance">
            <summary>
            DoExecuteInstance
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoResumeBookmark(System.Activities.Bookmark,System.Object)">
            <summary>
            DoResumeBookmark
            </summary>
            <param name="bookmark"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoCreateInstance">
            <summary>
            Loads the xaml to create an executable activity.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoRemoveInstance">
            <summary>
            Remove
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoPersistInstance">
            <summary>
            DoPersistInstance
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.DoGetPersistableIdleAction(System.Collections.ObjectModel.ReadOnlyCollection{System.Activities.Hosting.BookmarkInfo},System.Boolean)">
            <summary>
            DoGetPersistableIdleAction
            </summary>
            <param name="bookmarks"></param>
            <param name="externalSuspendRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.Dispose(System.Boolean)">
            <summary>
            Dispose 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.GetTrackingParticipant">
            <summary>
            Construct the workflow tracking participant.
            </summary>
            <returns>Returns the workflow tracking participant.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.CheckForTerminalAction">
            <summary>
            CheckForTerminalAction
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.ValidateIfLabelExists(System.String)">
            <summary>
            Validate if the label exists.
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowApplicationInstance.TranslateMetaDataName(System.String)">
            <summary>
            Helper method to translate internal Workflow metadata names to 
            public Workflow variable names.
            </summary>
            <param name="metaDataName">Metadata key string</param>
            <returns>Public workflow variable name</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.WorkflowDebugMode">
            <summary>
            PSWorkflowDebuggerMode
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowDebugMode.Off">
            <summary>
            Debugger is off.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowDebugMode.StopAtBreakpoint">
            <summary>
            Debugger stops at breakpoints.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowDebugMode.StepToNextActivity">
            <summary>
            Debugger stops at each Activity within a workflow function,
            and will step over nested workflow functions.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowDebugMode.StepIntoFunction">
            <summary>
            Debugger steps into nested workflow functions.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowDebugMode.StepOutOfFunction">
            <summary>
            Debugger steps out of nested workflow functions.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityPosition.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="line"></param>
            <param name="col"></param>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.ActivityPosition.Name">
            <summary>
            Workflow function name
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.ActivityPosition.Line">
            <summary>
            Script line position
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.ActivityPosition.Column">
            <summary>
            Script column position
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowDebugger">
            <summary>
            Workflow Debugger
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowInstance)">
            <summary>
            Constructor
            </summary>
            <param name="wfInstance">PSWorkflowInstance</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.ProcessCommand(System.Management.Automation.PSCommand,System.Management.Automation.PSDataCollection{System.Management.Automation.PSObject})">
            <summary>
            ProcessCommand
            </summary>
            <param name="command">PSCommand</param>
            <param name="output"></param>
            <returns>DebuggerCommandResults</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.StopProcessCommand">
            <summary>
            StopProcessCommand
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.SetDebuggerAction(System.Management.Automation.DebuggerResumeAction)">
            <summary>
            SetDebuggerAction
            </summary>
            <param name="resumeAction">DebuggerResumeAction to set</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.GetDebuggerStopArgs">
            <summary>
            DebuggerStopEventArgs
            </summary>
            <returns>DebuggerStopEventArgs</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.SetParent(System.Management.Automation.Debugger,System.Collections.Generic.IEnumerable{System.Management.Automation.Breakpoint},System.Nullable{System.Management.Automation.DebuggerResumeAction},System.Management.Automation.Host.PSHost,System.Management.Automation.PathInfo)">
            <summary>
            Sets the parent debugger and breakpoints.
            </summary>
            <param name="parent">Parent debugger</param>
            <param name="breakPoints">List of breakpoints</param>
            <param name="mode">Debugger mode</param>
            <param name="host">host</param>
            <param name="path">Current path</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.SetParent(System.Management.Automation.Debugger,System.Collections.Generic.IEnumerable{System.Management.Automation.Breakpoint},System.Nullable{System.Management.Automation.DebuggerResumeAction},System.Management.Automation.Host.PSHost,System.Management.Automation.PathInfo,System.Collections.Generic.Dictionary{System.String,System.Management.Automation.DebugSource})">
            <summary>
            Sets the parent debugger, breakpoints and function source map.
            </summary>
            <param name="parent">Parent debugger</param>
            <param name="breakPoints">List of breakpoints</param>
            <param name="mode">Debugger mode</param>
            <param name="host">host</param>
            <param name="path">Current path</param>
            <param name="functionSourceMap">Function to source map</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.GetCallStack">
            <summary>
            Returns IEnumerable of CallStackFrame objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.SetDebuggerStepMode(System.Boolean)">
            <summary>
            Sets debugger stepping mode.
            </summary>
            <param name="enabled">True if stepping is to be enabled</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.DebuggerCheck(Microsoft.PowerShell.Workflow.ActivityPosition)">
            <summary>
            DebuggerCheck
            </summary>
            <param name="activityPosition">Defines activity execution position in XAML definition</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.UpdateVariables(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            UpdateVariables
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.CheckXamlInfo">
            <summary>
            Lazily create Xaml related info.
            </summary>
            <returns>True if Xaml info is available.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.CheckWorkflowJob(System.String)">
            <summary>
            Lazily create the job meta data variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.UpdateScriptInfo(System.String)">
            <summary>
            UpdateScriptInfo
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.CheckForWorkflowVariableChange(System.Management.Automation.PSCommand,System.Management.Automation.PSDataCollection{System.Management.Automation.PSObject},System.Management.Automation.ErrorRecord@)">
            <summary>
            Helper method to check if user attempted to modify a workflow variable which
            isn't supported.  Write error message to host.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDebugger.CheckForSevereException(System.Exception)">
            <summary>
            Helper method to check for and rethrow severe exceptions.
            </summary>
            <param name="e">Exception to check</param>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowJob">
            <summary>
            Workflow Job type implementation. For use with the WorkflowJobSourceAdapter.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.OnIdle">
            <summary>
            Delegate action on workflow idling
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.OnPersistableIdleAction">
            <summary>
            Delegate function on workflow persist idle action
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.OnUnloaded">
            <summary>
            Delegate action on workflow unloaded
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.Running">
            <summary>
            Signaled when job reaches running state
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.SuspendedOrAborted">
            <summary>
            Signaled when job finishes suspending or aboring
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.WorkflowParameters">
            <summary>
            Job input parameters
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.PSWorkflowCommonParameters">
            <summary>
            Job input parameters including system provided parameters
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.JobMetadata">
            <summary>
            Job metadata collection
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.PrivateMetadata">
            <summary>
            Job invoker metadata collection
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.PSWorkflowInstance">
            <summary>
            Workflow instance for the job
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.PSWorkflowDebugger">
            <summary>
            Workflow debugger
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.PSWorkflowJobDefinition">
            <summary>
            Workflow job definition
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowJob._workflowParameters">
            <summary>
            Input parameters to the workflow instance.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.Validate(System.Management.Automation.JobInvocationInfo)">
            <summary>
            Provide validation of constructor parameter that could cause NullReferenceException.
            </summary>
            <param name="specification">JobInvocationInfo for construction.</param>
            <returns>specification parameter if not null.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.DoSuspendJob">
            <summary>
            DoSuspendJob returns a bool, but
            in the case of a SuspendJob call, we do not
            want to return until the job is in the correct state.
            The boolean return value is used by the WorkflowManager
            for Shutdown purposes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.DoSetJobState(System.Management.Automation.JobState,System.Exception)">
            <summary>
            Do Set Job State
            </summary>
            <param name="state"></param>
            <param name="reason"></param>
            <returns>returns false if state tranition is not possible. Return value is required to update SQM perf counters</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.SortStartParameters(System.Activities.DynamicActivity,System.Management.Automation.Runspaces.CommandParameterCollection)">
            <summary>
            Create necessary dictionaries for WorkflowManager consumption based on StartParameters.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.DoResumeBookmark(System.Activities.Bookmark,System.Object)">
            <summary>
            DoResumeBookmark
            </summary>
            <param name="bookmark">The Bookmark which needs to be resumed.</param>
            <param name="state">The state, which will be passed to the activity, which gets resumed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.SelfUnloadJobStreams">
            <summary>
            Unloads the streams of the job. 
            </summary>
            <remarks>
            To be called from this class only</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.IsFinishedState(System.Management.Automation.JobState)">
            <summary>
            Helper function to check if job is finished
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowRuntime,System.Management.Automation.JobInvocationInfo)">
            <summary>
            Construct a PSWorkflowJob.
            </summary>
            <param name="runtime"></param>
            <param name="specification">JobInvocationInfo representing the command this job
            will invoke.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowRuntime,System.Management.Automation.JobInvocationInfo,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Construct a PSWorkflowJob.
            </summary>
            <param name="runtime"></param>
            <param name="specification">JobInvocationInfo representing the command this job will invoke.</param>
            <param name="JobInstanceId"></param>
            <param name="creationContext"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowRuntime,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="runtime"></param>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowRuntime,System.String,System.String,System.Management.Automation.JobIdentifier)">
            <summary>
            
            </summary>
            <param name="runtime"></param>
            <param name="command"></param>
            <param name="name"></param>
            <param name="token"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowRuntime,System.String,System.String,System.Guid)">
            <summary>
            
            </summary>
            <param name="runtime"></param>
            <param name="command"></param>
            <param name="name"></param>
            <param name="instanceId"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.StopJob">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.StatusMessage">
            <summary>
            Success status of the command execution.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.HasMoreData">
            <summary>
            Indicates that more data is available in this result object for reading.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.Location">
            <summary>
            Indicates a location where this job is running.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.DoLoadJobStreams">
            <summary>
            Implementation of this method will allow the delayed loadig of streams.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.DoUnloadJobStreams">
            <summary>
            Unloads job streams information. Enables jobs to
            clear stream information from memory
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.StartJob">
            <summary>
            start a job. The job will be started with the parameters
            specified in StartParameters
            </summary>
            <remarks>It is redudant to have a method named StartJob
            on a job class. However, this is done so as to avoid
            an FxCop violation "CA1716:IdentifiersShouldNotMatchKeywords"
            Stop and Resume are reserved keyworks in C# and hence cannot
            be used as method names. Therefore to be consistent it has
            been decided to use *Job in the name of the methods</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.StartJobAsync">
            <summary>
            Start a job asynchronously
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.StopJobAsync">
            <summary>
            Stop a job asynchronously
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.SuspendJob">
            <summary>
            Suspend a job
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.SuspendJobAsync">
            <summary>
            Asynchronously suspend a job
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.StopJob(System.Boolean,System.String)">
            <summary>
            Stop Job
            </summary>
            <param name="force">True to force stop</param>
            <param name="reason">Reason for forced stop</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.StopJob(System.Boolean,System.String,System.Boolean)">
            <summary>
            Stop Job
            </summary>
            <param name="force">True to force stop</param>
            <param name="reason">Reason for forced stop</param>
            <param name="suppressError">Suppress error for forced stop</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.StopJobAsync(System.Boolean,System.String)">
            <summary>
            Stop Job Asynchronously
            </summary>
            <param name="force">True to force stop</param>
            <param name="reason">Reason for forced stop</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.StopJobAsync(System.Boolean,System.String,System.Boolean)">
            <summary>
            Stop job asynchronously
            </summary>
            <param name="force">True to force stop</param>
            <param name="reason">Reason for forced stop</param>
            <param name="suppressError">Suppress error for forced stop</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.SuspendJob(System.Boolean,System.String)">
            <summary>
            Suspend Job
            </summary>
            <param name="force"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.SuspendJobAsync(System.Boolean,System.String)">
            <summary>
            Suspend Job Asynchronously
            </summary>
            <param name="force"></param>
            <param name="reason"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.ResumeJob">
            <summary>
            Resume a suspended job
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.ResumeJob(System.String)">
            <summary>
            Resume a suspended job
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.ResumeBookmark(System.Activities.Bookmark,System.Object)">
            <summary>
            ResumeBookmark
            </summary>
            <param name="bookmark"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.ResumeBookmark(System.Activities.Bookmark,System.Boolean,System.Management.Automation.PowerShellStreams{System.Management.Automation.PSObject,System.Management.Automation.PSObject})">
            <summary>
            ResumeBookmark
            </summary>
            <param name="bookmark"></param>
            <param name="supportDisconnectedStreams"></param>
            <param name="streams"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.ResumeBookmark(System.Activities.Bookmark,System.Boolean,System.Management.Automation.PowerShellStreams{System.Management.Automation.PSObject,System.Management.Automation.PSObject},System.Exception)">
            <summary>
            ResumeBookmark
            </summary>
            <param name="bookmark"></param>
            <param name="supportDisconnectedStreams"></param>
            <param name="streams"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.GetPersistableIdleAction(System.Collections.ObjectModel.ReadOnlyCollection{System.Activities.Hosting.BookmarkInfo},System.Boolean)">
            <summary>
            GetPersistableIdleAction
            </summary>
            <param name="bookmarks"></param>
            <param name="externalSuspendRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.ResumeJobAsync">
            <summary>
            Resume a suspended job asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.ResumeJobAsync(System.String)">
            <summary>
            Resume a suspended job asynchronously.
            </summary>
            <param name="label"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.UnblockJob">
            <summary>
            Unblock a blocked job
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.UnblockJobAsync">
            <summary>
            Unblock a blocked job asynchronously
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJob.CheckAndAddStateChangedEventHandler(System.EventHandler{System.Management.Automation.JobStateEventArgs},System.Management.Automation.JobState)">
            <summary>
            Check and add StateChanged event handler
            </summary>
            <param name="handler"></param>
            <param name="expectedState"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.Debugger">
            <summary>
            Job Debugger
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJob.IsAsync">
            <summary>
            True if job is synchronous and can be debugged.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter">
            <summary>
            Adapter that allows workflow instances to be exposed as jobs in PowerShell.
            NOTE: This class has been unsealed to allow extensibility for Opalis. Further
            thought is needed around the best way to enable reuse of this class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.ContainerParentJobRepository.GetKey(System.Management.Automation.ContainerParentJob)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.GetInstance">
            <summary>
            Gets the WorkflowJobSourceAdapter instance.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.GetJobManager">
            <summary>
            GetJobManager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.GetPSWorkflowRuntime">
            <summary>
            GetPSWorkflowRunTime
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.NewJob(System.Management.Automation.JobInvocationInfo)">
            <summary>
            Create a new job with the specified JobSpecification.
            </summary>
            <param name="specification">specification</param>
            <returns>job object</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.GetJobs">
            <summary>
            Get the list of jobs that are currently available in the workflow instance table.
            </summary>
            <returns>collection of job objects</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.GetJobsByName(System.String,System.Boolean)">
            <summary>
            Get list of jobs that matches the specified names
            </summary>
            <param name="name">names to match, can support
              wildcard if the store supports</param>
            <param name="recurse"></param>
            <returns>collection of jobs that match the specified
            criteria</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.GetJobsByCommand(System.String,System.Boolean)">
            <summary>
            Get list of jobs that run the specified command
            </summary>
            <param name="command">command to match</param>
            <param name="recurse"></param>
            <returns>collection of jobs that match the specified
            criteria</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.GetJobByInstanceId(System.Guid,System.Boolean)">
            <summary>
            Get list of jobs that has the specified id
            </summary>
            <param name="instanceId">Guid to match</param> 
            <param name="recurse"></param>
            <returns>job with the specified guid</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.GetJobBySessionId(System.Int32,System.Boolean)">
            <summary>
            Get job by session id.
            </summary>
            <param name="id">The session id.</param>
            <param name="recurse"></param>
            <returns>The returned job2 object.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.GetJobsByState(System.Management.Automation.JobState,System.Boolean)">
            <summary>
            Get list of jobs that are in the specified state
            </summary>
            <param name="state">state to match</param>
            <param name="recurse"></param>
            <returns>collection of jobs with the specified
            state</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.GetJobsByFilter(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Get list of jobs based on the adapter specific
            filter parameters
            </summary>
            <param name="filter">dictionary containing name value
              pairs for adapter specific filters</param>
            <param name="recurse"></param>
            <returns>collection of jobs that match the 
            specified criteria</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.RemoveJob(System.Management.Automation.Job2)">
            <summary>
            Remove a job from the store 
            </summary>
            <param name="job">job object to remove</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.SearchJobsOnV2Parameters(System.Collections.Generic.IEnumerable{System.Management.Automation.Job2},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Searches a list of jobs with a given set of filters for all
            the V2 search parameters. This function searches in a specific
            order so that a get call from an API returns without having
            to do much processing in terms of wildcard pattern matching
            </summary>
            <param name="jobsToSearch">incoming enumeration of jobs to
            search</param>
            <param name="filter">dictionary of filters to use as search
            criteria</param>
            <returns>narrowed down list of jobs that satisfy the filter
            criteria</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.OnWSManServerShuttingDownEventRaised(System.Object,System.EventArgs)">
            <summary>
            Handles the wsman server shutting down event.
            </summary>
            <param name="sender">sender of this event</param>
            <param name="e">arguments describing the event</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowJobSourceAdapter.ClearWorkflowTable">
            <summary>
            Called from tests to cleanup instance table
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowJobManager">
            <summary>
            Provides interface to upper layers of M3P for calling the Workflow core functionality.
            Throttles the number of jobs run simultaneously. Used to control the number of workflows that will execute simultaneously
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.Facility">
            <summary>
            The class name.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowJobManager._lastGcTime">
            <summary>
            this is set to a date in the past so that the first time
            GC happens correctly
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.WorkflowLimitBeforeGc">
            <summary>
            if these many workflows are run without a GC
            in between them, then we will force a GC
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowRuntime,System.Int32)">
            <summary>
            Construct a workflow manager
            </summary>
            <param name="runtime"></param>
            <param name="throttleLimit"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.Dispose">
            <summary>
            Disope implementation.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.Dispose(System.Boolean)">
            <summary>
            Disope implementation.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.LoadJob(Microsoft.PowerShell.Workflow.PSWorkflowId)">
            <summary>
            LoadJob
            </summary>
            <param name="storedInstanceId"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.NeedToStartServicingThread">
            <summary>
            Indicates whether the dedicated thread to start jobs is required
            The thread needs to started only the first time
            </summary>
            <remarks>This property helps in delay creation of
            the thread</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.PerformWSManPluginReportCompletion">
            <summary>
            PerformWSManPluginReportCompletion
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.OnWSManServerActiveSessionsChangedEvent(System.Object,System.Management.Automation.Remoting.WSMan.ActiveSessionsChangedEventArgs)">
            <summary>
            Handles the wsman server shutting down event.
            </summary>
            <param name="sender">sender of this event</param>
            <param name="eventArgs">arguments describing the event</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.RunGarbageCollection(System.Boolean)">
            <summary>
            Contains the logic for running garbage collection
            </summary>
            <param name="force">if true, time check will not be
            done and a forced garbage collection will take place</param>
            <remarks>This method ensures that garbage collection
            runs from only one thread at a time</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.SubmitOperation(System.Management.Automation.Job2,System.Action{System.Object},System.Object,System.Management.Automation.JobState)">
            <summary>
            SubmitOperation
            </summary>
            <param name="job"></param>
            <param name="operationHandler"></param>
            <param name="state"></param>
            <param name="expectedState"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.CreateJob(System.Guid,System.Activities.Activity,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a workflow job by providing the activity-tree representing the workflow.
            </summary>
            <param name="jobInstanceId"></param>
            <param name="workflow"></param>
            <param name="command"></param>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.CreateJob(System.Guid,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a workflow job by providing the xaml representing the workflow.
            </summary>
            <param name="jobInstanceId"></param>
            <param name="workflowXaml"></param>
            <param name="command"></param>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.CreateJob(System.Guid,System.Activities.Activity,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a workflow job by providing the activity-tree representing the workflow.
            </summary>
            <param name="jobInstanceId"></param>
            <param name="workflow"></param>
            <param name="command"></param>
            <param name="name"></param>
            <param name="parameters"></param>
            <param name="creationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.CreateJob(System.Guid,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Create a workflow job by providing the xaml representing the workflow.
            </summary>
            <param name="jobInstanceId"></param>
            <param name="workflowXaml"></param>
            <param name="command"></param>
            <param name="name"></param>
            <param name="parameters"></param>
            <param name="creationContext"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.CreateJob(System.Management.Automation.JobInvocationInfo,System.Activities.Activity)">
            <summary>
            CreateJob
            </summary>
            <param name="jobInvocationInfo"></param>
            <param name="activity"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.ShutdownWorkflowManager(System.Int32)">
            <summary>
            ShutdownWorkflowManager is responsible suspending all the workflow and if suspend doesn't happen within timeout then calling the force suspend.
            </summary>
            <param name="timeout">The shutdown timeout in milliseconds.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.GetJob(System.Guid)">
            <summary>
            Returns the workflow job currently loaded in memory with provided id.
            This function DOES NOT try load the job from the store if not found in memory
            </summary>
            <param name="instanceId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.GetJobs">
            <summary>
            Loads and returns all workflow jobs.
            </summary>
            <returns>Returns the collection workflow jobs.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.GetJobs(Microsoft.PowerShell.Workflow.WorkflowFilterTypes,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Loads and returns all workflow jobs based on provided filters.
            </summary>
            <param name="type">Represent which type of data needs to be used to apply filter.</param>
            <param name="filters">Filters represents the key value pair of conditions.</param>
            <returns>Returns the collection of workflow instances.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.GetJobs(System.Collections.Generic.ICollection{Microsoft.PowerShell.Workflow.PSWorkflowJob},Microsoft.PowerShell.Workflow.WorkflowFilterTypes,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Loads and returns all workflow jobs based on provided filters.
            </summary>
            <param name="searchList">PSWorkflowJob search list</param>
            <param name="type">Represent which type of data needs to be used to apply filter.</param>
            <param name="filters">Filters represents the key value pair of conditions.</param>
            <returns>Returns the collection of workflow instances.</returns>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowJobManager._wfJobTable">
            <summary>
            The dictionary of workflow instances.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.AddJob(Microsoft.PowerShell.Workflow.PSWorkflowJob)">
            <summary>
            Add a job to the manager.
            </summary>
            <param name="job"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.Get(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Retrieves job from the manager.
            </summary>
            <param name="jobInstanceId">The job instance Id.</param>
            <param name="workflowInstanceId">The workflow instance Id.</param>
            <returns>Returns the job.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.RemoveJob(System.Guid)">
            <summary>
            Remove the workflow with provided job instance id.
            </summary>
            <param name="instanceId">The job instance id.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.UnloadJob(System.Guid)">
            <summary>
            Unload/Forget the workflow with provided job instance id.
            This method is used to dispose unloaded idle workflows.
            </summary>
            <param name="instanceId">The job instance id.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowJobManager.UnloadAllJobs">
            <summary>
            UnloadAllJobs
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.WorkflowFilterTypes">
            <summary>
            Provides list of workflow filter types.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowFilterTypes.None">
            <summary>
            Empty flags - not used, would indicate to search no collections.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowFilterTypes.JobMetadata">
            <summary>
            Filters will be applicable to job metadata collection.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowFilterTypes.PrivateMetadata">
            <summary>
            Filters will be applicable to caller private metadata collection.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowFilterTypes.WorkflowSpecificParameters">
            <summary>
            Filters will be applicable to workflow specific parameters defined by the workflow author.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowFilterTypes.CommonParameters">
            <summary>
            Filters will be applicable to common parameters on all workflows.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowFilterTypes.All">
            <summary>
            Use all filters.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.WorkflowInstanceState">
            <summary>
            Possible states of workflow instance.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceState.NotStarted">
            <summary>
            Not initialized with any workflow yet.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceState.Loaded">
            <summary>
            Workflow execution is loaded but not yet started.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceState.Executing">
            <summary>
            Workflow is currently executing.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceState.CompletedAndClosed">
            <summary>
            Workflow execution is completed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceState.Faulted">
            <summary>
            Faulted state, once the workflow execution is completed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceState.Canceled">
            <summary>
            Canceled state, once the workflow execution is completed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceState.Aborted">
            <summary>
            Aborted state, once the workflow execution is completed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceState.UnhandledExceptionAndTermination">
            <summary>
            Un-handled exception and termination state, once the workflow execution is completed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceState.Unloaded">
            <summary>
            Workflow is currently unloaded.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowInstanceState.Unknown">
            <summary>
            Workflow is currently unknown.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.WorkflowStatusEventArgs">
            <summary>
            Provides an event definition for the status of a workflow.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowStatusEventArgs.id">
            <summary>
            The instance id.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowStatusEventArgs.state">
            <summary>
            The workflow instance state.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowStatusEventArgs.unhandledException">
            <summary>
            The workflow unhandled exception.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowStatusEventArgs.#ctor(System.Guid,Microsoft.PowerShell.Workflow.WorkflowInstanceState,System.Exception)">
            <summary>
            Constructor with instance id and state.
            </summary>
            <param name="id">The workflow Id.</param>
            <param name="state">The state of workflow</param>
            <param name="unhandledException">The unhandled exception, occurs when streams are closed.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowStatusEventArgs.Id">
            <summary>
            Gets instance id.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowStatusEventArgs.State">
            <summary>
            Gets instance state.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowStatusEventArgs.UnhandledException">
            <summary>
            Gets unhandled exception.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.Validation">
            <summary>
            Contains members that allow for controlling the PowerShell workflow
            engine validation mechanism.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.Validation.CustomHandler">
            <summary>
            The custom validator delegate to use in this engine
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowValidator">
            <summary>
            Validate all the activities in the workflow to check if they are allowed or not.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowValidator.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider)">
            <summary>
            PSWorkflowValidator
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowValidator.ValidateWorkflow(System.Activities.Activity,System.String)">
            <summary>
            Validate the workflow, if it is using the allowed activities.
            </summary>
            <param name="workflow">The workflow, which needs to be validated.</param>
            <param name="runtimeAssembly">The additional runtime assembly, which is needed in validation process.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation">
            <summary>
            This class is responsible for compiling dependent workflows.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.Template_Project">
            <summary>
            The template project which is used for default project values.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.ProjectName">
            <summary>
            The runtime generated project name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.ProjectFolderPath">
            <summary>
            The runtime generated Project folder path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.ProjectFilePath">
            <summary>
            The runtime generated Project file path (.csprj file).
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.BuildLogPath">
            <summary>
            The runtime generated build log path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.AssemblyName">
            <summary>
            The runtime gnerated assembly name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.AssemblyPath">
            <summary>
            The runtime generated assembly path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.BuildReturnedCode">
            <summary>
            The returned code of project.Build.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.Compile(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Compiling the workflow xamls into the assembly.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowRuntimeCompilation.IsRunningOnProcessorArchitectureARM">
            <summary>
            Return true/false to indicate whether the processor architecture is ARM
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowExtensions">
            <summary>
            Contains members that allow the addition of custom extension to 
            the PowerShell workflow engine.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowExtensions.CustomHandler">
            <summary>
            The custom workflow extensions delegate to use in this engine
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowTrackingParticipant">
            <summary>
            Implementing the workflow tracking participant, this will established with communication between activities and hosting
            engine to perform additional task like persistence and logging etc.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTrackingParticipant.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTrackingParticipant.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowDebugger)">
            <summary>
            Constructor.
            </summary>
            <param name="debugger">PSWorkflowDebugger</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTrackingParticipant.Track(System.Activities.Tracking.TrackingRecord,System.TimeSpan)">
            <summary>
            Retreive each type of tracking record and perform the corresponding fucntionality.
            </summary>
            <param name="record">Represents the tracking record.</param>
            <param name="timeout">Time out for the tracking to be completed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTrackingParticipant.ProcessWorkflowInstanceRecord(System.Activities.Tracking.WorkflowInstanceRecord)">
            <summary>
            Process the workflow instance record.
            </summary>
            <param name="record">Record representing workflow instance record.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTrackingParticipant.ProcessActivityStateRecord(System.Activities.Tracking.ActivityStateRecord)">
            <summary>
            process the activity state record.
            </summary>
            <param name="record">Record representing activity state record.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTrackingParticipant.ProcessCustomTrackingRecord(System.Activities.Tracking.CustomTrackingRecord)">
            <summary>
            Process the custom tracking record. This record will contain the persistence detail.
            </summary>
            <param name="record">Record representing custom tracking record.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowContext">
            <summary>
            Define all the metadatas.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowContext._workflowParameters">
            <summary>
            The parameters, which need to be passed to the workflow engine.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowContext._psWorkflowCommonParameters">
            <summary>
            The ubiquitous parameters, which are also passed to the engine.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowContext.jobMetadata">
            <summary>
            The metadata, which contains all the information related to job and client like, job-id, connnection-id and application-id etc.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowContext.privateMetadata">
            <summary>
            The metadata, which is specific to the caller and doesn't contain any information related to workflow execution.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowContext.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowContext.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Workflow metadatas constructor.
            </summary>
            <param name="workflowParameters">The parameters, which need to be passed to the workflow engine.</param>
            <param name="workflowCommonParameters">The ubiquitous parameters, which are also passed to the engine.</param>
            <param name="jobMetadata">The metadata, which contains all the information related to job and client like, job-id, connnection-id and application-id etc.</param>
            <param name="privateMetadata">The metadata, which is specific to the caller and doesn't contain any information related to workflow execution.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowContext.WorkflowParameters">
            <summary>
            Gets the input to workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowContext.PSWorkflowCommonParameters">
            <summary>
            Gets the input to workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowContext.JobMetadata">
            <summary>
            Gets the input to workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowContext.PrivateMetadata">
            <summary>
            Gets the input to workflow.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowDefinition">
            <summary>
            Define all the metadatas.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDefinition.#ctor(System.Activities.Activity,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Workflow instance constructor.
            </summary>
            <param name="workflow">The workflow definition, represented in object-graph.</param>
            <param name="workflowXaml">The workflow xaml definition.</param>
            <param name="runtimeAssemblyPath">The path to the runtime assembly.</param>
            <param name="requiredAssemblies">Required assemblies paths</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowDefinition.#ctor(System.Activities.Activity,System.String,System.String)">
            <summary>
            Workflow instance constructor.
            </summary>
            <param name="workflow">The workflow definition, represented in object-graph.</param>
            <param name="workflowXaml">The workflow xaml definition.</param>
            <param name="runtimeAssemblyPath">The path to the runtime assembly.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowDefinition.Workflow">
            <summary>
            Gets sets the workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowDefinition.WorkflowXaml">
            <summary>
            Gets sets the workflow xaml.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowDefinition.RuntimeAssemblyPath">
            <summary>
            Gets sets the runtime assembly path.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowDefinition.RequiredAssemblies">
            <summary>
            Gets sets the required assemblies.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.WorkflowTimerType">
            <summary>
            Workflow timer types.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSTimer.Dispose(System.Boolean)">
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowTimer">
            <summary>
            Define all the workflow related timers.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTimer.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowInstance)">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTimer.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowInstance,System.Object)">
            <summary>
            Creates a workflow timer for a workflow instance based on a BLOB
            </summary>
            <param name="instance"></param>
            <param name="deserializedTimers"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTimer.GetSerializedData">
            <summary>
            Retrieves timers as a BLOB
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTimer.Dispose">
            <summary>
            Disope implementation.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowTimer.Dispose(System.Boolean)">
            <summary>
            Protected virtual implementation of Dispose.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowPerformanceCounterSetInfo">
            <summary>
            PSWorkflowPerformanceCounterSetInfo class contains
            the data essential to create an
            instance of PSCounterSetRegistrar for monitoring
            workflow performance
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowPerformanceCounterSetInfo.CounterSetId">
            <summary>
            If some other assemblies (e.g. Microsoft.PowerShell.Workflow.Activities) need
            access to the counters, then they would need to specify the CounterSetId,
            alongwith the counterId. Hence, CounterSetId is public.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowPerformanceCounterIds">
            <summary>
            PSWorkflowPerformanceCounterIds enumerates the 
            list of valid performance counter ids related to Powershell Workflow.
            NOTE: The prime reason for making this not an enum are as follows:
            (1) Everytime the enum will have to be typecasted to an int before invoking any
            of the Performance Counters API.
            (2) In case of M3P, its possible that some of the perf counters might be updated
            by ActivityBase assembly, in which such perf counter ids might need to have
            public access modifier, instead of internal.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowUtils.CompareConnectionUri(System.Management.Automation.Runspaces.WSManConnectionInfo,System.Management.Automation.Runspaces.WSManConnectionInfo)">
            <summary>
            CompareConnectionUri compares two connection URIs
            by doing a comparison of elements.
            </summary>
            <param name="connectionInfo1">Connection info 1</param>
            <param name="connectionInfo2">Connection info 2</param>
            <returns>True if they match else false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowUtils.CompareShellUri(System.String,System.String)">
            <summary>
            CompareShellUri compares two shell URIs
            by doing a string of elements.
            </summary>
            <param name="shellUri1">Shell Uri 1</param>
            <param name="shellUri2">Shell Uri 2</param>
            <returns>True if they match else false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowUtils.CompareAuthentication(System.Management.Automation.Runspaces.AuthenticationMechanism,System.Management.Automation.Runspaces.AuthenticationMechanism)">
            <summary>
            CompareAuthentication compares two authentication mechanisms.
            </summary>
            <param name="authentication1">Authentication mechanism 1</param>
            <param name="authentication2">Authentication mechanism 2</param>
            <returns>True if they match else false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowUtils.CompareCredential(System.Management.Automation.PSCredential,System.Management.Automation.PSCredential)">
            <summary>
            CompareCredentials compares two PSCredential credentials
            by doing a username and password comparison .
            </summary>
            <param name="credential1">Credential 1</param>
            <param name="credential2">Credential 2</param>
            <returns>True if they match else false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowUtils.ComparePassword(System.Security.SecureString,System.Security.SecureString)">
            <summary>
            ComparePassword uses native functions to perform a string match on two SecureString passwords
            by doing a strict byte level comparison is done on the two strings.
            The use of ReadByte allows the function to execute without marking the assembly as unsafe.
            </summary>
            <param name="secureString1">Password 1</param>
            <param name="secureString2">Password 2</param>
            <returns>True if they match else false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowUtils.CompareCertificateThumbprint(System.String,System.String)">
            <summary>
            CompareCertificateThumbprint compares two certificate thumbprints
            by doing a string comparison.
            </summary>
            <param name="certificateThumbprint1">Certificate Thumbprint 1</param>
            <param name="certificateThumbprint2">Certificate Thumbprint 2</param>
            <returns>True if they match else false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowUtils.CompareProxySettings(System.Management.Automation.Runspaces.WSManConnectionInfo,System.Management.Automation.Runspaces.WSManConnectionInfo)">
            <summary>
            CompareProxySettings compares the proxy settings for two wsman connections 
            by doing a comparison of elements.
            </summary>
            <param name="connectionInfo1">Connection info 1</param>
            <param name="connectionInfo2">Connection info 2</param>
            <returns>True if they match else false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.WorkflowUtils.CompareOtherWSManSettings(System.Management.Automation.Runspaces.WSManConnectionInfo,System.Management.Automation.Runspaces.WSManConnectionInfo)">
            <summary>
            CompareOtherWSManSettings compares the rest of the wsman settings for two wsman connections 
            by doing a comparison of elements.
            </summary>
            <param name="connectionInfo1">Connection info 1</param>
            <param name="connectionInfo2">Connection info 2</param>
            <returns>True if they match else false.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.FileStoreAsyncResult">
            <summary>
            A generic base class for IAsyncResult implementations
            that wraps a ManualResetEvent.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.TypedAsyncResult`1">
            <summary>
            A strongly typed AsyncResult.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.TypedCompletedAsyncResult`1">
            <summary>
            A strongly typed AsyncResult that completes as soon as it is instantiated.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore">
            <summary>
            This class implements the functionality for storing the streams data on to the disk.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.GetAllWorkflowInstanceIds">
            <summary>
            Returns all Workflow guids.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider,Microsoft.PowerShell.Workflow.PSWorkflowInstance)">
            <summary>
            PSWorkflowFileInstanceStore ctor
            </summary>
            <param name="configuration"></param>
            <param name="instance"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.CreateInstanceStore">
            <summary>
            CreateInstanceStore
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.CreatePersistenceIOParticipant">
            <summary>
            CreatePersistenceIOParticipant
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.CallDoSave(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
             To be called from test code only.
            </summary>
            <param name="components"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.DoSave(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            DoSave
            </summary>
            <param name="components"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.DoDelete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.CallDoLoad(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            To be called from test code ONLY.
            </summary>
            <param name="componentTypes"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.DoLoad(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            DoLoad
            </summary>
            <param name="componentTypes"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.Encrypt(System.ArraySegment{System.Byte})">
            <summary>
            Encrypt
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.Decrypt(System.ArraySegment{System.Byte})">
            <summary>
            Decrypt
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowFileInstanceStore.SerializeAndSaveToFile(System.Object,System.String)">
            <summary>
            Serialize an object and directly write to the file
            </summary>
            <param name="source">object to serialize</param>
            <param name="filePath">file to write to</param>
            <returns>number of bytes written</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.InstanceStoreCryptography">
            <summary>
            This class implements the encrypt and decrypt functionality.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.InstanceStoreCryptography.Tracer">
            <summary>
            Tracer initialization.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.InstanceStoreCryptography.s_aditionalEntropy">
            <summary>
            The additional entroy for security 'POWERSHELLWORKFLOW'
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.InstanceStoreCryptography.Protect(System.Byte[])">
            <summary>
            Protect the data.
            </summary>
            <param name="data">The input data for encryption.</param>
            <returns>Returns encrypted data.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.InstanceStoreCryptography.Unprotect(System.Byte[])">
            <summary>
            Unprotect data the encrypted data.
            </summary>
            <param name="data">Encrypted data.</param>
            <returns>Returns decrypted data.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.InstanceStorePermission">
            <summary>
            This class implements the encrypt and decrypt functionality.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionAsyncResult.SetAsCompleted(System.Exception)">
            <summary>
            this method is not thread safe
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.ConnectionAsyncResult.IsCompleted">
            <summary>
            Whether the operation reprensented by this method is 
            completed
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.ConnectionAsyncResult.AsyncWaitHandle">
            <summary>
            Wait Handle for the operation
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.ConnectionAsyncResult.AsyncState">
            <summary>
            Optional user specified state
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.ConnectionAsyncResult.CompletedSynchronously">
            <summary>
            Whether this operation completed synchronously
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController">
            <summary>
            Activity Host Manager which will spawn a set of activity
            host processes until all of them are used after which
            it will start queueing requests
            </summary>
            <remarks>Whether this class needs to remain public should be 
            evaluated</remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController._hostProcesses">
            <summary>
            Stack of available host processes
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController._requests">
            <summary>
            Queue of requests
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController._failedRequests">
            <summary>
            List of requests that need to be invoked again due to process crash
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController.Reset">
            <summary>
            This is a helper method which should only be called
            from test code to reset stuff
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController.RunPowerShellInActivityHostWorker(System.Object)">
            <summary>
            Handler method which runs a specific command in the specified process
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController.CheckAndStartServicingThread">
            <summary>
            Checks to see if a thread is servicing requests. If not
            starts one
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController.ServiceRequests(System.Object)">
            <summary>
            Method which performs the actual servicing of requests
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController.SafelyDisposeProcess(Microsoft.PowerShell.Workflow.ActivityHostProcess)">
            <summary>
            Unregisters all wait handles and disposes a process
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController.RunInProcess(Microsoft.PowerShell.Workflow.ActivityInvoker,Microsoft.PowerShell.Workflow.ActivityHostProcess)">
            <summary>
            Method called by servicing thread. This method will run the command in the 
            specified process on a separate thread
            </summary>
            <param name="invoker"></param>
            <param name="process"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController.BeginInvokePowerShell(System.Management.Automation.PowerShell,System.Management.Automation.PSDataCollection{System.Management.Automation.PSObject},System.Management.Automation.PSDataCollection{System.Management.Automation.PSObject},Microsoft.PowerShell.Activities.PSActivityEnvironment,System.AsyncCallback,System.Object)">
            <summary>
            Begin invocation of command specified in activity
            </summary>
            <param name="command">pipeline of command to execute</param>
            <param name="input">input collection</param>
            <param name="output">output collection</param>
            <param name="policy">policy to use for the activity</param>
            <param name="callback">optional callback</param>
            <param name="state">optional caller specified state</param>
            <returns>IAsyncResult</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController.EndInvokePowerShell(System.IAsyncResult)">
            <summary>
            Block until operation is complete on the current thread
            </summary>
            <param name="asyncResult">IAsyncResult to block on</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSOutOfProcessActivityController.CancelInvokePowerShell(System.IAsyncResult)">
            <summary>
            Cancels an already started execution
            </summary>
            <param name="asyncResult">async result to cancel</param>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider">
            <summary>
            PSWorkflowConfigurationProvider 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.Runtime">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.Update(System.String,System.String,Microsoft.PowerShell.Commands.PSWorkflowExecutionOption,Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider)">
            <summary>
            Using optionName and optionValue updates the current object
            </summary>
            <param name="optionName"></param>
            <param name="value"></param>
             <param name="target"></param>
             <param name="configuration"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.#ctor(System.String,System.String)">
            <summary>
            PSWorkflowConfigurationProvider
            </summary>
            <param name="applicationPrivateData"></param>
            <param name="configProviderId"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.Populate(System.String,System.String)">
            <summary>
            Populate the global configuration object with
            information from the configuration xml
            </summary>
            <param name="applicationPrivateData">private data
            associated with the endpoint</param>
            <param name="configProviderId"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.CreatePSActivityHostController">
            <summary>
            CreatePSActivityHostController
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.CreatePSWorkflowInstance(Microsoft.PowerShell.Workflow.PSWorkflowDefinition,Microsoft.PowerShell.Workflow.PSWorkflowContext,System.Management.Automation.PSDataCollection{System.Management.Automation.PSObject},Microsoft.PowerShell.Workflow.PSWorkflowJob)">
            <summary>
            CreatePSWorkflowInstance
            </summary>
            <param name="definition"></param>
            <param name="metadata"></param>
            <param name="pipelineInput"></param>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.CreatePSWorkflowInstance(Microsoft.PowerShell.Workflow.PSWorkflowId)">
            <summary>
            CreatePSWorkflowInstance
            </summary>
            <param name="instanceId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.CreatePSWorkflowInstanceStore(Microsoft.PowerShell.Workflow.PSWorkflowInstance)">
            <summary>
            CreatePSWorkflowInstanceStore
            </summary>
            <param name="workflowInstance"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.CreateWorkflowExtensions">
            <summary>
            CreateWorkflowExtensions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.CreateWorkflowExtensionCreationFunctions``1">
            <summary>
            CreateWorkflowExtensionCreationFunctions
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.CreateRemoteRunspaceProvider">
            <summary>
            CreateRemoteRunspaceProvider
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.CreateLocalRunspaceProvider(System.Boolean)">
            <summary>
            Local runspace provider
            </summary>
            <param name="isUnbounded"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.CurrentUserIdentity">
            <summary>
            CurrentUserIdentity returns the current user 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.ResetPopulate">
            <summary>
            To be called only by test code
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.ConfigProviderId">
            <summary>
            ConfigProviderId
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.PersistencePath">
            <summary>
            PersistencePath
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.MaxPersistenceStoreSizeGB">
            <summary>
            MaxPersistenceStoreSizeGB
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.PersistWithEncryption">
            <summary>
            PersistWithEncryption
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.MaxRunningWorkflows">
            <summary>
            MaxRunningWorkflows
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.AllowedActivity">
            <summary>
            AllowedActivity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.OutOfProcessActivity">
            <summary>
            OutOfProcActivity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.EnableValidation">
            <summary>
            EnableValidation
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.MaxDisconnectedSessions">
            <summary>
            MaxDisconnectedSessions
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.MaxConnectedSessions">
            <summary>
            MaxConnectedSessions
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.MaxSessionsPerWorkflow">
            <summary>
            MaxSessionsPerWorkflow
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.MaxSessionsPerRemoteNode">
            <summary>
            MaxSessionsPerRemoteNode
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.MaxActivityProcesses">
            <summary>
            MaxActivityProcesses
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.PSWorkflowApplicationPersistUnloadTimeoutSec">
            <summary>
            WorkflowApplicationPersistUnloadTimeoutSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.WSManPluginReportCompletionOnZeroActiveSessionsWaitIntervalMSec">
            <summary>
            WSManPluginReportCompletionOnZeroActiveSessionsWaitIntervalMSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.ActivitiesCacheCleanupIntervalMSec">
            <summary>
            ActivitiesCacheCleanupIntervalMSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.LanguageMode">
            <summary>
            Local Machine Runspace Language Mode
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.ActivityProcessIdleTimeoutSec">
            <summary>
            ActivityProcessIdleTimeOutSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.RemoteNodeSessionIdleTimeoutSec">
            <summary>
            RemoteNodeSessionIdleTimeOutSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.SessionThrottleLimit">
            <summary>
            SessionThrottleLimit
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.WorkflowShutdownTimeoutMSec">
            <summary>
            WorkflowShutdownTimeoutMSec - the maximum time allowed to suspend the workflows before aborting them.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.MaxInProcRunspaces">
            <summary>
            MaxInProcRunspaces
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider.GetActivityRunMode(System.Activities.Activity)">
            <summary>
            Get Activity Run Mode InPocess or Out of process
            </summary>
            <param name="activity"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.ActivityHostProcess">
            <summary>
            Encapsulates an out of process activity host
            </summary>
            <remarks>This class is not thread safe. Caller has to 
            ensure thread safety of accessing internal properties</remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ActivityHostProcess.TimeOut">
            <summary>
            This the period of time for which the process will
            remain inactive. Afterwards it will be killed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ActivityHostProcess._useJobIPCProcess">
            <summary>
            Use this flag to flip between IPC process and
            WSMan process in localhost
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ActivityHostProcess.SetVariableFunction">
            <summary>
            Creating a _PSSetVariable to set multiple variables in a single call --> PERF
            Naming it _PSSetVariable to avoid name collision with Set-Variable cmdlet
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.#cctor">
            <summary>
            Initialize a connection info object in the static constructor
            It can be reused for all connections
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.GetRunspace(System.Boolean)">
            <summary>
            Get the runspace corresponding to this process
            </summary>
            <param name="createNew">indicates if a new runspace
            needs to be created</param>
            <returns>runspace object</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.CreateRunspace">
            <summary>
            Depending on the option return an Out-of-proc
            or remoting runspace on localhost
            </summary>
            <returns>runspace object for use</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.OpenRunspace(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Opens the specified runspace. If there are any errors in
            opening the runspace, the method just eats them so that
            an unhandled exception in the background thread in which this 
            method is invoked does not lead to a process crash
            </summary>
            <param name="runspace">runspace to open</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.ImportModulesFromPolicy(System.Management.Automation.Runspaces.Runspace,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Import all the specified modules in the specified runspace
            </summary>
            <param name="runspace">runspace in which to import the modules</param>
            <param name="modules">collection of modules to import</param>
            <returns>true if setting up of runspace from policy succeeded</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.SetVariablesFromPolicy(System.Management.Automation.Runspaces.Runspace,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Set the specified variables in the runspace
            </summary>
            <param name="runspace">runspace in which the variables need
            to be set</param>
            <param name="variables">collection of variables that need to be set</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.SetBusy">
            <summary>
            Set the busy flag since the process is being used.
            Stop the idle timer
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.ResetBusy">
            <summary>
            Reset the busy flag and start the idle timer
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.TimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Idle timeout has occured. If the runspace is not being used
            just close it
            </summary>
            <param name="sender">sender of this event</param>
            <param name="e">unused</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.HandleTransportError(System.Management.Automation.Remoting.PSRemotingTransportException,System.Boolean)">
            <summary>
            Handles a transport error since it is most likely that
            the process crash
            </summary>
            <param name="transportException">the transport exception
            that was raised</param>
            <param name="onSetup">true indicates that the crash was
            encountered when setting up the process and not when the
            command was run</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.PrepareAndRun(Microsoft.PowerShell.Workflow.ActivityInvoker)">
            <summary>
            Prepare the environment based on the policy and run the powershell
            </summary>
            <param name="invoker"></param>
            <remarks>It is assumed that the caller of this method will spawn appropriate
            thread and so it is fine for us to call the callback on the same thread</remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.ActivityHostProcess.Busy">
            <summary>
            If the process represented by this object is busy
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.ActivityHostProcess.MarkForRemoval">
            <summary>
            Indicates that the associated process crashed and this object
            needs to be removed by ActivityHostManager
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.Dispose">
            <summary>
            Dipose 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ActivityHostProcess.Dispose(System.Boolean)">
            <summary>
            dispose of managed resources
            </summary>
            <param name="disposing">true if being disposed</param>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowRuntime">
            <summary>
            PowerShell Workflow host runtime.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowRuntime.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowRuntime.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowConfigurationProvider)">
            <summary>
            Constructs runtime based on configuration
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowRuntime.Dispose">
            <summary>
            Disope implementation.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowRuntime.Dispose(System.Boolean)">
            <summary>
            Disope implementation.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowRuntime.Configuration">
            <summary>
            The runtime configuration.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowRuntime.JobManager">
            <summary>
            JobManager
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowRuntime.PSActivityHostController">
            <summary>
            PSActivityHostController (PSWorkflowHost)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowRuntime.RemoteRunspaceProvider">
            <summary>
            RemoteRunspaceProvider (PSWorkflowHost)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowRuntime.LocalRunspaceProvider">
            <summary>
            LocalRunspaceProvider (PSWorkflowHost)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowRuntime.UnboundedLocalRunspaceProvider">
            <summary>
            The provider which will supply an unbounded number of
            runspaces - to be used in PowerShell value
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowSessionConfiguration">
            <summary>
            Configuration for the M3P endpoint
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowSessionConfiguration.IsWorkflowTypeEndpoint">
            <summary>
            IsWorkflowTypeEndpoint
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowSessionConfiguration.GetInitialSessionState(System.Management.Automation.Remoting.PSSenderInfo)">
            <summary>
            
            </summary>
            <param name="senderInfo"></param>
            <exception cref="T:System.NotImplementedException"></exception>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowSessionConfiguration.GetInitialSessionState(System.Management.Automation.Remoting.PSSessionConfigurationData,System.Management.Automation.Remoting.PSSenderInfo,System.String)">
            <summary>
            
            </summary>
            <param name="sessionConfigurationData"></param>
            <param name="senderInfo"></param>
            <param name="configProviderId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.Connection">
            <summary>
            class the contains a remote connection (runspace) and associated
            data for managing the same
            </summary>
            <remarks>the only reason this class has an internal scope is for
            test purposes. Else this can be a private class inside 
            connection manager</remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.Connection._retryInterval">
            <summary>
            retry interval cannot be 0, so initial value is 1
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.GetRunspaceAsyncResult">
            <summary>
            AsyncResult object returned by ConnectionManager
            </summary>
            <remarks>the only reason this class has an internal scope is for
            test purposes. Else this can be a private class inside 
            connection manager</remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._servicingThreadRelease">
            <summary>
            The servicing thread will release control of processing and the timer
            thread will take control and process based on this wait handle
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._timerThreadRelease">
            <summary>
            The timer thread will release control of processing and the servicing thread
            will take control and process based on this wait handle
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._pendingRequests">
            <summary>
            This list is assumed to accessed by only the servicing thread and
            hence is not designed to be thread safe
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._connectedSessionCount">
            <summary>
            number of sessions in the connected state
            </summary>
            <remarks>this is made static in the interest of time
            should not be static</remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._disconnectedSessionCount">
            <summary>
            number of sessions in the disconnected state
            </summary>
            <remarks>this is made static in the interest of time
            should not be static</remarks>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._checkForDisconnect">
            <summary>
            if we need to check whether runspaces need to be
            disconnected
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._timerMap">
            <summary>
            Map of timers for each machine
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.GetRunspace(System.Management.Automation.Runspaces.WSManConnectionInfo,System.UInt32,System.UInt32)">
            <summary>
            Get runspace for the specified connection info to be
            used for running commands
            </summary>
            <param name="connectionInfo">connection info to use</param>
            <param name="retryCount">retry count </param>
            <param name="retryInterval">retry interval in ms</param>
            <returns>remote runspace to use</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.BeginGetRunspace(System.Management.Automation.Runspaces.WSManConnectionInfo,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <summary>
            Begin for obtaining a runspace for the specified ConnectionInfo
            </summary>
            <param name="connectionInfo">connection info to be used for remote connections</param>
            <param name="retryCount">number of times to retry</param>
            <param name="callback">optional user defined callback</param>
            <param name="state">optional user specified state</param>
            <param name="retryInterval">time in milliseconds before the next retry has to be attempted</param>
            <returns>async result</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.EndGetRunspace(System.IAsyncResult)">
            <summary>
            End for obtaining a runspace for the specified connection info
            </summary>
            <param name="asyncResult">async result to end on</param>
            <returns>remote runspace to invoke commands on</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.ReleaseRunspace(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Release the runspace once the activity is done using the same
            </summary>
            <param name="runspace">runspace to release</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.RequestCleanup(System.Management.Automation.Runspaces.WSManConnectionInfo,System.Threading.WaitCallback,System.Object)">
             <summary>
             Request a cleanup to the destination specified in the
             connection info. This means no runspaces will be held
             to the specified connection info.
             </summary>
             <param name="connectionInfo">connection info to which
             cleanup is desired</param>
            <param name="callback">callback to invoke</param>
             <param name="state">caller specified state</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.IsDisconnectedByRunspaceProvider(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Checks to see if the provider intentionally disconnected a runspace
            or it went into disconnected state due to network issues
            </summary>
            <param name="runspace">runspace that needs to be checked</param>
            <returns>true - when intentionally disconnected
                     false - disconnected due to network issues</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.HandleTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Handle the idle timer event
            </summary>
            <param name="sender">unused</param>
            <param name="e">unused</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.CheckAndStartConnectionServicingThread">
            <summary>
            Checks to see if a thread is already servicing and if not starts one
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.CheckAndStartCallbackServicingThread">
            <summary>
            Checks to see if a thread is already servicing callbacks 
            and if not starts one
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.ServiceCallbacks(System.Object)">
            <summary>
            Method that services the callbacks for all
            successfully assigned runspaces
            </summary>
            <param name="state">unused</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.ServiceRequests(System.Object)">
            <summary>
            Method that contains the core servicing logic
            </summary>
            <param name="state">not used</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.ServiceOneRequest(Microsoft.PowerShell.Workflow.ConnectionManager.RequestInfo)">
            <summary>
            Services one single request
            </summary>
            <param name="requestInfo">request to service</param>
            <returns>true, if successfully serviced, false otherwise</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.SafelyReturnFromServicing">
            <summary>
            Do everything required so that servicing thread can return
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.NeedToReturnFromServicing">
            <summary>
            Check if the servicing thread need to stop processing requests
            </summary>
            <returns>true if processing needs to stop</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.AssignConnection(Microsoft.PowerShell.Workflow.ConnectionManager.RequestInfo,Microsoft.PowerShell.Workflow.Connection)">
            <summary>
            Service the request using the available connection
            </summary>
            <param name="requestInfo">request to service</param>
            <param name="connection">connection to use for servicing</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.GetConnectionForRunspace(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Find the connection object given a runspace
            </summary>
            <param name="runspace">runspace whose connection
            needs to be found</param>
            <returns>Connection if found, null otherwise</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.CheckAndStartCleanupThread">
            <summary>
            Check and start a method which will do cleanups to
            the specified computer
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.ServiceCleanupRequests(System.Object)">
            <summary>
            Worker method for servicing cleanups to requested computers
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.HandleCloseOperationComplete(System.Object,System.EventArgs)">
            <summary>
            Handles OperationComplete of close operations i.e
            when connections to a specified computer is closed
            </summary>
            <param name="sender">the CloseOperation object
            that initiated this event</param>
            <param name="e">event parameters</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.RaiseCallbacksAfterCleanup(System.String)">
            <summary>
            Raise all the callbacks to the specified computer
            after the requested cleanup
            </summary>
            <param name="computerName">computer to which the
            callback needs to be raised</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.HandleCleanupWaitTimerElapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Timer elapsed handler for the specified computer. Once
            the timer elapses, new connections to the specified
            computer will be allowed
            </summary>
            <param name="sender">timer that generated the event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.Dispose">
            <summary>
            Dispose the connection manager
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.Dispose(System.Boolean)">
            <summary>
            Dipose the connection manager
            </summary>
            <param name="isDisposing"></param>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._pendingQueue">
            <summary>
            queue of operations to be used for throttling
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._inProgressCount">
            <summary>
            Count of operations in progress
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._throttleLimit">
            <summary>
            throttle limit - includes open/close/connect/disconnect operations
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ConnectionManager._isOperationsServiced">
            <summary>
            is the queue of operations being serviced
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.SubmitOperation(Microsoft.PowerShell.Workflow.ThrottleOperation)">
            <summary>
            submit an operation to the queue
            </summary>
            <param name="operation">operation to submit</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.StartOperationsFromQueue(System.Object)">
            <summary>
            Start operations upto throttle limit from the queue
            </summary>
            <remarks>this method is thread safe. It starts all pending
            operations in the first calling thread. The assumption here
            is that starting a few operations isn't expensive and so
            the calling thread is not blocked for a long period of time</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.ConnectionEnumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.ConnectionEnumerator.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.ConnectionManager.ConnectionEnumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.ConnectionEnumerator.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.DisconnectReconnectWorker(System.Object)">
            <summary>
            Disconnect and reconnect to different runspaces as necessary
            so as to help the connection manager scale and run a large
            number of commands on a large number of remote nodes
            </summary>
            <param name="state">unused</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.ConnectionManager.ReadyForDisconnect(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Callback to indicate that this runspace been initiated with
            a pipeline and can be disconnected
            </summary>
            <param name="runspace">runspace that needs to be marked as
            ready for disconnect</param>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.WorkflowStoreComponents">
            <summary>
            WorkflowStoreComponent
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowStoreComponents.Streams">
            <summary>
            Streams
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowStoreComponents.Metadata">
            <summary>
            Metadata
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowStoreComponents.Definition">
            <summary>
            Definition
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowStoreComponents.Timer">
            <summary>
            Timers 
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowStoreComponents.JobState">
            <summary>
            JobState 
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowStoreComponents.TerminatingError">
            <summary>
            TerminatingError
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.WorkflowStoreComponents.ActivityState">
            <summary>
            ActivityState, like remote activity execution state, etc.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.ActivityRunMode">
            <summary>
            ActivityRunMode
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ActivityRunMode.InProcess">
            <summary>
            InProcess
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.ActivityRunMode.OutOfProcess">
            <summary>
            OutOfProcess
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore">
            <summary>
            WorkflowInstanceStore
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowInstance)">
            <summary>
            PSWorkflowInstanceStore
            </summary>
            <param name="workflowInstance"></param>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore.PSWorkflowInstance">
            <summary>
            PSWorkflowInstance
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore.CreatePersistenceIOParticipant">
            <summary>
            CreatePersistenceIOParticipant
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore.CreateInstanceStore">
            <summary>
            CreateInstanceStore
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore.Save(Microsoft.PowerShell.Workflow.WorkflowStoreComponents)">
            <summary>
            Save
            </summary>
            <param name="components"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore.DoSave(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            DoSave
            </summary>
            <param name="components"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore.Load(Microsoft.PowerShell.Workflow.WorkflowStoreComponents)">
            <summary>
            Load
            </summary>
            <param name="components"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore.DoLoad(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            DoLoad
            </summary>
            <param name="componentTypes"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore.Delete">
            <summary>
            Delete
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstanceStore.DoDelete">
            <summary>
            DoDelete
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.PSWorkflowInstance">
            <summary>
            WorkflowInstance
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.PSWorkflowInstance._syncLock">
            <summary>
            _syncLock 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.Disposed">
            <summary>
            _disposed
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.SyncLock">
            <summary>
            Synchonization object available to derived classes.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoStopInstance">
            <summary>
            DoStopInstance
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoAbortInstance(System.String)">
            <summary>
            DoAbortInstance
            </summary>
            <param name="reason">Reason for aborting workflow.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoTerminateInstance(System.String)">
            <summary>
            DoTerminateInstance
            </summary>
            <param name="reason">Reason message for termination</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoTerminateInstance(System.String,System.Boolean)">
            <summary>
            DoTerminateInstance
            </summary>
            <param name="reason">Reason message for termination</param>
            <param name="suppressError">Suppress error for termination</param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoResumeInstance(System.String)">
            <summary>
            DoResumeInstance
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoSuspendInstance(System.Boolean)">
            <summary>
            DoSuspendInstance
            </summary>
            <param name="notStarted"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoExecuteInstance">
            <summary>
            DoExecuteInstance
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoResumeBookmark(System.Activities.Bookmark,System.Object)">
            <summary>
            DoResumeBookmark
            </summary>
            <param name="bookmark"></param>
            <param name="state"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoCreateInstance">
            <summary>
            Loads the xaml to create an executable activity.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoRemoveInstance">
            <summary>
            Remove
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoPersistInstance">
            <summary>
            DoPersistInstance
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoGetPersistableIdleAction(System.Collections.ObjectModel.ReadOnlyCollection{System.Activities.Hosting.BookmarkInfo},System.Boolean)">
            <summary>
            DoGetPersistableIdleAction
            </summary>
            <param name="bookmarks"></param>
            <param name="externalSuspendRequest"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.Dispose(System.Boolean)">
            <summary>
            Dispose 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.Id">
            <summary>
            Gets the Guid of workflow instance.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.JobStateRetrieved">
            <summary>
            JobStateRetrieved
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.CheckForTerminalAction">
            <summary>
            CheckForTerminalAction
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DoLoadInstanceForReactivation">
            <summary>
            Load instance for resuming the workflow
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.PerformTaskAtTerminalState">
            <summary>
            PerformTaskAtTerminalState
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnCompletedDelegate">
            <summary>
            On completed handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnFaultedDelegate">
            <summary>
            On faulted handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnStoppedDelegate">
            <summary>
            On stopped handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnAbortedDelegate">
            <summary>
            On aborted handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnSuspenedDelegate">
            <summary>
            On suspended handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnIdleDelegate">
            <summary>
            On idle handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnPersistableIdleActionDelegate">
            <summary>
            On persistable idle action handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnUnloadedDelegate">
            <summary>
            On unloaded handler.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.ValidateIfLabelExists(System.String)">
            <summary>
            Validate label
            </summary>
            <param name="label"></param>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnCompleted">
            <summary>
            On completed handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnFaulted">
            <summary>
            On faulted handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnStopped">
            <summary>
            On stopped handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnAborted">
            <summary>
            On aborted handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnSuspended">
            <summary>
            On suspended handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnIdle">
            <summary>
            On idle handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnPersistableIdleAction">
            <summary>
            On persistable idle action handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.OnUnloaded">
            <summary>
            On unloaded handler.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.PSWorkflowJob">
            <summary>
            PSWorkflowJob
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.InstanceId">
            <summary>
            Gets the Guid of workflow instance.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.CreationContext">
            <summary>
            Gets the workflow job creation context.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.State">
            <summary>
            State
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.InstanceStore">
            <summary>
            InstanceStore
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.PSWorkflowDefinition">
            <summary>
            Gets the definition of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.Streams">
            <summary>
            Gets the streams of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.RemoteActivityState">
            <summary>
            Gets/Sets the RemoteActivityState of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.Error">
            <summary>
            Gets the streams of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.Timer">
            <summary>
            Gets the timers of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.PSWorkflowContext">
            <summary>
            Gets the metadatas of workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.PSWorkflowInstance.PSWorkflowDebugger">
            <summary>
            Gets the workflow debugger.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.PSWorkflowInstance.DisposeStreams">
            <summary>
            Dispose the streams to save memory
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.TimeBasedCache`1">
            <summary>
            Bounded cache which will clear items when not used for a while
            </summary>
            <typeparam name="T">type of item to use</typeparam>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.TimeBasedCache`1.Cache">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.TimeBasedCache`1.TimerServicingSyncObject">
            <summary>
            The consumer of this class should hold a lock 
            on this object when servicing requests and adding
            to this cache
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.TimeBasedCache`1.Add(Microsoft.PowerShell.Workflow.Item{`0})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.TimeBasedCache`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.TimeBasedCache`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.TimeBasedCache`1.CacheEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.TimeBasedCache`1.CacheEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Microsoft.PowerShell.Workflow.TimeBasedCache`1.CacheEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.</exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.TimeBasedCache`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Microsoft.PowerShell.Workflow.Item`1">
            <summary>
            one item that will be used in the cache
            </summary>
            <typeparam name="T">type of item to use</typeparam>
        </member>
        <member name="F:Microsoft.PowerShell.Workflow.LocalRunspaceProvider.MaxRunspacesPossible">
            <summary>
            -1 indicates unlimited
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.LocalRunspaceProvider.GetRunspace(System.Management.Automation.Runspaces.WSManConnectionInfo,System.UInt32,System.UInt32)">
            <summary>
            
            </summary>
            <param name="connectionInfo"></param>
            <param name="retryCount"></param>
            <param name="retryInterval"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.LocalRunspaceProvider.CheckAndStartRequestServicingThread">
            <summary>
            Checks to see if a thread is already servicing and if not starts one
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.LocalRunspaceProvider.BeginGetRunspace(System.Management.Automation.Runspaces.WSManConnectionInfo,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <summary>
            Begin for obtaining a runspace for the specified ConnectionInfo
            </summary>
            <param name="connectionInfo">connection info to be used for remote connections</param>
            <param name="retryCount">number of times to retry</param>
            <param name="callback">optional user defined callback</param>
            <param name="state">optional user specified state</param>
            <param name="retryInterval">time in milliseconds before the next retry has to be attempted</param>
            <returns>async result</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.LocalRunspaceProvider.EndGetRunspace(System.IAsyncResult)">
            <summary>
            End for obtaining a runspace for the specified connection info
            </summary>
            <param name="asyncResult">async result to end on</param>
            <returns>remote runspace to invoke commands on</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.LocalRunspaceProvider.ReleaseRunspace(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            
            </summary>
            <param name="runspace"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.LocalRunspaceProvider.CreateLocalActivityRunspace(System.Nullable{System.Management.Automation.PSLanguageMode},System.Boolean)">
            <summary>
            Creates a local runspace with the autoloading turned on.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.LocalRunspaceProvider.Dispose">
            <summary>
            Dispose resources
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.LocalRunspaceProvider.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Workflow.LocalRunspaceProvider.Reset">
            <summary>
            Helper method only to use from test
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.ImportWorkflowCommand">
            <summary>
            A cmdlet to load WF Workflows, expressed as XAML and wrap them
            in functions.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportWorkflowCommand.Path">
            <summary>
            Paths to the XAML files to load. Wild cards are supported.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportWorkflowCommand.DependentWorkflow">
            <summary>
            Paths to the dependent XAML files to load. Wild cards are supported.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportWorkflowCommand.DependentAssemblies">
            <summary>
            Paths to the dependent XAML files to load. Wild cards are supported.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportWorkflowCommand.Force">
            <summary>
            Flags -force operations
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.ProcessRecord">
            <summary>
            Process all of the specified  XAML files to generate corresponding functions
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.GenerateFunctionFromXaml(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String[],System.String,System.String,System.Management.Automation.PSLanguageMode)">
            <summary>
            Load a workflow XAML file from the specified path and generate a PowerShell
            function from the file. The name of the generated function will be the basename
            of the XAML file.
            </summary>
            <param name="name">The name of workflow.</param>
            <param name="xaml">The xaml of workflow.</param>
            <param name="requiredAssemblies"></param>
            <param name="dependentWorkflows">Any workflows required by this workflow.</param>
            <param name="dependentAssemblyPath">Path to the dependent assembly.</param>
            <param name="resolvedPath">Resolved Path of the xaml</param>
            <param name="sourceLanguageMode">Language mode of source in which workflow should run</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.UpdateFunctionFromXaml(Microsoft.PowerShell.Commands.ImportWorkflowCommand.FunctionDetails)">
            <summary>
            Generate a function in the current session using the specified
            function details
            </summary>
            <param name="details">details of the function</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.StartWorkflowApplication(System.Management.Automation.PSCmdlet,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Hashtable[])">
            <summary>
            Executes an instance of the workflow object graph identified by the passed
            GUID, binding parameters from the Parameters hastable.
            </summary>
            <param name="command">The powershell command.</param>
            <param name="workflowGuid">The GUID used to identify the workflow to run.</param>
            <param name="parameters">The parameters to pass to the workflow instance.</param>
            <param name="jobName">The friendly name for the job</param>
            <param name="parameterCollectionProcessed">True if there was a PSParameters collection</param>
            <param name="startAsync"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.StartWorkflowApplication(System.Management.Automation.PSCmdlet,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Hashtable[],System.Boolean)">
            <summary>
            Executes an instance of the workflow object graph identified by the passed
            GUID, binding parameters from the Parameters hastable.
            </summary>
            <param name="command">The powershell command.</param>
            <param name="workflowGuid">The GUID used to identify the workflow to run.</param>
            <param name="parameters">The parameters to pass to the workflow instance.</param>
            <param name="jobName">The friendly name for the job</param>
            <param name="parameterCollectionProcessed">True if there was a PSParameters collection</param>
            <param name="startAsync"></param>
            <param name="debuggerActive">True if debugger is in active state.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.StartWorkflowApplication(System.Management.Automation.PSCmdlet,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Hashtable[],System.Boolean,System.String)">
            <summary>
            Executes an instance of the workflow object graph identified by the passed
            GUID, binding parameters from the Parameters hastable.
            </summary>
            <param name="command">The powershell command.</param>
            <param name="workflowGuid">The GUID used to identify the workflow to run.</param>
            <param name="parameters">The parameters to pass to the workflow instance.</param>
            <param name="jobName">The friendly name for the job</param>
            <param name="parameterCollectionProcessed">True if there was a PSParameters collection</param>
            <param name="startAsync"></param>
            <param name="debuggerActive">True if debugger is in active state.</param>
            <param name="SourceLanguageMode">Language mode of source creating workflow.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportWorkflowCommand.ParameterErrorMessage">
            <summary>
            Retrieve a localized error message saying that only a single default parameter collection can be specified 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportWorkflowCommand.InvalidPSParameterCollectionEntryErrorMessage">
            <summary>
            Retrieve a localized error message saying that AsJob, JobName and PSParameterCollection cannot be specified as entries to PSParameterCollection 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportWorkflowCommand.InvalidPSParameterCollectionAdditionalErrorMessage">
            <summary>
            Retrieve a localized error message saying that the only AsJob, JobName and InputObject can be used outside of PSParameterCollection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.ImportWorkflowCommand.UnableToStartWorkflowMessageMessage">
            <summary>
            Retrieve a localized error message saying that starting the workflow failed...
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.ConvertXamlToActivity(System.String)">
            <summary>
            Convert the Xaml based workflow into object-graph activity.
            </summary>
            <param name="xaml">Xaml representing workflow.</param>
            <returns>Activity representing the workflow.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.ConvertXamlToActivity(System.String,System.String[],System.Collections.Generic.Dictionary{System.String,System.String},System.String@,System.Reflection.Assembly@,System.String@)">
            <summary>
            Convert the Xaml based workflow into object-graph activity with additional xamls assembly provided.
            </summary>
            <param name="xaml">Xaml representing workflow.</param>
            <param name="dependentWorkflows">Any workflows required by this workflow.</param>
            <param name="requiredAssemblies"></param>
            <param name="compiledAssemblyPath">The path to the compiled assembly for any dependent workflows.</param>
            <param name="compiledAssembly">The compiled assembly.</param>
            <param name="compiledAssemblyName">The compiled assembly name.</param>
            <returns>Activity representing the workflow.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.CreateFunctionFromXaml(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String[],System.String,System.Collections.Generic.Dictionary{System.String,System.Management.Automation.Language.ParameterAst},System.String,System.Boolean,System.String)">
            <summary>
            Creates a workflow activity based on the provided Xaml and returns PowerShell script that will
            run the workflow.
            </summary>
            <param name="name">Workflow name</param>
            <param name="xaml">Workflow Xaml definition</param>
            <param name="requiredAssemblies">Required assemblies</param>
            <param name="dependentWorkflows">Dependent workflows</param>
            <param name="dependentAssemblyPath">Path for dependent assemblies</param>
            <param name="parameterValidation">Workflow parameters</param>
            <param name="modulePath">Module path</param>
            <param name="scriptWorkflow">True if this is script workflow</param>
            <param name="workflowAttributes">the attribute string to use for the workflow, should be '[CmdletBinding()]'</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.CreateFunctionFromXaml(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String[],System.String,System.Collections.Generic.Dictionary{System.String,System.Management.Automation.Language.ParameterAst},System.String,System.Boolean,System.String,System.String)">
            <summary>
            Creates a workflow activity based on the provided Xaml and returns PowerShell script that will
            run the workflow.
            </summary>
            <param name="name">Workflow name</param>
            <param name="xaml">Workflow Xaml definition</param>
            <param name="requiredAssemblies">Required assemblies</param>
            <param name="dependentWorkflows">Dependent workflows</param>
            <param name="dependentAssemblyPath">Path for dependent assemblies</param>
            <param name="parameterValidation">Workflow parameters</param>
            <param name="modulePath">Module path</param>
            <param name="scriptWorkflow">True if this is script workflow</param>
            <param name="workflowAttributes">the attribute string to use for the workflow, should be '[CmdletBinding()]'</param>
            <param name="scriptContent">File path containing script content.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.CreateFunctionFromXaml(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String[],System.String,System.Collections.Generic.Dictionary{System.String,System.Management.Automation.Language.ParameterAst},System.String,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Creates a workflow activity based on the provided Xaml and returns PowerShell script that will
            run the workflow.
            </summary>
            <param name="name">Workflow name</param>
            <param name="xaml">Workflow Xaml definition</param>
            <param name="requiredAssemblies">Required assemblies</param>
            <param name="dependentWorkflows">Dependent workflows</param>
            <param name="dependentAssemblyPath">Path for dependent assemblies</param>
            <param name="parameterValidation">Workflow parameters</param>
            <param name="modulePath">Module path</param>
            <param name="scriptWorkflow">True if this is script workflow</param>
            <param name="workflowAttributes">the attribute string to use for the workflow, should be '[CmdletBinding()]'</param>
            <param name="scriptContent">File path containing script content.</param>
            <param name="fullScript">Full source script.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.CreateFunctionFromXaml(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String[],System.String,System.Collections.Generic.Dictionary{System.String,System.Management.Automation.Language.ParameterAst},System.String,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a workflow activity based on the provided Xaml and returns PowerShell script that will
            run the workflow.
            </summary>
            <param name="name">Workflow name</param>
            <param name="xaml">Workflow Xaml definition</param>
            <param name="requiredAssemblies">Required assemblies</param>
            <param name="dependentWorkflows">Dependent workflows</param>
            <param name="dependentAssemblyPath">Path for dependent assemblies</param>
            <param name="parameterValidation">Workflow parameters</param>
            <param name="modulePath">Module path</param>
            <param name="scriptWorkflow">True if this is script workflow</param>
            <param name="workflowAttributes">the attribute string to use for the workflow, should be '[CmdletBinding()]'</param>
            <param name="scriptContent">File path containing script content.</param>
            <param name="fullScript">Full source script.</param>
            <param name="rootWorkflowName">Only root Workflow will be compiled</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.CreateFunctionFromXaml(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String[],System.String,System.Collections.Generic.Dictionary{System.String,System.Management.Automation.Language.ParameterAst},System.String,System.Boolean,System.String,System.String,System.String,System.String,System.Nullable{System.Management.Automation.PSLanguageMode},System.Collections.ObjectModel.ReadOnlyCollection{System.Management.Automation.Language.AttributeAst})">
            <summary>
            Creates a workflow activity based on the provided Xaml and returns PowerShell script that will
            run the workflow.
            </summary>
            <param name="name">Workflow name</param>
            <param name="xaml">Workflow Xaml definition</param>
            <param name="requiredAssemblies">Required assemblies</param>
            <param name="dependentWorkflows">Dependent workflows</param>
            <param name="dependentAssemblyPath">Path for dependent assemblies</param>
            <param name="parameterValidation">Workflow parameters</param>
            <param name="modulePath">Module path</param>
            <param name="scriptWorkflow">True if this is script workflow</param>
            <param name="workflowAttributes">the attribute string to use for the workflow, should be '[CmdletBinding()]'</param>
            <param name="scriptContent">File path containing script content.</param>
            <param name="fullScript">Full source script.</param>
            <param name="rootWorkflowName">Only root Workflow will be compiled</param>
            <param name="sourceLanguageMode">Language mode of source that is creating the workflow</param>
            <param name="attributeAstCollection">Optional collection of parameter attribute Asts</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.MergeParameterCollection(System.Collections.Hashtable[],System.Collections.Hashtable)">
            <summary>
            
            </summary>
            <param name="parameterCollection"></param>
            <param name="defaultsParameterCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.ImportWorkflowCommand.AddCommonWfParameters(System.Boolean,System.String)">
            <summary>
            Adds common workflow parameters
            </summary>
            <param name="innerfunction"></param>
            <param name="workflowAttributes"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption">
            <summary>
            This class is used to specify Workflow related options in the Register-PSSessionConfiguration
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.#ctor">
            <summary>
            Constructor that loads from default values
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.SessionThrottleLimit">
            <summary>
            SessionThrottleLimit
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.PersistencePath">
            <summary>
            PersistencePath
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.MaxPersistenceStoreSizeGB">
            <summary>
            MaxPersistenceStoreSizeGB
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.PersistWithEncryption">
            <summary>
            PersistWithEncryption
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.MaxRunningWorkflows">
            <summary>
            MaxRunningWorkflows
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.AllowedActivity">
            <summary>
            AllowedActivity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.OutOfProcessActivity">
            <summary>
            OutOfProcActivity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.EnableValidation">
            <summary>
            EnableValidation
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.MaxDisconnectedSessions">
            <summary>
            MaxDisconnectedSessions
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.MaxConnectedSessions">
            <summary>
            MaxConnectedSessions
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.MaxSessionsPerWorkflow">
            <summary>
            MaxSessionsPerWorkflow
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.MaxSessionsPerRemoteNode">
            <summary>
            MaxSessionsPerRemoteNode
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.MaxActivityProcesses">
            <summary>
            MaxActivityProcesses
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.WorkflowApplicationPersistUnloadTimeoutSec">
            <summary>
            WorkflowApplicationPersistUnloadTimeoutSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.WSManPluginReportCompletionOnZeroActiveSessionsWaitIntervalMSec">
            <summary>
            WSManPluginReportCompletionOnZeroActiveSessionsWaitIntervalMSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.ActivitiesCacheCleanupIntervalMSec">
            <summary>
            ActivitiesCacheCleanupIntervalMSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.ActivityProcessIdleTimeoutSec">
            <summary>
            ActivityProcessIdleTimeOutSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.RemoteNodeSessionIdleTimeoutSec">
            <summary>
            RemoteNodeSessionIdleTimeOut
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.WorkflowShutdownTimeoutMSec">
            <summary>
            WorkflowShutdownTimeoutMSec - the maximum time allowed to suspend the workflows before aborting them.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.CopyUpdatedValuesFrom(System.Management.Automation.PSSessionTypeOption)">
            <summary>
            Copies values from updated.  Only non default values are copies.
            </summary>
            <param name="updated"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.ConstructObjectFromPrivateData(System.String)">
            <summary>
            Returns a new instance constructed from privateData string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.PSWorkflowExecutionOption.ConstructPrivateData">
            <summary>
            Implementation of the abstract method
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand">
            <summary>
            Command to create an object for PSWorkflowExecutionOption
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.PersistencePath">
            <summary>
            PersistencePath
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.MaxPersistenceStoreSizeGB">
            <summary>
            MaxPersistenceStoreSizeGB 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.PersistWithEncryption">
            <summary>
            UseEnctyption
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.MaxRunningWorkflows">
            <summary>
            MaxRunningWorkflows
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.AllowedActivity">
            <summary>
            AllowedActivity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.OutOfProcessActivity">
            <summary>
            OutOfProcActivity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.EnableValidation">
            <summary>
            EnableValidation
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.MaxDisconnectedSessions">
            <summary>
            MaxDisconnectedSessions
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.MaxConnectedSessions">
            <summary>
            MaxConnectedSessions
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.MaxSessionsPerWorkflow">
            <summary>
            MaxSessionsPerWorkflow
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.MaxSessionsPerRemoteNode">
            <summary>
            MaxSessionsPerRemoteNode
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.MaxActivityProcesses">
            <summary>
            MaxActivityProcess
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.ActivityProcessIdleTimeoutSec">
            <summary>
            ActivityProcessIdleTimeOutSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.RemoteNodeSessionIdleTimeoutSec">
            <summary>
            RemoteNodeSessionIdleTimeOutSec
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.SessionThrottleLimit">
            <summary>
            SessionThrottleLimit
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.WorkflowShutdownTimeoutMSec">
            <summary>
            WorkflowShutdownTimeoutMSec - the maximum time allowed to suspend the workflows before aborting them.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.NewPSWorkflowExecutionOptionCommand.ProcessRecord">
            <summary>
            ProcessRecord
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.ParameterSpecificCategoryAttribute">
            <summary>
            Category attribute for "Activity-Specific Parameters" 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.ParameterSpecificCategoryAttribute.#ctor">
            <summary>
            Creates the attribute.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.ParameterSpecificCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Gets a localized version of the attribute description.
            </summary>
            <param name="value">Not used.</param>
            <returns>A localized version of the attribute description</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.InputAndOutputCategoryAttribute">
            <summary>
            Category attribute for "Input and Output"
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.InputAndOutputCategoryAttribute.#ctor">
            <summary>
            Creates the attribute.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.InputAndOutputCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Gets a localized version of the attribute description.
            </summary>
            <param name="value">Not used.</param>
            <returns>A localized version of the attribute description</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.BehaviorCategoryAttribute">
            <summary>
            Category attribute for "Behavior"
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.BehaviorCategoryAttribute.#ctor">
            <summary>
            Creates the attribute.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.BehaviorCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Gets a localized version of the attribute description.
            </summary>
            <param name="value">Not used.</param>
            <returns>A localized version of the attribute description</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.ConnectivityCategoryAttribute">
            <summary>
            Category attribute for "Connectivity"
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.ConnectivityCategoryAttribute.#ctor">
            <summary>
            Creates the attribute.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.ConnectivityCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Gets a localized version of the attribute description.
            </summary>
            <param name="value">Not used.</param>
            <returns>A localized version of the attribute description</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.IImplementsConnectionRetry">
            <summary>
            Implementing this interface indicates that the activity supports connection retry.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.IImplementsConnectionRetry.PSConnectionRetryCount">
            <summary>
            Defines the number of retries that the activity will make to connect to a remote
            machine when it encounters an error. The default is to not retry.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.IImplementsConnectionRetry.PSConnectionRetryIntervalSec">
            <summary>
            Defines the delay, in seconds, between connection retry attempts.
            The default is one second.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.WorkflowPreferenceVariables">
            <summary>
            Special variables that can be defined in a workflow to
            control the behaviour of PowerShell activities.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Activities.WorkflowPreferenceVariables.PSParentActivityId">
            <summary>
            The parent activity ID to be used for all progress records
            that are written in the enclosing scope
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Activities.WorkflowPreferenceVariables.PSRunInProcessPreference">
            <summary>
            Workflow variable that controls when activities are run
            in process. If true, all activities in the enclosing scope
            will be run in process
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Activities.WorkflowPreferenceVariables.PSPersistPreference">
            <summary>
            Workflow variable that is used to determine if a PowerShell activity should
            persist when it's done. if true, then all PSActivities in that scope
            will not persist at the end of their execution.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.HostParameterDefaults">
            <summary>
            Parameter default, contains all the information which needs to be passed to Workflow context.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.HostParameterDefaults.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostParameterDefaults.Parameters">
            <summary>
            All the activity level default parameter values are passed here.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostParameterDefaults.HostCommandMetadata">
            <summary>
            Metadata / symbolic information about the currently-running workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostParameterDefaults.JobInstanceId">
            <summary>
            Job instance id.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostParameterDefaults.Runtime">
            <summary>
            The workflow runtime.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostParameterDefaults.HostPersistenceDelegate">
            <summary>
            The host persistence delegate.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostParameterDefaults.ActivateDelegate">
            <summary>
            The Workflow activation delegate.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostParameterDefaults.AsyncExecutionCollection">
            <summary>
            The asynchronous execution collection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostParameterDefaults.RemoteActivityState">
            <summary>
            Currently executing remote activities state with runspace id or completion state.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.HostParameterDefaults.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.HostParameterDefaults.Dispose(System.Boolean)">
            <summary>
            Dipose of managed resources
            </summary>
            <param name="disposing">true if disposing</param>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.HostSettingCommandMetadata">
            <summary>
            Runtime metadata that represents the currently-running command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostSettingCommandMetadata.CommandName">
            <summary>
            The command name that generated this workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostSettingCommandMetadata.StartLineNumber">
            <summary>
            The start line of the command name that generated this section of
            the workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostSettingCommandMetadata.StartColumnNumber">
            <summary>
            The start column of the command name that generated this section of
            the workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostSettingCommandMetadata.EndLineNumber">
            <summary>
            The end line of the command name that generated this section of
            the workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.HostSettingCommandMetadata.EndColumnNumber">
            <summary>
            The end column of the command name that generated this section of
            the workflow.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSActivityContext">
            <summary>
            The activity context.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivityContext.IsCanceled">
            <summary>
            IsCanceled.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivityContext.TypeImplementingCmdlet">
            <summary>
            The .NET type implementing the cmdlet to call, used for 
            direct-call cmdlets.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivityContext.Cancel">
            <summary>
            Cancelling the Async execution.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivityContext.Execute">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>This function is designed to be lightweight and to 
            run on the Workflow thread when Execute() is called. When
            any changes are made to this function the contract needs to
            be honored</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivityContext.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivityContext.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.ActivityOnResumeAction">
            <summary>
            Defines the activity on-resume action.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Activities.ActivityOnResumeAction.Resume">
            <summary>
            Indicates the resumption is normal.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Activities.ActivityOnResumeAction.Restart">
            <summary>
            Indicates that the activity needs to be restarted.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PipelineEnabledActivity">
            <summary>
            Activities derived from this class can be used in the Pipeline activity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PipelineEnabledActivity.Input">
            <summary>
            The Input stream for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PipelineEnabledActivity.UseDefaultInput">
            <summary>
            Determines whether to connect the input stream for this activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PipelineEnabledActivity.Result">
            <summary>
            The output stream from the activity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PipelineEnabledActivity.AppendOutput">
            <summary>
            Determines whether to append output to Result.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSActivity">
            <summary>
            Base class for PowerShell-based workflow activities
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Activities.PSActivity.PSBookmarkPrefix">
            <summary>
            The bookmark prefix for Powershell activities.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Activities.PSActivity.PSSuspendBookmarkPrefix">
            <summary>
            The bookmark prefix for Powershell suspend activities.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Activities.PSActivity.PSPersistBookmarkPrefix">
            <summary>
            The bookmark prefix for Powershell persist activities.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.#ctor">
            <summary>
            Constructor for the PSActivity class.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSCommandName">
            <summary>
            Gets the fully qualified name of the command invoked by this activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSDefiningModule">
            <summary>
            Returns the module defining the command called by this activity.
            It may be null.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.Tracer">
            <summary>
            Tracer initialization.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSProgressMessage">
            <summary>
            In addition to the display name PSProgress Message will provide
            the way to append the additional information into the activity progress message
            like branch name or iteration number in case of parallel foreach.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSError">
            <summary>
            The Error stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSProgress">
            <summary>
            The Progress stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSVerbose">
            <summary>
            The Verbose stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSDebug">
            <summary>
            The Debug stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSWarning">
            <summary>
            The Warning stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSInformation">
            <summary>
            The Information stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSDisableSerialization">
            <summary>
            Forces the activity to return non-serialized objects. Resulting objects
            have functional methods and properties (as opposed to serialized versions
            of them), but will not survive persistence when the Workflow crashes or is
            persisted.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSPersist">
            <summary>
            Forces the activity to not call the persist functionality, which will be responsible for 
            persisting the workflow state onto the disk.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.MergeErrorToOutput">
            <summary>
            Determines whether to merge error data to the output stream
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSActionRunningTimeoutSec">
            <summary>
            Defines the maximum amount of time, in seconds, that this activity may run.
            The default is unlimited.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSRequiredModules">
            <summary>
            This the list of module names (or paths) that are required to run this Activity successfully.
            The default is null.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSActionRetryCount">
            <summary>
            Defines the number of retries that the activity will make when it encounters
            an error during execution of its action. The default is to not retry.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.PSActionRetryIntervalSec">
            <summary>
            Defines the delay, in seconds, between action retry attempts.
            The default is one second.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.Verbose">
            <summary>
            Determines whether to emit verbose output of the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.Debug">
            <summary>
            Determines whether to emit debug output of the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.ErrorAction">
            <summary>
            Determines how errors should be handled by the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.WarningAction">
            <summary>
            Determines how warnings should be handled by the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.InformationAction">
            <summary>
            Determines how information records should be handled by the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.ParameterDefaults">
            <summary>
            Provides access to the parameter defaults dictionary
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.WriteError(System.Exception,System.String,System.Management.Automation.ErrorCategory,System.Object,Microsoft.PowerShell.Activities.PSActivityContext)">
            <summary>
            Records a non-terminating error. If the runtime has associated an error stream, this
            error will be written to that stream. Otherwise, this will be thrown as an exception.
            </summary>
            <param name="exception">The exception associated with the error.</param>
            <param name="errorId">The error ID associated with the error. This should be a non-localized string.</param>
            <param name="errorCategory">The error category associated with the error.</param>
            <param name="originalTarget">The object that was being processed while encountering this error.</param>
            <param name="psActivityContext">The powershell activity context.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.CanInduceIdle">
            <summary>
            In order for an activity to go idle, 'CanInduceIdle' should be true.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.Execute(System.Activities.NativeActivityContext)">
            <summary>
            Begins the execution of the activity.
            </summary>
            <param name="context">The NativeActivityContext provided by the workflow.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.WriteProgressRecord(System.Activities.NativeActivityContext,System.Management.Automation.PSDataCollection{System.Management.Automation.ProgressRecord},System.String,System.Management.Automation.ProgressRecordType)">
            <summary>
            Write a progress record fo the current activity
            </summary>
            <param name="context">Workflow engine context</param>
            <param name="progress">The progress stream to write to</param>
            <param name="statusDescription">The status string to display</param>
            <param name="type">the Progress record type</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.ActivityEndPersistence(System.Activities.NativeActivityContext)">
            <summary>
            The method is override-able by the drived classes in case they would like to implement different logic at the end of persistence.
            The default behavior would be to schedule the 'Persist' activity if the PSPersist flag is true or Host is asking for it.
            </summary>
            <param name="context">The native activity context of execution engine.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.PopulateRunspaceFromContext(Microsoft.PowerShell.Activities.ActivityImplementationContext,Microsoft.PowerShell.Activities.PSActivityContext,System.Activities.NativeActivityContext)">
            <summary>
            Populates the runspace with user variables from the current context
            </summary>
            <param name="context"></param>
            <param name="activityContext"></param>
            <param name="implementationContext"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.SetActivityVariables(System.Activities.NativeActivityContext,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Populates the required variables to set in runspace
            </summary>
            <param name="context"></param>
            <param name="activityVariables"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.PopulateParameterFromDefault(System.Activities.Argument,System.Activities.NativeActivityContext,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Populates a parameter from the defaults supplied by the workflow host
            </summary>
            <param name="argument">The argument to modify (i.e.: Input, Result, ComputerName, etc)</param>
            <param name="context">The activity context to use</param>
            <param name="argumentName">The name of the argument</param>
            <param name="parameterDefaults">The parameter defaults</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.GetImplementation(System.Activities.NativeActivityContext)">
            <summary>
            Overload this method to implement any command-type specific preparations.
            If this command needs any workflow-specific information during its PrepareSession call,
            it should be stored in ActivityImplementationContext.WorkflowContext.
            </summary>
            <param name="context">The activity context to use</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.UpdateImplementationContextForLocalExecution(Microsoft.PowerShell.Activities.ActivityImplementationContext,System.Activities.ActivityContext)">
            <summary>
            Updates the ImplementationContext returned from GetPowerShell() to support local execution
            against the host's runspace pool.
            </summary>
            <param name="implementationContext">The implementation context returned by GetPowerShell()</param>
            <param name="context">The activity context to use</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.GetPowerShell(System.Activities.NativeActivityContext)">
            <summary>
            The method for derived activities to return a configured instance of System.Management.Automation.PowerShell.
            The implementor should have added all of the commands and parameters required to launch their command through
            the standard AddCommand() and AddParameter() methods. Derived activites should not manage the Runspace property
            directly, as the PSActivity class configures the runspace afterward to enable remote connections.
            </summary>
            <param name="context">The NativeActivityContext for the currently running activity.</param>
            <returns>A populated instance of Sytem.Management.Automation.PowerShell</returns>
            <remarks>The infrastructure takes responsibility for closing and disposing the PowerShell instance returned.</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.PrepareSession(Microsoft.PowerShell.Activities.ActivityImplementationContext)">
            <summary>
            The method for derived activities to customize the runspace of a System.Management.Automation.PowerShell instance
            that the runtime has prepared for them.
            If the command needs any workflow-specific information during this PrepareSession call,
            it should be stored in ActivityImplementationContext.WorkflowContext during the GetCommand preparation phase.
            </summary>
            <param name="implementationContext">The ActivityImplementationContext returned by the call to GetCommand.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.DefiningModule">
            <summary>
            If an activity needs to load a module before it can execute, override this member
            to return the name of that module.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.GetActivityArguments">
            <summary>
            Retrievs all of the default arguments from the type and its parents.
            </summary>
            <returns>All of the default arguments from the type and its parents</returns>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivity.UpdatePreferenceVariable">
            <summary>
            Indicates if preference variables need to be updated
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.UpdatePowerShell(Microsoft.PowerShell.Activities.ActivityImplementationContext,Microsoft.PowerShell.Activities.PSActivityContext,System.Type,Microsoft.PowerShell.Activities.PrepareSessionDelegate,System.Object)">
            <summary>
            Add the other streams and enqueue the command to be run
            </summary>
            <param name="implementationContext">The activity context to use</param>
            <param name="psActivityContext">The powershell activity context.</param>
            <param name="ActivityType">The activity type.</param>
            <param name="PrepareSession">The prepare session delgate.</param>
            <param name="activityObject">This object representing activity.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.BeginRunOneCommand(Microsoft.PowerShell.Activities.RunCommandsArguments)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <remarks>THREADING CONTRACT: This function is designed to be 
            lightweight and to run on the Workflow thread when Execute() 
            is called. When any changes are made to this function the contract 
            needs to be honored</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.InitializeOneCommand(Microsoft.PowerShell.Activities.RunCommandsArguments)">
            <summary>
            Initialize a single command for execution.
            </summary>
            <param name="args"></param>
            <remarks>THREADING CONTRACT: This function is designed to be 
            lightweight and to run on the Workflow thread when Execute() 
            is called. When any changes are made to this function the 
            contract needs to be honored</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.BeginExecuteOneCommand(Microsoft.PowerShell.Activities.RunCommandsArguments)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <remarks>
            THREADING CONTRACT:
            This function runs on the workflow thread when Execute() 
            is called for all cases except the remote runspace case 
            where it runs on a WinRM thread or the connection manager
            servicing thread
            Therefore this function is designed to be lightweight in 
            all cases
            When any changes are made to this function the contract needs to
            be honored</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.ExecuteCleanupActivity(Microsoft.PowerShell.Activities.RunCommandsArguments)">
            <summary>
            Calls the DoCleanup method of the cleanup activity
            </summary>
            <param name="args">RunCommandsArguments</param>
            <remarks>
            THREADING CONTRACT:
            This function runs on the workflow thread when Execute() 
            is called 
            Therefore this function is designed to be lightweight in 
            all cases
            When any changes are made to this function the contract needs to
            be honored</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.CleanupActivityCallback(System.Object)">
            <summary>
            Callback when all connections to the specified computer
            are closed
            </summary>
            <param name="state">RunCommandsArguments that the activity
            passed int</param>
            <remarks>
            THREADING CONTRACT:
            The callback will happen on a WinRM thread. Hence the 
            function needs to be lightweight to release the thread
            back to WinRM
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.ConnectionManagerCallback(System.IAsyncResult)">
            <summary>
            Callback from connection manager
            </summary>
            <param name="asyncResult"></param>
            <remarks>
            THREADING CONTRACT:
            The callback happens either in a WinRM thread or in the
            connection manager servicing thread. Therefore any 
            operations that this thread initiates is supposed to
            be very small. Make sure that this contract is maintained
            when any changes are made to the function</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.SetCurrentDirectory(Microsoft.PowerShell.Activities.PSActivityContext,System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Sets the $pwd variable in the current runspace
            </summary>
            <param name="psActivityContext"></param>
            <param name="runspace"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.LocalRunspaceProviderCallback(System.IAsyncResult)">
            <summary>
            Callback from local runspace provider
            </summary>
            <param name="asyncResult">This callback happens in the workflow
            thread or a threadpool callback servicing thread.
            However there is only one thread for servicing all callbacks and
            so all operations have to be small</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.BeginSetVariablesInRemoteRunspace(Microsoft.PowerShell.Activities.RunCommandsArguments)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <remarks>
            THREADING CONTRACT:
            This function runs in either a WinRM thread or in the
            connection manager servicing thread. Therefore any 
            operations that this thread initiates is supposed to
            be very small. Make sure that this contract is maintained
            when any changes are made to the function
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.BeginRunspaceInitializeSetup(Microsoft.PowerShell.Activities.RunCommandsArguments)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <remarks>
            THREADING CONTRACT:
            This function either runs on a thread pool thread, or in the 
            remote case runs on a WinRM/CM servicing thread. Therefore operations
            need to be light so that the thread can be released back quickly
            When changes are made this assumption need to be validated</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.SetVariablesCallback(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="asyncResult"></param>
            THREADING CONTRACT:
            This callback runs in a WinRM thread - in the normal 
            course of operation i.e unless PowerShell.EndInvoke() throws
            an exception, the operations performed on this thread
            should be minimal
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.BeginPowerShellInvocation(System.Object)">
            <summary>
            
            </summary>
            <param name="state"></param>
            <remarks>
            THREADING CONTRACT:
            This function is designed to be lightweight. It always runs
            on a callback thread - which is a threadpool thread</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.GetComputerNameAndJobIdForCommand(System.Guid,System.String@,System.Guid@)">
            <summary>
            
            </summary>
            <param name="powerShellId"></param>
            <param name="computerName"></param>
            <param name="jobInstanceId"></param>
            <returns>false if default values were substituted</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.PowerShellInvocationCallback(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="asyncResult"></param>
            <remarks>
            THREADING CONTRACT:
            This methods executes on a WinRM thread
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.RunspaceDisconnectedCallback(Microsoft.PowerShell.Activities.RunCommandsArguments,System.Exception)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <param name="runspaceDisconnectedException"></param>
            <remarks>
            THREADING CONTRACT:
            This methods executes on a WinRM thread
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.Cancel(System.Activities.NativeActivityContext)">
            <summary>
            Cancel the running activity
            </summary>
            <param name="context">The NativeActivityContext provided by the workflow.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.CacheMetadata(System.Activities.NativeActivityMetadata)">
            <summary>
            Retrieves the stream and ubiquitous parameter information from the hosting application.
            These must be passed in as "Streams" and "UbiquitousParameters", respectively.
            </summary>
            <param name="metadata">The metadata provided by the hosting application.</param>
        </member>
        <member name="E:Microsoft.PowerShell.Activities.PSActivity.ActivityCreated">
            <summary>
            The event fired when the PSActivity-derived activity has initialized its its instance
            of System.Management.Automation.PowerShell, but has not yet invoked its action. This event
            is for diagnostic, tracing, and testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivity.GetRunInProc(System.Activities.ActivityContext)">
            <summary>
            Determine if this activity should be run in or out of process
            when run locally/
            </summary>
            <param name="context">The native activity context for this workflow instance</param>
            <returns>True if it should be run in process with the workflow engine.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.ActivityCreatedEventHandler">
            <summary>
            The delegate invoked when an activity is created.
            </summary>
            <param name="sender">The PSActivity instance being invoked.</param>
            <param name="e">The ActivityCreatedEventArgs associated with this invocation.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.ActivityCreatedEventArgs">
            <summary>
            Holds the event arguments when a new PSActivity instance is created.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.ActivityCreatedEventArgs.#ctor(System.Management.Automation.PowerShell)">
            <summary>
            Creates a new ActivityCreatedEventArgs instance.
            </summary>
            <param name="instance">The instance of System.Management.Automation.PowerShell the activity has prepared.</param>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityCreatedEventArgs.PowerShellInstance">
            <summary>
            The instance of System.Management.Automation.PowerShell the activity has prepared.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.ActivityImplementationContext">
            <summary>
            Holds an instance of System.Management.Automation.PowerShell, and the context it needs to run.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PowerShellInstance">
            <summary>
            The instance of System.Management.Automation.PowerShell the activity has prepared.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.WorkflowContext">
            <summary>
            Any context required by the command.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.Id">
            <summary>
            context id.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.DisconnectedRunspaceInstanceId">
            <summary>
            DisconnectedRunspaceInstanceId
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.EnableRemotingActivityAutoResume">
            <summary>
            DisconnectedRunspaceInstanceId
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.Input">
            <summary>
            The Input stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.Result">
            <summary>
            The collection to hold the results of the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSError">
            <summary>
            The Error stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSProgress">
            <summary>
            The Progress stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSVerbose">
            <summary>
            The Verbose stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSDebug">
            <summary>
            The Debug stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSWarning">
            <summary>
            The Warning stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSInformation">
            <summary>
            The Information stream / collection for the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSComputerName">
            <summary>
            The computer name to invoke this activity on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSCredential">
            <summary>
            Defines the credential to use in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSRemotingBehavior">
            <summary>
            Defines the remoting behavior to use when invoking this activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSConnectionRetryCount">
            <summary>
            Defines the number of retries that the activity will make to connect to a remote
            machine when it encounters an error. The default is to not retry.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSPort">
            <summary>
            The port to use in a remote connection attempt. The default is:
            HTTP: 5985, HTTPS: 5986.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSUseSsl">
            <summary>
            Determines whether to use SSL in the connection attempt. The default is false.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSAllowRedirection">
            <summary>
            Determines whether to allow redirection by the remote computer. The default is false.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSApplicationName">
            <summary>
            Defines the remote application name to connect to. The default is "wsman".
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSConfigurationName">
            <summary>
            Defines the remote configuration name to connect to. The default is "Microsoft.PowerShell".
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSConnectionUri">
            <summary>
            Defines the fully-qualified remote URI to connect to. When specified, the PSComputerName,
            PSApplicationName, PSConfigurationName, and PSPort are not used.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSAuthentication">
            <summary>
            Defines the authentication type to be used in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSCertificateThumbprint">
            <summary>
            Defines the certificate thumbprint to be used in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSSessionOption">
            <summary>
            Defines any session options to be used in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSDisableSerialization">
            <summary>
            Forces the activity to return non-serialized objects. Resulting objects
            have functional methods and properties (as opposed to serialized versions
            of them), but will not survive persistence when the Workflow crashes or is
            persisted.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSPersist">
            <summary>
            Forces the activity to not call the persist functionality, which will be responsible for 
            persisting the workflow state onto the disk.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.AppendOutput">
            <summary>
            Determines whether to append output to Result.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.MergeErrorToOutput">
            <summary>
            Determines whether to merge the error data to the output stream
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSActionRunningTimeoutSec">
            <summary>
            Defines the maximum amount of time, in seconds, that this activity may run.
            The default is unlimited.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSConnectionRetryIntervalSec">
            <summary>
            Defines the delay, in seconds, between connection retry attempts.
            The default is one second.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSActionRetryCount">
            <summary>
            Defines the number of retries that the activity will make when it encounters
            an error during execution of its action. The default is to not retry.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSActionRetryIntervalSec">
            <summary>
            Defines the delay, in seconds, between action retry attempts.
            The default is one second.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSProgressMessage">
            <summary>
            Defines the PSProgressMessage.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.ConnectionInfo">
            <summary>
            The connection info to use for this command (may be null)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSRequiredModules">
            <summary>
            This the list of module names (or paths) that are required to run this Activity successfully.
            The default is null.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSWorkflowPath">
            <summary>
            The paththat the workflow was imported from.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.Verbose">
            <summary>
            Determines whether to emit verbose output of the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.Debug">
            <summary>
            Determines whether to emit debug output of the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.WhatIf">
            <summary>
            Determines whether to emit whatif output of the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.ErrorAction">
            <summary>
            Determines how errors should be handled by the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.WarningAction">
            <summary>
            Determines how warnings should be handled by the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.InformationAction">
            <summary>
            Determines how information messages should be handled by the activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSActivityEnvironment">
            <summary>
            Policy for activity host that will execute this activity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.PSAuthenticationLevel">
            <summary>
             Specifies the authentication level to be used with the WMI connection. Valid values are:
              -1: Unchanged
               0: Default
               1: None (No authentication in performed.)
               2: Connect (Authentication is performed only when the client establishes a relationship with the application.)
               3: Call (Authentication is performed only at the beginning of each call when the application receives the request.)
               4: Packet (Authentication is performed on all the data that is received from the client.)
               5: PacketIntegrity (All the data that is transferred between the client and the application is authenticated and verified.)
               6: PacketPrivacy (The properties of the other authentication levels are used, and all the data is encrypted.)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.Impersonation">
            <summary>
            Specifies the impersonation level to use. Valid values are: 
            0: Default (reads the local registry for the default impersonation level , which is usually set to "3: Impersonate".)
             1: Anonymous (Hides the credentials of the caller.)
             2: Identify (Allows objects to query the credentials of the caller.)
             3: Impersonate (Allows objects to use the credentials of the caller.)
             4: Delegate (Allows objects to permit other objects to use the credentials of the caller.)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.EnableAllPrivileges">
            <summary>
            Enables all the privileges of the current user before the command makes the WMI call.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.Authority">
            <summary>
            Specifies the authority to use to authenticate the WMI connection. You can specify
            standard NTLM or Kerberos authentication. To use NTLM, set the authority setting 
            to ntlmdomain:"DomainName", where "DomainName" identifies a valid NTLM domain name.
            To use Kerberos, specify kerberos:"DomainName>\ServerName". You cannot include
            the authority setting when you connect to the local computer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.Namespace">
            <summary>
            When used with the Class parameter, this parameter specifies the WMI repository namespace
            where the referenced WMI class is located. When used with the List parameter, it specifies
            the namespace from which to gather WMI class information.
            </summary>summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.Locale">
            <summary>
            Specifies the preferred locale for WMI objects. Specify the value of the Locale
            parameter as an array in the MS_"LCID" format in the preferred order .
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.ActivityImplementationContext.CimSession">
            <summary>
            CIM Sessions to use for this activity.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.ActivityImplementationContext.CleanUp">
            <summary>
            Perform any cleanup activities needed by this activity implementation
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSWorkflowInstanceExtension">
            <summary>
            Defining resuming extension.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSWorkflowInstanceExtension.GetAdditionalExtensions">
            <summary>
            Get all additional extensions.
            </summary>
            <returns>Retruns no extensions.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSWorkflowInstanceExtension.SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)">
            <summary>
            Set the instance of the worfkow.
            </summary>
            <param name="instance">The workflow instance proxy.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSWorkflowInstanceExtension.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Begin resuming book mark.
            </summary>
            <param name="bookmark">The bookmark where it will be resumed.</param>
            <param name="value">The value which need to be passed to the bookmark.</param>
            <param name="callback">The call back function when resuming the bookmark.</param>
            <param name="state">The state of the aysn call.</param>
            <returns>Returns the result of async call.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSWorkflowInstanceExtension.EndResumeBookmark(System.IAsyncResult)">
            <summary>
            End resuming bookmark.
            </summary>
            <param name="asyncResult">The result of asyc all.</param>
            <returns>Returns the bookmark resumption result.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSActivityArgumentInfo">
            <summary>
            Stores information about an activity argument
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivityArgumentInfo.Name">
            <summary>
            The name of the argument.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivityArgumentInfo.Value">
            <summary>
            The actual argument.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.WmiActivity">
            <summary>
            Abstract base contining the common members and invocation code for the WMI cmdlets.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.WmiActivity.PSComputerName">
            <summary>
            The computer name to invoke this activity on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.WmiActivity.PSCredential">
            <summary>
            Defines the credential to use in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.WmiActivity.PSAuthenticationLevel">
            <summary>
             Specifies the authentication level to be used with the WMI connection. Valid values are:
              -1: Unchanged
               0: Default
               1: None (No authentication in performed.)
               2: Connect (Authentication is performed only when the client establishes a relationship with the application.)
               3: Call (Authentication is performed only at the beginning of each call when the application receives the request.)
               4: Packet (Authentication is performed on all the data that is received from the client.)
               5: PacketIntegrity (All the data that is transferred between the client and the application is authenticated and verified.)
               6: PacketPrivacy (The properties of the other authentication levels are used, and all the data is encrypted.)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.WmiActivity.Impersonation">
            <summary>
            Specifies the impersonation level to use. Valid values are: 
            0: Default (reads the local registry for the default impersonation level , which is usually set to "3: Impersonate".)
             1: Anonymous (Hides the credentials of the caller.)
             2: Identify (Allows objects to query the credentials of the caller.)
             3: Impersonate (Allows objects to use the credentials of the caller.)
             4: Delegate (Allows objects to permit other objects to use the credentials of the caller.)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.WmiActivity.EnableAllPrivileges">
            <summary>
            Enables all the privileges of the current user before the command makes the WMI call.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.WmiActivity.Authority">
            <summary>
            Specifies the authority to use to authenticate the WMI connection. You can specify
            standard NTLM or Kerberos authentication. To use NTLM, set the authority setting 
            to ntlmdomain:"DomainName", where "DomainName" identifies a valid NTLM domain name.
            To use Kerberos, specify kerberos:"DomainName>\ServerName". You cannot include
            the authority setting when you connect to the local computer.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.WmiActivity.Namespace">
            <summary>
            When used with the Class parameter, this parameter specifies the WMI repository namespace
            where the referenced WMI class is located. When used with the List parameter, it specifies
            the namespace from which to gather WMI class information.
            </summary>summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.WmiActivity.Locale">
            <summary>
            Specifies the preferred locale for WMI objects. Specify the value of the Locale
            parameter as an array in the MS_"LCID" format in the preferred order .
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.WmiActivity.GetUbiquitousParameter``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Generic version of the function to handle value types
            </summary>
            <typeparam name="T">THe type of the intende argument</typeparam>
            <param name="parameterName"></param>
            <param name="parameterDefaults"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.WmiActivity.GetWmiCommandCore(System.Activities.NativeActivityContext,System.String)">
            <summary>
            Sets to execute the command that was passed in.
            </summary>
            <param name="context"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.WmiActivity.GetImplementation(System.Activities.NativeActivityContext)">
            <summary>
            Perform necessary steps to prepare the WMI commands
            </summary>
            <param name="context">The activity context to use</param>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime">
            <summary>
            Implementation of ICommandRuntime for running the WMI cmdlets in
            workflow without PowerShell.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.#ctor(System.Management.Automation.PSDataCollection{System.Management.Automation.PSObject},Microsoft.PowerShell.Activities.ActivityImplementationContext,System.Type)">
            <summary>
            Constructs an instance of the default ICommandRuntime object
            that will write objects into the arraylist that was passed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.Error">
            <summary>
            THe error record stream
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.Progress">
            <summary>
            The progress record stream
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.Verbose">
            <summary>
            The verbose record stream
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.Warning">
            <summary>
            The warning record stream
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.Debug">
            <summary>
            The debug output stream
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.Information">
            <summary>
            The information record stream
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.Host">
            <summary>
            Return the instance of PSHost - null by default.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.WriteDebug(System.String)">
            <summary>
            Implementation of WriteDebug - just discards the input.
            </summary>
            <param name="text">Text to write</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.WriteError(System.Management.Automation.ErrorRecord)">
            <summary>
            Default implementation of WriteError - if the error record contains
            an exceptin then that exception will be thrown. If not, then an
            InvalidOperationException will be constructed and thrown.
            </summary>
            <param name="errorRecord">Error record instance to process</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.WriteObject(System.Object)">
            <summary>
            Default implementation of WriteObject - adds the object to the arraylist
            passed to the objects constructor.
            </summary>
            <param name="sendToPipeline">Object to write</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.WriteObject(System.Object,System.Boolean)">
            <summary>
            Write objects to the output collection
            </summary>
            <param name="sendToPipeline">Object to write</param>
            <param name="enumerateCollection">If true, the collection is enumerated, otherwise
            it's written as a scalar.
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.WriteProgress(System.Management.Automation.ProgressRecord)">
            <summary>
            Write a progress record
            </summary>
            <param name="progressRecord">progress record to write.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.WriteProgress(System.Int64,System.Management.Automation.ProgressRecord)">
            <summary>
            Write a progress record, ignore the id field
            </summary>
            <param name="sourceId">Source ID to write for</param>
            <param name="progressRecord">record to write.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.WriteVerbose(System.String)">
            <summary>
            Write a verbose record
            </summary>
            <param name="text">Text to write.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.WriteWarning(System.String)">
            <summary>
            Write a warning record
            </summary>
            <param name="text">Text to write.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.WriteInformation(System.Management.Automation.InformationRecord)">
            <summary>
            Write a information record
            </summary>
            <param name="record">Record to write.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.WriteCommandDetail(System.String)">
            <summary>
            Write command detail info to the eventlog.
            </summary>
            <param name="text">Text to write.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.ShouldProcess(System.String)">
            <summary>
            Default implementation - always returns true.
            </summary>
            <param name="target">ignored</param>
            <returns>true</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.ShouldProcess(System.String,System.String)">
            <summary>
            Default implementation - always returns true.
            </summary>
            <param name="target">ignored</param>
            <param name="action">ignored</param>
            <returns>true</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.ShouldProcess(System.String,System.String,System.String)">
            <summary>
            Default implementation - always returns true.
            </summary>
            <param name="verboseDescription">ignored</param>
            <param name="verboseWarning">ignored</param>
            <param name="caption">ignored</param>
            <returns>true</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.ShouldProcess(System.String,System.String,System.String,System.Management.Automation.ShouldProcessReason@)">
            <summary>
            Default implementation - always returns true.
            </summary>
            <param name="verboseDescription">ignored</param>
            <param name="verboseWarning">ignored</param>
            <param name="caption">ignored</param>
            <param name="shouldProcessReason">ignored</param>
            <returns>true</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.ShouldContinue(System.String,System.String)">
            <summary>
            Default implementation - always returns true.
            </summary>
            <param name="query">ignored</param>
            <param name="caption">ignored</param>
            <returns>true</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.ShouldContinue(System.String,System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Default implementation - always returns true.
            </summary>
            <param name="query">ignored</param>
            <param name="caption">ignored</param>
            <param name="yesToAll">ignored</param>
            <param name="noToAll">ignored</param>
            <returns>true</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.TransactionAvailable">
            <summary>
            Returns true if a transaction is available and active.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.CurrentPSTransaction">
            <summary>
            Gets an object that surfaces the current PowerShell transaction.
            When this object is disposed, PowerShell resets the active transaction
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DirectExecutionActivitiesCommandRuntime.ThrowTerminatingError(System.Management.Automation.ErrorRecord)">
            <summary>
            Implementation of the dummy default ThrowTerminatingError API - it just
            does what the base implementation does anyway - rethrow the exception
            if it exists, otherwise throw an invalid operation exception.
            </summary>
            <param name="errorRecord">The error record to throw</param>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.SuspendOnError">
            <summary>
            Suspends the current workflow.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.SuspendOnError.CanInduceIdle">
            <summary>
            Returns true if the activity can induce an idle.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.SuspendOnError.Execute(System.Activities.NativeActivityContext)">
            <summary>
            Invokes the activity
            </summary>
            <param name="context">The activity context.</param>
            <returns>True if the given argument is set.</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSRemotingActivity">
            <summary>
            Base class for PowerShell-based workflow activities
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSComputerName">
            <summary>
            The computer name to invoke this activity on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSCredential">
            <summary>
            Defines the credential to use in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSRemotingBehavior">
            <summary>
            Defines the remoting behavior to use when invoking this activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSConnectionRetryCount">
            <summary>
            Defines the number of retries that the activity will make to connect to a remote
            machine when it encounters an error. The default is to not retry.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSConnectionRetryIntervalSec">
            <summary>
            Defines the delay, in seconds, between connection retry attempts.
            The default is one second.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSPort">
            <summary>
            The port to use in a remote connection attempt. The default is:
            HTTP: 5985, HTTPS: 5986.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSUseSsl">
            <summary>
            Determines whether to use SSL in the connection attempt. The default is false.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSAllowRedirection">
            <summary>
            Determines whether to allow redirection by the remote computer. The default is false.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSApplicationName">
            <summary>
            Defines the remote application name to connect to. The default is "wsman".
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSConfigurationName">
            <summary>
            Defines the remote configuration name to connect to. The default is "Microsoft.PowerShell".
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSConnectionUri">
            <summary>
            Defines the fully-qualified remote URI to connect to. When specified, the PSComputerName,
            PSApplicationName, PSConfigurationName, and PSPort are not used.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSAuthentication">
            <summary>
            Defines the authentication type to be used in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSCertificateThumbprint">
            <summary>
            Defines the certificate thumbprint to be used in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.PSSessionOption">
            <summary>
            Defines any session options to be used in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSRemotingActivity.SupportsCustomRemoting">
            <summary>
            Declares whether this command supports its own custom remoting.
            Commands that support their own custom remoting should return TRUE
            from this property, and use the PSComputerName parameter as required
            when the 'PSRemotingBehavior' argument is set to 'Custom'.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSRemotingActivity.GetIsComputerNameSpecified(System.Activities.ActivityContext)">
            <summary>
            Returns TRUE if the PSComputerName argument has been specified, and
            contains at least one target.
            </summary>
            <param name="context">The workflow NativeActivityContext</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSRemotingActivity.GetImplementation(System.Activities.NativeActivityContext)">
            <summary>
            Prepare commands that use PSRP for remoting...
            </summary>
            <param name="context">The activity context to use</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSRemotingActivity.CreatePowerShellInstance(System.Activities.NativeActivityContext,System.Management.Automation.Runspaces.WSManConnectionInfo,System.Collections.Generic.List{Microsoft.PowerShell.Activities.ActivityImplementationContext})">
            <summary>
            Creates Powershell instance and adds the command to it
            </summary>
            <param name="context">The activity context to use</param>
            <param name="connection">The wsman connection to use</param>
            <param name="commands">The list of commands</param>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity">
            <summary>
            Base class for activities that can use WsMan directly to contact ta managed node.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.PSComputerName">
            <summary>
            The computer name to invoke this activity on.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.PSCredential">
            <summary>
            Defines the credential to use in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.PSAuthentication">
            <summary>
            Defines the authentication type to be used in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.PSCertificateThumbprint">
            <summary>
            Defines the certificate thumbprint to be used in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.PSConnectionRetryCount">
            <summary>
            Defines the number of retries that the activity will make to connect to a remote
            machine when it encounters an error. The default is to not retry.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.PSConnectionRetryIntervalSec">
            <summary>
            Defines the delay, in seconds, between connection retry attempts.
            The default is one second.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.ResourceUri">
            <summary>
            Defines the resource URI used by the CIM cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.PSPort">
            <summary>
            The port to use in a remote connection attempt. The default is:
            HTTP: 5985, HTTPS: 5986.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.PSUseSsl">
            <summary>
            Determines whether to use SSL in the connection attempt. The default is false.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.PSSessionOption">
            <summary>
            Defines any session options to be used in the remote connection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.CimSession">
            <summary>
            CIM Sessions to use for this activity.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.ModuleDefinition">
            <summary>
            Contains the powershell text defining the mode for this command. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.GetIsComputerNameSpecified(System.Activities.ActivityContext)">
            <summary>
            Returns TRUE if the PSComputerName argument has been specified, and
            contains at least one target.
            </summary>
            <param name="context">The workflow NativeActivityContext</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSGeneratedCIMActivity.GetImplementation(System.Activities.NativeActivityContext)">
            <summary>
            Prepare commands that use CIM for remoting...
            </summary>
            <param name="context">The activity context to use</param>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.GenericCimCmdletActivity">
            <summary>
            Base class for the built-in generic CIM cmdlets.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.GenericCimCmdletActivity.ModuleDefinition">
            <summary>
            For these cmdlets, there is no defining text.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.GenericCimCmdletActivity.TypeImplementingCmdlet">
            <summary>
            The .NET type that implements the associated cmdlet
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.CimActivityImplementationContext">
            <summary>
            Provides additional functionalty for CIM activity implementations.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.CimActivityImplementationContext.#ctor(Microsoft.PowerShell.Activities.ActivityImplementationContext,System.String,System.Management.Automation.PSCredential,System.String,System.Nullable{System.Management.Automation.Runspaces.AuthenticationMechanism},System.Boolean,System.UInt32,System.Management.Automation.Remoting.PSSessionOption,Microsoft.Management.Infrastructure.CimSession,Microsoft.Management.Infrastructure.Options.CimSessionOptions,System.String,System.Uri)">
            <summary>
            Create an instance of the CIM activity implementation class
            </summary>
            <param name="activityImplementationContext"></param>
            <param name="computerName"></param>
            <param name="credential"></param>
            <param name="certificateThumbprint"></param>
            <param name="authenticationMechanism"></param>
            <param name="useSsl"></param>
            <param name="port"></param>
            <param name="sessionOption"></param>
            <param name="session"></param>
            <param name="cimSessionOptions"></param>
            <param name="moduleDefinition"></param>
            <param name="resourceUri"></param>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.CimActivityImplementationContext.ModuleScriptBlock">
            <summary>
            Gets the scriptblock that implements this activity's command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.CimActivityImplementationContext.ResourceUri">
            <summary>
            Defines the resource URI used by the CIM cmdlet.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.CimActivityImplementationContext.Session">
            <summary>
            The session specified for this activity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.CimActivityImplementationContext.SessionOptions">
            <summary>
            The session options used to create the session for this activity...
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.CimActivityImplementationContext.ComputerName">
            <summary>
            The name of the computer this activity targets 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.CimActivityImplementationContext.ModuleDefinition">
            <summary>
            Base64 encoded string defining this module...
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.CimActivityImplementationContext.CleanUp">
            <summary>
            Return the session to the session manager
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.CimConnectionManager">
            <summary>
            Class to manage reuse of CIM connections.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.CimConnectionManager.GetSession(System.String,System.Management.Automation.PSCredential,System.String,System.Management.Automation.Runspaces.AuthenticationMechanism,Microsoft.Management.Infrastructure.Options.CimSessionOptions,System.Boolean,System.UInt32,System.Management.Automation.Remoting.PSSessionOption)">
            <summary>
            Get a CIM session for the target computer
            </summary>
            <param name="computerName"></param>
            <param name="credential"></param>
            <param name="certificateThumbprint"></param>
            <param name="authenticationMechanism"></param>
            <param name="sessionOptions"></param>
            <param name="useSsl"></param>
            <param name="port"></param>
            <param name="pssessionOption"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.CimConnectionManager.ReleaseSession(System.String,Microsoft.Management.Infrastructure.CimSession)">
            <summary>
            Return a session to the session table.
            </summary>
            <param name="computerName"></param>
            <param name="session"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.CimConnectionManager.GetGlobalCimConnectionManager">
            <summary>
            Gets the global instance of the CIM session manager
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSResumableActivityContext">
            <summary>
            Class the describes an activity host arguments
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSResumableActivityContext.#ctor(System.Management.Automation.PowerShellStreams{System.Management.Automation.PSObject,System.Management.Automation.PSObject})">
            <summary>
            PSActivityHostArguments
            </summary>
            <param name="streams"></param>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSResumableActivityContext.Streams">
            <summary>
            Gets and sets Streams
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSResumableActivityContext.Error">
            <summary>
            Gets Errors
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSResumableActivityContext.Failed">
            <summary>
            Get failed
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSActivityEnvironment">
            <summary>
            Class the describes an activity host policy
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivityEnvironment.Modules">
            <summary>
            Collection of modules that an activity is
            dependent upon
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSActivityEnvironment.Variables">
            <summary>
            Collection of variables that an activity is
            dependent upon
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSActivityHostController">
            <summary>
            Activity host manager interface. This interface can be
            used to implement various activity hosts
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivityHostController.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowRuntime)">
            <summary>
            Runtime should be provided for excessing the runtime activity mode
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSActivityHostController.RunInActivityController(System.Activities.Activity)">
            <summary>
            Identifies whether the specified activity should run in the activity
            host or in-proc
            </summary>
            <param name="activity">activity that needs to be verified</param>
            <returns>true, if the activity should run in the activity
            host
            false otherwise</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSResumableActivityHostController">
            <summary>
            This class will be used for disconnected execution where the 
            Job Id and bookmark will be used resume the execution of workflow
            after the completion of activity controller work.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSResumableActivityHostController.#ctor(Microsoft.PowerShell.Workflow.PSWorkflowRuntime)">
            <summary>
            Default Constructor
            </summary>
            <param name="runtime"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSResumableActivityHostController.StartResumablePSCommand(System.Guid,System.Activities.Bookmark,System.Management.Automation.PowerShell,System.Management.Automation.PowerShellStreams{System.Management.Automation.PSObject,System.Management.Automation.PSObject},Microsoft.PowerShell.Activities.PSActivityEnvironment,Microsoft.PowerShell.Activities.PSActivity)">
            <summary>
            StartResumablePSCommand
            </summary>
            <param name="jobInstanceId"></param>
            <param name="bookmark"></param>
            <param name="command"></param>
            <param name="streams"></param>
            <param name="environment"></param>
            <param name="activityInstance"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSResumableActivityHostController.StopAllResumablePSCommands(System.Guid)">
            <summary>
            StopResumablePSCommand
            </summary>
            <param name="jobInstanceId"></param>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSResumableActivityHostController.SupportDisconnectedPSStreams">
            <summary>
            This property indentifies if the Activity controller is running in disconnected mode 
            or not. If it is running in disconnected mode then all the output and data streams will be
            provied as new objects.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSWorkflowHost">
            <summary>
            Interface that defines the PowerShell workflow host
            Workflow host defines the set of services that are
            made available to an activity
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSWorkflowHost.PSActivityHostController">
            <summary>
            The activity host manager to use for processing
            activities
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSWorkflowHost.RemoteRunspaceProvider">
            <summary>
            The provider to be used for obtaining runspaces
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSWorkflowHost.LocalRunspaceProvider">
            <summary>
            The provider used to obtain local in-proc 
            runspaces
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.PSWorkflowHost.UnboundedLocalRunspaceProvider">
            <summary>
            The provider which will supply an unbounded number of
            runspaces - to be used in PowerShell value
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.RunspaceProvider">
            <summary>
            Class that provides a runspace with the specified options
            and constraints
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.RunspaceProvider.BeginGetRunspace(System.Management.Automation.Runspaces.WSManConnectionInfo,System.UInt32,System.UInt32,System.AsyncCallback,System.Object)">
            <summary>
            Begin for obtaining a runspace for the specified ConnectionInfo
            </summary>
            <param name="connectionInfo">connection info to be used for remote connections</param>
            <param name="retryCount">number of times to retry</param>
            <param name="callback">optional user defined callback</param>
            <param name="state">optional user specified state</param>
            <param name="retryInterval">time in milliseconds before the next retry has to be attempted</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <returns>async result</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.RunspaceProvider.EndGetRunspace(System.IAsyncResult)">
            <summary>
            End for obtaining a runspace for the specified connection info
            </summary>
            <param name="asyncResult">async result to end on</param>
            <exception cref="T:System.NotImplementedException"></exception>
            <returns>remote runspace to invoke commands on</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.RunspaceProvider.GetRunspace(System.Management.Automation.Runspaces.WSManConnectionInfo,System.UInt32,System.UInt32)">
            <summary>
            Get runspace for the specified connection info to be
            used for running commands
            </summary>
            <param name="connectionInfo">connection info to use</param>
            <param name="retryCount">retry count </param>
            <param name="retryInterval">retry interval in ms</param>
            <returns>remote runspace to use</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.RunspaceProvider.ReleaseRunspace(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Release the runspace once the activity is finished using the same
            </summary>
            <param name="runspace">runspace to release</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.RunspaceProvider.ReadyForDisconnect(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Callback to indicate that this runspace been initiated with
            a pipeline and can be disconnected
            </summary>
            <param name="runspace">runspace that needs to be marked as
            ready for disconnect</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.RunspaceProvider.RequestCleanup(System.Management.Automation.Runspaces.WSManConnectionInfo,System.Threading.WaitCallback,System.Object)">
             <summary>
             Request a cleanup to the destination specified in the
             connection info. This means no runspaces will be held
             to the specified connection info.
             </summary>
             <param name="connectionInfo">connection info to which
             cleanup is desired</param>
            <param name="callback">callback to invoke</param>
             <param name="state">caller specified state</param>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.RunspaceProvider.IsDisconnectedByRunspaceProvider(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            Checks to see if the provider intentionally disconnected a runspace
            or it went into disconnected state due to network issues
            </summary>
            <param name="runspace">runspace that needs to be checked</param>
            <returns>true - when intentionally disconnected
                     false - disconnected due to network issues</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.DefaultWorkflowHost">
            <summary>
            Default workflow host implementation
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DefaultWorkflowHost.PSActivityHostController">
            <summary>
            The activity host manager to use for processing
            activities
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DefaultWorkflowHost.RemoteRunspaceProvider">
            <summary>
            The provider to be used for obtaining runspaces
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DefaultWorkflowHost.LocalRunspaceProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DefaultWorkflowHost.Instance">
            <summary>
            return the singleton instance
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.PSCleanupActivity">
            <summary>
            Base activity for cleanup activities
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSCleanupActivity.GetPowerShell(System.Activities.NativeActivityContext)">
            <summary>
            Creates and returns an empty powershell
            </summary>
            <param name="context">activity context</param>
            <returns>A new activity implementation context</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.PSCleanupActivity.DoCleanup(Microsoft.PowerShell.Activities.RunCommandsArguments,System.Threading.WaitCallback)">
            <summary>
            Method that needs to be overrided to perform the actual
            cleanup action
            </summary>
            <param name="args">RunCommandsArguments</param>
            <param name="callback">callback to call when cleanup 
            is done</param>
            <remarks>The signature forces this method to be internal</remarks>
        </member>
        <member name="T:Microsoft.PowerShell.Activities.DisablePSWorkflowConnection">
            <summary>
            Activity to cleanup all Runspaces (PSRP connections) to
            a remote machine
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Activities.DisablePSWorkflowConnection.TimeoutSec">
            <summary>
            Provides access to the Authentication parameter.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DisablePSWorkflowConnection.#ctor">
            <summary>
            Set the display name of the activity
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DisablePSWorkflowConnection.GetPowerShell(System.Activities.NativeActivityContext)">
            <summary>
            Creates and returns an empty powershell
            </summary>
            <param name="context">activity context</param>
            <returns>A new activity implementation context</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Activities.DisablePSWorkflowConnection.DoCleanup(Microsoft.PowerShell.Activities.RunCommandsArguments,System.Threading.WaitCallback)">
            <summary>
            Method that needs to be overrided to perform the actual
            cleanup action
            </summary>
            <param name="args">RunCommandsArguments</param>
            <param name="callback">callback to call when cleanup 
            is done</param>
            <remarks>The signature forces this method to be internal</remarks>
        </member>
        <member name="T:Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Resources.ActivityFailedDueToRunspaceDisconnect">
            <summary>
              Looks up a localized string similar to The activity failed because the connection to the remote computer &apos;{0}&apos; was disconnected..
            </summary>
        </member>
        <member name="P:Resources.ActivityNotCached">
            <summary>
              Looks up a localized string similar to The workflow cannot be started because the compiled activity for the workflow was not found. Cache the workflow definition by calling DefinitionCache.Instance.Add..
            </summary>
        </member>
        <member name="P:Resources.ActivityNotFound">
            <summary>
              Looks up a localized string similar to Could not find an activity for the command name &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Resources.ActivityParameterGroup">
            <summary>
              Looks up a localized string similar to Activity-Specific Parameters.
            </summary>
        </member>
        <member name="P:Resources.AsJobandJobNameNotAllowed">
            <summary>
              Looks up a localized string similar to The argument to -PSParameterCollection can not contain AsJob, JobName, InputObject or PSParameterCollection as entries. Remove the extra entries and try again..
            </summary>
        </member>
        <member name="P:Resources.AsyncResultAlreadyCompleted">
            <summary>
              Looks up a localized string similar to The async result is already finished. A finished operation cannot be called twice..
            </summary>
        </member>
        <member name="P:Resources.AsyncResultAlreadyEnded">
            <summary>
              Looks up a localized string similar to An End operation has already been called for this async result..
            </summary>
        </member>
        <member name="P:Resources.AsyncResultNotValid">
            <summary>
              Looks up a localized string similar to The IAsyncResult specified is not valid..
            </summary>
        </member>
        <member name="P:Resources.CannotRemoveWorkflowJobDirectly">
            <summary>
              Looks up a localized string similar to Cannot remove the PSWorkflowJob without removing its parent. Please remove the ContainerParentJob that contains this PSWorkflowJob..
            </summary>
        </member>
        <member name="P:Resources.CannotSupplyUriAndComputername">
            <summary>
              Looks up a localized string similar to Cannot supply both connection URI and computer name..
            </summary>
        </member>
        <member name="P:Resources.CmdletDoesNotImplementInputObjectProperty">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; cmdlet does not implement the InputObject property..
            </summary>
        </member>
        <member name="P:Resources.CompilationErrorWhileBuildingWorkflows">
            <summary>
              Looks up a localized string similar to Compilation error while building dependent workflows. For details see {0}..
            </summary>
        </member>
        <member name="P:Resources.CompletedString">
            <summary>
              Looks up a localized string similar to Completed.
            </summary>
        </member>
        <member name="P:Resources.ConnectivityGroup">
            <summary>
              Looks up a localized string similar to Connectivity.
            </summary>
        </member>
        <member name="P:Resources.CredentialParameterAssignedWithNoComputerName">
            <summary>
              Looks up a localized string similar to The PSCredential parameter is supported only when the PSComputerName or PSConnectionUri parameters are used. The PSCredential parameter has been ignored..
            </summary>
        </member>
        <member name="P:Resources.CredentialParameterCannotBeSpecifiedWithNegotiateWithImplicitAuthentication">
            <summary>
              Looks up a localized string similar to A credential cannot be specified when NegotiateWithImplicitCredential is specified as the value of Authentication..
            </summary>
        </member>
        <member name="P:Resources.CredentialParameterCannotBeSpecifiedWithPSCertificateThumbPrint">
            <summary>
              Looks up a localized string similar to A CertificateThumbprint cannot be specified when Credential is specified..
            </summary>
        </member>
        <member name="P:Resources.CustomRemotingNotSupported">
            <summary>
              Looks up a localized string similar to This activity does not support custom remote management..
            </summary>
        </member>
        <member name="P:Resources.DebuggerCannotModifyWFVars">
             <summary>
               Looks up a localized string similar to Workflow variables cannot be modified inside the debugger.  The command or script did not run because it attempted to modify variable &apos;${0}&apos;.
            .
             </summary>
        </member>
        <member name="P:Resources.DebuggerStopReason">
            <summary>
              Looks up a localized string similar to The debugger Quit command has stopped the workflow job..
            </summary>
        </member>
        <member name="P:Resources.DependModuleImportFailed">
            <summary>
              Looks up a localized string similar to The activity cannot continue running because an error occurred while importing dependent module(s) &apos;{0}&apos; specified for activity &apos;{1}&apos;.  To fix this problem, verify that the module exists on the computer. If the module is not required, remove references to the module from the activity..
            </summary>
        </member>
        <member name="P:Resources.DuplicateInstanceId">
            <summary>
              Looks up a localized string similar to A duplicate instance ID was found. The instance ID already exists..
            </summary>
        </member>
        <member name="P:Resources.ElapsedTimeReached">
            <summary>
              Looks up a localized string similar to An elapsed time-out occurred, and the workflow was stopped..
            </summary>
        </member>
        <member name="P:Resources.ErrorMessageForPersistence">
            <summary>
              Looks up a localized string similar to The workflow job cannot be suspended because it does not include checkpoints (also called persistence points). To make the workflow suspendable, use the PSPersist parameter of the workflow. To suspend the workflow forcibly, use the Force parameter of the Suspend-Job cmdlet..
            </summary>
        </member>
        <member name="P:Resources.ErrorWhileExecutingActivityAction">
            <summary>
              Looks up a localized string similar to An error occurred while trying to run the activity..
            </summary>
        </member>
        <member name="P:Resources.ErrorWhileValidatingWorkflow">
            <summary>
              Looks up a localized string similar to An exception has occurred while validating the workflow..
            </summary>
        </member>
        <member name="P:Resources.ExitReason">
            <summary>
              Looks up a localized string similar to Workflow complete..
            </summary>
        </member>
        <member name="P:Resources.FailedString">
            <summary>
              Looks up a localized string similar to Failed.
            </summary>
        </member>
        <member name="P:Resources.ForceSuspendTimeout">
            <summary>
              Looks up a localized string similar to The force-suspend time-out period cannot be zero or null. Specify a time-out period that is greater than zero..
            </summary>
        </member>
        <member name="P:Resources.ImportingWorkflowFrom">
            <summary>
              Looks up a localized string similar to Importing workflow from file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Resources.InputAndOutputGroup">
            <summary>
              Looks up a localized string similar to Input and Output.
            </summary>
        </member>
        <member name="P:Resources.InstanceOwnerIdMismatch">
            <summary>
              Looks up a localized string similar to The OwnerId of the instance is mismatched..
            </summary>
        </member>
        <member name="P:Resources.InstanceVersionMismatch">
            <summary>
              Looks up a localized string similar to The Version of the instance is mismatched..
            </summary>
        </member>
        <member name="P:Resources.InvalidActivity">
            <summary>
              Looks up a localized string similar to The activity is not valid: {0}.
            </summary>
        </member>
        <member name="P:Resources.InvalidAsyncResult">
            <summary>
              Looks up a localized string similar to The async result from the file provider is not valid..
            </summary>
        </member>
        <member name="P:Resources.InvalidAsyncResultSpecified">
            <summary>
              Looks up a localized string similar to The specified IAsyncResultObject is not valid..
            </summary>
        </member>
        <member name="P:Resources.InvalidBookmark">
            <summary>
              Looks up a localized string similar to The bookmark &apos;{0}&apos; is not valid; it does not exist in the workflow engine..
            </summary>
        </member>
        <member name="P:Resources.InvalidImplementationContext">
            <summary>
              Looks up a localized string similar to The specified ActivityImplementationContext is not of type CimActivityImplementationContext..
            </summary>
        </member>
        <member name="P:Resources.InvalidLabel">
            <summary>
              Looks up a localized string similar to The label is not valid: The label &apos;{0}&apos; doesn&apos;t exist..
            </summary>
        </member>
        <member name="P:Resources.InvalidRunspaceSpecified">
            <summary>
              Looks up a localized string similar to The specified runspace is not valid..
            </summary>
        </member>
        <member name="P:Resources.InvalidWorkflowDefinitionState">
            <summary>
              Looks up a localized string similar to The workflow definition has been recycled, because the workflow definition cache limit of {0} has been reached. Import the workflow or module again, and then retry the operation..
            </summary>
        </member>
        <member name="P:Resources.InvalidWorkflowExtension">
            <summary>
              Looks up a localized string similar to Workflow files must have a file name extension of .xaml or .dll, not {0}. If you are using a workflow with a file name extension of .dll, then you must pass only one assembly..
            </summary>
        </member>
        <member name="P:Resources.JobCannotBeStarted">
            <summary>
              Looks up a localized string similar to The job cannot be started. The job state must be NotStarted and the job can only be started once..
            </summary>
        </member>
        <member name="P:Resources.JobNotFound">
            <summary>
              Looks up a localized string similar to The job could not be removed because a job matching the specified criteria could not be found..
            </summary>
        </member>
        <member name="P:Resources.JobQueuedForResume">
            <summary>
              Looks up a localized string similar to The job has been added to the queue to be resumed..
            </summary>
        </member>
        <member name="P:Resources.JobStopInProgress">
            <summary>
              Looks up a localized string similar to Stop operation is in progress..
            </summary>
        </member>
        <member name="P:Resources.JobStoppedByDebugger">
            <summary>
              Looks up a localized string similar to The debugger Quit command has stopped the workflow job..
            </summary>
        </member>
        <member name="P:Resources.JobSuspensionInProgress">
            <summary>
              Looks up a localized string similar to Suspend operation is in progress..
            </summary>
        </member>
        <member name="P:Resources.NameNotSpecifiedForParam">
            <summary>
              Looks up a localized string similar to A parameter element specified in the configuration does not have a Name attribute. .
            </summary>
        </member>
        <member name="P:Resources.NewJobDefinitionNull">
            <summary>
              Looks up a localized string similar to The workflow job could not be created because the JobInvocationInfo does not contain a JobDefinition. Initialize the JobInvocationInfo with a JobDefinition to create a workflow job..
            </summary>
        </member>
        <member name="P:Resources.NewJobWrongType">
            <summary>
              Looks up a localized string similar to The workflow job could not be created because the JobInvocationInfo specifies a type other than WorkflowJobSourceAdapter. Correct the JobSourceAdapter type or verify that the correct type is being used..
            </summary>
        </member>
        <member name="P:Resources.NoMatchingWorkflowWasFound">
            <summary>
              Looks up a localized string similar to No workflows were found in the specified path &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Resources.NotSupportedLanguageMode">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; language mode  is not supported. Supported language modes are FullLanguage and ConstrainedLanguage..
            </summary>
        </member>
        <member name="P:Resources.NoWorkflowInstance">
            <summary>
              Looks up a localized string similar to A workflow instance does not exist for the specified Instance ID..
            </summary>
        </member>
        <member name="P:Resources.NoWorkflowProvided">
            <summary>
              Looks up a localized string similar to Null or empty workflow is provided..
            </summary>
        </member>
        <member name="P:Resources.ObjectWasCreatedAtNotAllowedLocation">
             <summary>
               Looks up a localized string similar to &quot;Internal Error: The object is marked for restricted construction, but another type is constructing it elsewhere.  
            Target Type:{0}
            Allowed Creator Type: {1}
            Actual Creator Type: {2}
            Method: {3}.
             </summary>
        </member>
        <member name="P:Resources.OneComputerNameAllowed">
            <summary>
              Looks up a localized string similar to Only one computer name is allowed..
            </summary>
        </member>
        <member name="P:Resources.OnlyOneDefaultParameterCollectionAllowed">
            <summary>
              Looks up a localized string similar to The argument to -PSParameterCollection can only contain one entry where PSComputerName is set to &apos;*&apos;. Remove the extra entries and try again..
            </summary>
        </member>
        <member name="P:Resources.ParallelScriptBlockSyntax">
            <summary>
              Looks up a localized string similar to The syntax of a parallel script block is &apos;Parallel { &lt;commands&gt; }&apos;.
            </summary>
        </member>
        <member name="P:Resources.ParameterCollectionOnlyUsedWithAsJobAndJobName">
            <summary>
              Looks up a localized string similar to The PSParameterCollection parameter can only be used with AsJob, JobName and InputObject. Move the additional parameters to within the PSParameterCollection argument and try again..
            </summary>
        </member>
        <member name="P:Resources.ParamSpecifiedMoreThanOnce">
            <summary>
              Looks up a localized string similar to Parameter {0} has been specified more than once. Remove multiple references to this parameter from the session configuration, and then try again..
            </summary>
        </member>
        <member name="P:Resources.PersistencePathToolLong">
            <summary>
              Looks up a localized string similar to The value of the PersistencePath parameter {0} exceeds the maximum allowed length. The persistence path should not be greater than {1} characters..
            </summary>
        </member>
        <member name="P:Resources.PersistenceSizeReached">
            <summary>
              Looks up a localized string similar to The Persistence store has reached its maximum size. Free up storage space by removing completed jobs..
            </summary>
        </member>
        <member name="P:Resources.ProcessDebugCommandNotInDebugStopMode">
            <summary>
              Looks up a localized string similar to &quot;Cannot process the debugger command until the debugger is stopped.&quot;.
            </summary>
        </member>
        <member name="P:Resources.ProgressPositionMessage">
            <summary>
              Looks up a localized string similar to  {0} line:{1} char:{2}.
            </summary>
        </member>
        <member name="P:Resources.ProvidedValueIsOutOfRange">
            <summary>
              Looks up a localized string similar to Value {0} is out of the allowed range. Allowed range is from {1} to {2}..
            </summary>
        </member>
        <member name="P:Resources.RemovingWrokflowInstance">
            <summary>
              Looks up a localized string similar to Removing workflow instance from the table..
            </summary>
        </member>
        <member name="P:Resources.ResumeNotValidState">
            <summary>
              Looks up a localized string similar to The workflow could not be resumed..
            </summary>
        </member>
        <member name="P:Resources.RetryingAction">
            <summary>
              Looks up a localized string similar to Retrying activity action: attempt {0}..
            </summary>
        </member>
        <member name="P:Resources.RetryingConnection">
            <summary>
              Looks up a localized string similar to Retrying activity connection: attempt {0} of {1}..
            </summary>
        </member>
        <member name="P:Resources.RunningString">
            <summary>
              Looks up a localized string similar to Running.
            </summary>
        </member>
        <member name="P:Resources.RunningTimeExceeded">
            <summary>
              Looks up a localized string similar to The activity has exceeded the specified maximum running time of {0} seconds..
            </summary>
        </member>
        <member name="P:Resources.RunningTimeReached">
            <summary>
              Looks up a localized string similar to Because a running time-out has occurred, the workflow has been stopped..
            </summary>
        </member>
        <member name="P:Resources.SerializationErrorException">
            <summary>
              Looks up a localized string similar to The input objects cannot be serialized. Serialized data is required to suspend and resume workflows. To resolve the error, verify that the values of all variables and parameters are of types that can be serialized..
            </summary>
        </member>
        <member name="P:Resources.SerializationWarning">
            <summary>
              Looks up a localized string similar to The input objects cannot be serialized. This might prevent the workflow from being resumed correctly. The serialization error might indicate a problem with the data contract that is defined at the type or attribute level. To resolve the problem, verify that the values of all variables and parameters can be serialized. Serialization error is: {0}..
            </summary>
        </member>
        <member name="P:Resources.ShutdownAbort">
            <summary>
              Looks up a localized string similar to Shutdown request is in progress, workflow is suspending..
            </summary>
        </member>
        <member name="P:Resources.SuspendedJobRecoveredFromPreviousSession">
            <summary>
              Looks up a localized string similar to This PSWorkflowJob was recovered from another session in a suspended state. This can indicate that the workflow was interrupted by a process failure, or a system restart. Run Resume-Job to try resuming the workflow..
            </summary>
        </member>
        <member name="P:Resources.SuspendNotValidState">
            <summary>
              Looks up a localized string similar to Suspend could not be completed..
            </summary>
        </member>
        <member name="P:Resources.UnableToStartWorkflow">
            <summary>
              Looks up a localized string similar to The workflow &apos;{0}&apos; could not be started: {1}.
            </summary>
        </member>
        <member name="P:Resources.UnblockNotSupported">
            <summary>
              Looks up a localized string similar to Unblock is not a supported operation on a PSWorkflowJob..
            </summary>
        </member>
        <member name="P:Resources.UninitializedSpecification">
            <summary>
              Looks up a localized string similar to The workflow job could not be created because the JobInvocationInfo was not properly initialized. Initialize the JobInvocationInfo with workflow information..
            </summary>
        </member>
        <member name="P:Resources.ValueFromPipelineNotSupported">
            <summary>
              Looks up a localized string similar to Parameters defined for workflow functions do not support ValueFromPipeline. Remove this attribute and import or define the workflow again..
            </summary>
        </member>
        <member name="P:Resources.ValueNotSpecifiedForParam">
            <summary>
              Looks up a localized string similar to A parameter element specified in the configuration does not have a Value attribute. .
            </summary>
        </member>
        <member name="P:Resources.WarningMessageForPersistence">
             <summary>
               Looks up a localized string similar to This workflow job cannot be suspended because there are no checkpoints (also called persistence points) in the workflow. To make the workflow job suspendable, add checkpoints to the workflow.
            
            For more information about how to add checkpoints, see the help topics for Windows PowerShell Workflow..
             </summary>
        </member>
        <member name="P:Resources.WFCallingWFNotSupported">
            <summary>
              Looks up a localized string similar to Workflows cannot call workflows on this platform..
            </summary>
        </member>
        <member name="P:Resources.WorkflowAlreadyLoaded">
            <summary>
              Looks up a localized string similar to This workflow is already loaded..
            </summary>
        </member>
        <member name="P:Resources.WorkflowChildCouldNotBeRemoved">
            <summary>
              Looks up a localized string similar to One or more workflows that are part of the specified job could not be removed..
            </summary>
        </member>
        <member name="P:Resources.WorkflowInstanceIncompletelyPersisted">
            <summary>
              Looks up a localized string similar to The workflow job cannot be resumed, either because persistence data could not be saved completely, or saved persistence data has been corrupted.  You must restart the workflow..
            </summary>
        </member>
        <member name="P:Resources.WorkflowInstanceStateCorrupted">
            <summary>
              Looks up a localized string similar to The workflow instance state file does not exist..
            </summary>
        </member>
        <member name="P:Resources.WorkflowNameInvalid">
            <summary>
              Looks up a localized string similar to The workflow name &quot;{0}&quot; is not a valid workflow. Specify a valid workflow name and then try the command again..
            </summary>
        </member>
        <member name="P:Resources.WorkflowNotExecuting">
            <summary>
              Looks up a localized string similar to The workflow is not running. The current state of the workflow instance is {0}..
            </summary>
        </member>
        <member name="P:Resources.WorkflowNotLoaded">
            <summary>
              Looks up a localized string similar to The workflow instance is not yet loaded..
            </summary>
        </member>
        <member name="P:Resources.XamlNotNull">
            <summary>
              Looks up a localized string similar to The provided XAML cannot be null..
            </summary>
        </member>
        <member name="P:Resources.XamlWorkflowsNotSupported">
            <summary>
              Looks up a localized string similar to Cannot load the workflow. Only signed in-box XAML-based workflows or script-based workflows are supported in the current language mode..
            </summary>
        </member>
    </members>
</doc>
