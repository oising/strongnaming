<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PowerShell.ConsoleHost</name>
    </assembly>
    <members>
        <member name="M:Microsoft.PowerShell.CommandLineParameterParser.Parse(System.String[])">
            <summary>
            
            Processes all the command line parameters to ConsoleHost.  Returns the exit code to be used to terminate the process, or
            Success to indicate that the program should continue running.
            
            </summary>
            <param name="args">
            
            The command line parameters to be processed.
            
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleControl">
             <summary>
            
             Class ConsoleControl is used to wrap the various win32 console APIs 1:1 (i.e. at a low level, without attempting to be a 
             "true" object-oriented library.
            
             </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.MouseInput.X">
            <summary>
            The absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the dwFlags member. 
            Absolute data is specified as the x coordinate of the mouse; relative data is specified as the number of pixels moved.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.MouseInput.Y">
            <summary>
            The absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the dwFlags member. 
            Absolute data is specified as the y coordinate of the mouse; relative data is specified as the number of pixels moved.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.MouseInput.MouseData">
            <summary>
            If dwFlags contains MOUSEEVENTF_WHEEL, then mouseData specifies the amount of wheel movement. A positive value indicates that the wheel was rotated forward, away from the user; 
            a negative value indicates that the wheel was rotated backward, toward the user. One wheel click is defined as WHEEL_DELTA, which is 120.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.MouseInput.Flags">
            <summary>
            A set of bit flags that specify various aspects of mouse motion and button clicks.
            See (http://msdn.microsoft.com/en-us/library/ms646273(VS.85).aspx)
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.MouseInput.Time">
            <summary>
            The time stamp for the event, in milliseconds. If this parameter is 0, the system will provide its own time stamp. 
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.MouseInput.ExtraInfo">
            <summary>
            An additional value associated with the mouse event. An application calls GetMessageExtraInfo to obtain this extra information
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.KeyboardInput.Vk">
            <summary>
            A virtual-key code. The code must be a value in the range 1 to 254.
            If the dwFlags member specifies KEYEVENTF_UNICODE, wVk must be 0.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.KeyboardInput.Scan">
            <summary>
            A hardware scan code for the key. If dwFlags specifies KEYEVENTF_UNICODE, 
            wScan specifies a Unicode character which is to be sent to the foreground application.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.KeyboardInput.Flags">
            <summary>
            Specifies various aspects of a keystroke.
            This member can be certain combinations of the following values.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.KeyboardInput.Time">
            <summary>
            The time stamp for the event, in milliseconds.
            If this parameter is zero, the system will provide its own time stamp.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.KeyboardInput.ExtraInfo">
            <summary>
            An additional value associated with the keystroke. 
            Use the GetMessageExtraInfo function to obtain this information. 
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.HardwareInput.Msg">
            <summary>
            The message generated by the input hardware.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.HardwareInput.ParamL">
            <summary>
            The low-order word of the lParam parameter for uMsg.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.HardwareInput.ParamH">
            <summary>
            The high-order word of the lParam parameter for uMsg.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.VirtualKeyCode.Left">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.VirtualKeyCode.Return">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleControl.InputType">
            <summary>
            Specify the type of the input
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.InputType.Mouse">
            <summary>
            INPUT_MOUSE = 0x00
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.InputType.Keyboard">
            <summary>
            INPUT_KEYBOARD = 0x01
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.InputType.Hardware">
            <summary>
            INPUT_HARDWARE = 0x02
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.KeyboardFlag.ExtendedKey">
            <summary>
            If specified, the scan code was preceded by a prefix byte that has the value 0xE0 (224).
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.KeyboardFlag.KeyUp">
            <summary>
            If specified, the key is being released. If not specified, the key is being pressed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.KeyboardFlag.Unicode">
            <summary>
            If specified, wScan identifies the key and wVk is ignored. 
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.KeyboardFlag.ScanCode">
            <summary>
            If specified, the system synthesizes a VK_PACKET keystroke. The wVk parameter must be zero. 
            This flag can only be combined with the KEYEVENTF_KEYUP flag.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            Code to control the display properties of the a window...
            </summary>
            <param name="hWnd">The window to show...</param>
            <param name="nCmdShow">The command to do</param>
            <returns>true it it was successful</returns>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleControl.ConsoleBreakSignal">
            <summary>
            
            Types of control ConsoleBreakSignals received by break Win32Handler delegates
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.AddBreakHandler(Microsoft.PowerShell.ConsoleControl.BreakHandler)">
            <summary>
            Set the console's break handler
            </summary>
            <param name="handlerDelegate"></param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's SetConsoleCtrlHandler fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.RemoveBreakHandler">
            <summary>
            Set the console's break handler to null
            </summary>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's SetConsoleCtrlHandler fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.GetConioDeviceHandle">
            <summary>
            Returns a ConsoleHandle to the console (keyboard device)
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.GetActiveScreenBufferHandle">
            <summary>
            Returns a ConsoleHandle to the active screen buffer, even if that output has been redirected.
            </summary>
            <returns></returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's CreateFile fails
            </exception>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleControl.ConsoleModes">
            <summary>
            
            flags used by ConsoleControl.GetMode and ConsoleControl.SetMode
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.GetMode(Microsoft.Win32.SafeHandles.SafeFileHandle)">
             <summary>
            
             Returns a mask of ConsoleModes flags describing the current modality of the console
            
             </summary>
             <exception cref="T:System.Management.Automation.Host.HostException">
             If Win32's GetConsoleMode fails
             </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.SetMode(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.PowerShell.ConsoleControl.ConsoleModes)">
            <summary>
            
            Sets the current mode of the console device
            
            </summary>
            <param name="consoleHandle">
            
            Handle to the console device returned by GetInputHandle
            
            </param>
            <param name="mode">
            
            Mask of mode flags
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If Win32's SetConsoleMode fails
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.ReadConsole(Microsoft.Win32.SafeHandles.SafeFileHandle,System.String,System.Int32,System.Boolean,System.UInt32@)">
             <summary>
            
             Reads input from the console device according to the mode in effect (see GetMode, SetMode) 
             
             </summary>
             <param name="consoleHandle"></param>
             
             Handle to the console device returned by GetInputHandle
             
             <param name="initialContent">
             
             Initial contents of the edit buffer, if any. charactersToRead should be at least as large as the length of this string.
             
             </param>
             <param name="charactersToRead">
             
             Number of characters to read from the device.
             
             </param>
             <param name="endOnTab">
             
             true to allow the user to terminate input by hitting the tab or shift-tab key, in addition to the enter key
             
             </param>
             <param name="keyState">
             
             bit mask indicating the state of the control/shift keys at the point input was terminated.
             
             </param>
             <returns></returns>
             <exception cref="T:System.Management.Automation.Host.HostException">
             
             If Win32's ReadConsole fails
             
             </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.ReadConsoleInput(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.PowerShell.ConsoleControl.INPUT_RECORD[]@)">
            <summary>
            Wraps Win32 ReadConsoleInput.
            Returns the number of records read in buffer.
            </summary>
            <param name="consoleHandle">
            
            handle for the console where input is read
            
            </param>
            <param name="buffer">
            
            array where data read are stored
            
            </param>
            <returns>
            
            actual number of input records read
            
            </returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's ReadConsoleInput fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.PeekConsoleInput(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.PowerShell.ConsoleControl.INPUT_RECORD[]@)">
            <summary>
            Wraps Win32 PeekConsoleInput
            </summary>
            <param name="consoleHandle">
            
            handle for the console where input is peeked
            
            </param>
            <param name="buffer">
            
            array where data read are stored
            
            </param>
            <returns>
            
            acutal number of input records peeked
            
            </returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's PeekConsoleInput fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.GetNumberOfConsoleInputEvents(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Wraps Win32 GetNumberOfConsoleInputEvents
            </summary>
            <param name="consoleHandle">
            
            handle for the console where the number of console input events is obtained
            
            </param>
            <returns>
            
            number of console input events
            
            </returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's GetNumberOfConsoleInputEvents fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.FlushConsoleInputBuffer(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Wraps Win32 FlushConsoleInputBuffer
            </summary>
            <param name="consoleHandle">
            
            handle for the console where the input buffer is flushed
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's FlushConsoleInputBuffer fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.GetConsoleScreenBufferInfo(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Wraps Win32 GetConsoleScreenBufferInfo
            Returns Console Screen Buffer Info
            </summary>
            <param name="consoleHandle">
            
            Handle for the console where the screen buffer info is obtained
            
            </param>
            <returns>
            
            info about the screen buffer. See the definition of CONSOLE_SCREEN_BUFFER_INFO
            
            </returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's GetConsoleScreenBufferInfo fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.SetConsoleScreenBufferSize(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Management.Automation.Host.Size)">
            <summary>
            set the output buffer's size
            </summary>
            <param name="consoleHandle"></param>
            <param name="newSize"></param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's SetConsoleScreenBufferSize fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.WriteConsoleOutput(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.BufferCell[0:,0:])">
            <summary>
            Wrap32 WriteConsoleOutput.
            This wrapper is not limited to 64K or 8K CHAR_INFO to which Win32's WriteConsoleOutput
            is constrained.
            </summary>
            <param name="consoleHandle">
            
            handle for the console where output is written
            
            </param>
            <param name="origin">
            
            location on screen buffer where writing starts
            
            </param>
            <param name="contents">
            
            2D array of cells. Caller needs to ensure that the array is 2D.
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's GetConsoleScreenBufferInfo fails
            If there is not enough memory to complete calls to Win32's WriteConsoleOutput
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="contents"/> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            If it is illegal to write <paramref name="contents"/> to the output buffer 
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.CheckWriteEdges(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.BufferCell[0:,0:],System.Management.Automation.Host.Rectangle,Microsoft.PowerShell.ConsoleControl.CONSOLE_SCREEN_BUFFER_INFO,System.Int32,System.Int32)">
            <summary>
            Check the existing screen columns left and right of areas to be written
            </summary>
            <param name="consoleHandle"></param>
            <param name="codePage"></param>
            <param name="origin">must be within the screen buffer</param>
            <param name="contents"></param>
            <param name="contentsRegion"></param>
            <param name="bufferInfo"></param>
            <param name="firstLeftTrailingRow"></param>
            <param name="firstRightLeadingRow"></param>
            <exception cref="T:System.ArgumentException">
            If it is illegal to write <paramref name="contents"/> at <paramref name="origin"/>
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If there is not enough memory to complete calls to Win32's ReadConsoleOutput
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.ReadConsoleOutput(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.BufferCell[0:,0:]@)">
            <summary>
            Wrap32 ReadConsoleOutput
            This wrapper is not limited to 64K or 8K CHAR_INFO to which Win32's ReadConsoleOutput
            is constrained.
            </summary>
            <param name="consoleHandle">
            
            handle for the console where output is read
            
            </param>
            <param name="origin">
            
            location on screen buffer where reading begins
            
            </param>
            <param name="contentsRegion">
            
            indicates the area in <paramref name="contents"/> where the data read 
            is stored.
            
            </param>
            <param name="contents">
            
            this is ref because the bounds and size of the array are needed.
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If there is not enough memory to complete calls to Win32's ReadConsoleOutput
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.ShouldCheck(System.Int32,System.Management.Automation.Host.BufferCell[0:,0:],System.Management.Automation.Host.Rectangle)">
            <summary>
            If an edge cell read is a blank, it is potentially part of a double width character. Hence,
             at least one of the left and right edges should be checked
            </summary>
            <param name="edge"></param>
            <param name="contents"></param>
            <param name="contentsRegion"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.ReadConsoleOutputCJK(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt32,System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.BufferCell[0:,0:]@)">
            <summary>
            Can handle reading CJK characters, but the left and right edges are not checked
            </summary>
            <param name="consoleHandle"></param>
            <param name="codePage"></param>
            <param name="origin"></param>
            <param name="contentsRegion"></param>
            <param name="contents"></param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If there is not enough memory to complete calls to Win32's ReadConsoleOutput
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.FillConsoleOutputCharacter(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Char,System.Int32,System.Management.Automation.Host.Coordinates)">
            <summary>
            Wraps Win32 FillConsoleOutputCharacter
            </summary>
            <param name="consoleHandle">
            
            handle for the console where output is filled
            
            </param>
            <param name="character">
            
            character to fill the console output
            
            </param>
            <param name="numberToWrite">
            
            number of times to write character
            
            </param>
            <param name="origin">
            
            location on screen buffer where writing starts
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's FillConsoleOutputCharacter fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.FillConsoleOutputAttribute(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt16,System.Int32,System.Management.Automation.Host.Coordinates)">
            <summary>
            Wraps Win32 FillConsoleOutputAttribute
            </summary>
            <param name="consoleHandle">
            
            handle for the console where output is filled
            
            </param>
            <param name="attribute">
            
            attribute to fill the console output
            
            </param>
            <param name="numberToWrite">
            
            number of times to write attribute
            
            </param>
            <param name="origin">
            
            location on screen buffer where writing starts
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's FillConsoleOutputAttribute fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.ScrollConsoleScreenBuffer(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.PowerShell.ConsoleControl.SMALL_RECT,Microsoft.PowerShell.ConsoleControl.SMALL_RECT,Microsoft.PowerShell.ConsoleControl.COORD,Microsoft.PowerShell.ConsoleControl.CHAR_INFO)">
            <summary>
            Wrap Win32 ScrollConsoleScreenBuffer
            </summary>
            <param name="consoleHandle">
            
            handle for the console where screen buffer is scrolled
            
            </param>
            <param name="scrollRectangle">
            
            area to be scrolled
            
            </param>
            <param name="clipRectangle">
            
            area to be updated after scrolling
            
            </param>
            <param name="destOrigin">
            
            location to which the top left corner of scrollRectangle move
            
            </param>
            <param name="fill">
            
            character and attribute to fill the area vacated by the scroll
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's ScrollConsoleScreenBuffer fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.SetConsoleWindowInfo(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Boolean,Microsoft.PowerShell.ConsoleControl.SMALL_RECT)">
            <summary>
            Wraps Win32 SetConsoleWindowInfo
            </summary>
            <param name="consoleHandle">
            
            handle for the console where window info is set
            
            </param>
            <param name="absolute">
            
            If this parameter is TRUE, the coordinates specify the new upper-left and
            lower-right corners of the window. If it is false, the coordinates are offsets
            to the current window-corner coordinates
            
            </param>
            <param name="windowInfo">
            
            specify the size and position of the console screen buffer's window
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's SetConsoleWindowInfo fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.GetLargestConsoleWindowSize(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Wraps Win32 GetLargestConsoleWindowSize
            </summary>
            <param name="consoleHandle">
            
            handle for the console for which the largest window size is obtained
            
            </param>
            <returns>
            
            the largest window size
            
            </returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's GetLargestConsoleWindowSize fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.GetConsoleWindowTitle">
            <summary>
            Wraps Win32 GetConsoleTitle. 1K is the safe limit experimentally. The 64K limit
            found in the docs is disregarded because it is essentially meaningless.
            </summary>
            <returns>
            
            a string for the title of the window
            
            </returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's GetConsoleTitle fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.SetConsoleWindowTitle(System.String)">
            <summary>
            Wraps Win32 SetConsoleTitle
            </summary>
            <param name="consoleTitle">
            
            a string for the title of the window
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's SetConsoleTitle fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.UpdateLocaleSpecificFont">
            <summary>
            UpdateLocaleSpecificFont is a helper method used to update 
            the console font based on the locale.
            The default font face used for Powershell Console is Consolas.
            However certain locales dont support Consolas font. Hence for such
            locales the console font is updated to Raster dynamically.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleControl.ConsolasSupportedCodePages">
            <summary>
            Supported Consolas code pages obtained from https://docs.microsoft.com/en-us/typography/font-list/consolas
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.WriteConsole(Microsoft.Win32.SafeHandles.SafeFileHandle,System.String)">
            <summary>
            
            Wrap Win32 WriteConsole
            
            </summary>
            <param name="consoleHandle">
            
            handle for the console where the string is written
            
            </param>
            <param name="output">
            
            string that is written
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            if the Win32's WriteConsole fails 
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.SetConsoleTextAttribute(Microsoft.Win32.SafeHandles.SafeFileHandle,System.UInt16)">
            <summary>
            Wraps Win32 SetConsoleTextAttribute
            </summary>
            <param name="consoleHandle">
            
            handle for the console where text attribute is set
            
            </param>
            <param name="attribute">
            
            text attribute to set the console
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            if the Win32's SetConsoleTextAttribute fails 
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.CodePageToCharSet(System.UInt32)">
            <summary>
            From IsConsoleFullWidth in \windows\core\ntcon\server\dbcs.c
            Gets the CharSet for a code page
            </summary>
            <param name="codePage"></param>
            <returns>The CharSet corresponding to the codePage; defaults to OEM_CHARSET (255)</returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.LengthInBufferCellsFE(System.Char,System.IntPtr@,System.IntPtr@,System.Boolean@,Microsoft.PowerShell.ConsoleControl.TEXTMETRIC@)">
            <summary>
            From IsConsoleFullWidth in \windows\core\ntcon\server\dbcs.c
            Precondition: the current code page needs to be a Far East code page.
            
            char F8F8 makes this function return 1 while in CHT, CHS, and KOR it takes 2 cells.
            I don't think we should special-case this because that ought to be a bug outside of
            this code.
            </summary>
            <param name="c"></param>
            <param name="hwnd">window handle</param>
            <param name="hDC">handle to DC; it is not released by this method</param>
            <param name="istmInitialized"></param>
            <param name="tm"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.LengthInBufferCells(System.Char,System.UInt32)">
            <summary>
            From IsConsoleFullWidth in \windows\core\ntcon\server\dbcs.c
            </summary>
            <param name="c"></param>
            <param name="codePage"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.LengthInBufferCells(System.String,System.Int32,System.Boolean)">
            <summary>
            From IsConsoleFullWidth in \windows\core\ntcon\server\dbcs.c
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.IsCJKOutputCodePage(System.UInt32@)">
            <summary>
            Check if the output buffer code page is Japanese, Simplified Chinese, Korean, or Traditional Chinese
            </summary>
            <param name="codePage"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.SetConsoleCursorPosition(Microsoft.Win32.SafeHandles.SafeFileHandle,System.Management.Automation.Host.Coordinates)">
             <summary>
             Wraps Win32 SetConsoleCursorPosition
             </summary>
             <param name="consoleHandle">
             
             handle for the console where cursor position is set
            
             </param>
             <param name="cursorPosition">
             
             location to which the cursor will be set
             
             </param>
             <exception cref="T:System.Management.Automation.Host.HostException">
             If Win32's SetConsoleCursorPosition fails
             </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.GetConsoleCursorInfo(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Wraps Win32 GetConsoleCursorInfo
            </summary>
            <param name="consoleHandle">
            
            handle for the console where cursor info is obtained
            
            </param>
            <returns>
            
            cursor info
            
            </returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's GetConsoleCursorInfo fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.SetConsoleCursorInfo(Microsoft.Win32.SafeHandles.SafeFileHandle,Microsoft.PowerShell.ConsoleControl.CONSOLE_CURSOR_INFO)">
            <summary>
            Wraps Win32 SetConsoleCursorInfo
            </summary>
            <param name="consoleHandle">
            
            handle for the console where cursor info is set
            
            </param>
            <param name="cursorInfo">
            
            cursor info to set the cursor
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's SetConsoleCursorInfo fails
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleControl.CreateHostException(System.Int32,System.String,System.Management.Automation.ErrorCategory,System.String)">
            <summary>
            Helper function to create the proper HostException
            </summary>
            <param name="win32Error"></param>
            <param name="errorId"></param>
            <param name="category"></param>
            <param name="resourceStr"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleControl.NativeMethods">
            <summary>
            
            Class to hold the Native Methods used in this file enclosing class.
            
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Executor">
             <summary>
             
             Executor wraps a Pipeline instance, and provides helper methods for executing commands in that pipeline.  It is used to
             provide bookkeeping and structure to the use of pipeline in such a way that they can be interrupted and cancelled by a 
             break event handler, and track nesting of pipelines (which happens with interrupted input loops (aka subshells) and use
             of tab-completion in prompts.  The bookkeeping is necessary because the break handler is static and global, and there is 
             no means for tying a break handler to an instance of an object.
            
             The class' instance methods manage a single pipeline.  The class' static methods track the outstanding instances to 
             ensure that only one instance is 'active' (and therefore cancellable) at a time.
             
             </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Executor.#ctor(Microsoft.PowerShell.ConsoleHost,System.Boolean,System.Boolean)">
            <summary>
            
            Constructs a new instance
            
            </summary>
            <param name="parent">
            
            A reference to the parent ConsoleHost that created this instance.
            
            </param>
            <param name="useNestedPipelines">
            
            true if the executor is supposed to use nested pipelines; false if not.
            
            </param>
            <param name="isPromptFunctionExecutor">
            
            True if the instance will be used to execute the prompt function, which will delay stopping the pipeline by some
            milliseconds.  This we prevent us from stopping the pipeline so quickly that when the user leans on the ctrl-c key 
            that the prompt "stops working" (because it is being stopped faster than it can run to completion).
            
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.Executor.AsyncPipelineFailureHandler(System.Exception)">
            <summary>
            This method handles the failure in excecuting pipeline asynchronously
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:Microsoft.PowerShell.Executor.ExecuteCommand(System.String,System.Exception@,Microsoft.PowerShell.Executor.ExecutionOptions)">
             <summary>
             
             All calls to the Runspace to execute a command line must be done with this function, which properly synchronizes
             access to the running pipeline between the main thread and the break handler thread.  This synchronization is
             necessary so that executions can be aborted with Ctrl-C (including evaluation of the prompt and collection of
             command-completion candidates.
            
             On any given Executor instance, ExecuteCommand should be called at most once at a time by any one thread. It is NOT
             reentrant.
             
             </summary>
             <param name="command">
             
             The command line to be executed.  Must be non-null.
             
             </param>
             <param name="exceptionThrown">
             
             Receives the Exception thrown by the execution of the command, if any. If no exception is thrown, then set to null.
             Can be tested to see if the execution was successful or not.
             
             </param>
             <param name="options">
             
             options to govern the execution
             
             </param>
             <returns>
             
             the object stream resulting from the execution.  May be null.
             
             </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Executor.ExecuteCommandAndGetResultAsString(System.String,System.Exception@)">
             <summary>
             
             Executes a command (by calling this.ExecuteCommand), and coerces the first result object to a string.  Any Exception 
             thrown in the course of execution is returned thru the exceptionThrown parameter.
             
             </summary>
             <param name="command">
             
             The command to execute.  May be any valid monad command.
             
             </param>
             <param name="exceptionThrown">
             
             Receives the Exception thrown by the execution of the command, if any. If no exception is thrown, then set to null.
             Can be tested to see if the execution was successful or not.
             
             </param>
             <returns>
            
             The string representation of the first result object returned, or null if an exception was thrown or no objects were 
             returned by the command.
             
             </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Executor.ExecuteCommandAndGetResultAsBool(System.String)">
             <summary>
             
             Executes a command (by calling this.ExecuteCommand), and coerces the first result object to a bool.  Any Exception 
             thrown in the course of execution is caught and ignored.
             
             </summary>
             <param name="command">
             
             The command to execute.  May be any valid monad command.
             
             </param>
             <returns>
            
             The Nullable`bool representation of the first result object returned, or null if an exception was thrown or no 
             objects were returned by the command.
             
             </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Executor.ExecuteCommandAndGetResultAsBool(System.String,System.Exception@)">
             <summary>
             
             Executes a command (by calling this.ExecuteCommand), and coerces the first result object to a bool.  Any Exception 
             thrown in the course of execution is returned thru the exceptionThrown parameter.
             
             </summary>
             <param name="command">
             
             The command to execute.  May be any valid monad command.
             
             </param>
             <param name="exceptionThrown">
             
             Receives the Exception thrown by the execution of the command, if any. If no exception is thrown, then set to null.
             Can be tested to see if the execution was successful or not.
             
             </param>
             <returns>
            
             The Nullable`bool representation of the first result object returned, or null if an exception was thrown or no 
             objects were returned by the command.
             
             </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Executor.Cancel">
            <summary>
            
            Cancels execution of the current instance.  If the current instance is not running, then does nothing.  Called in 
            response to a break handler, by the static Executor.Cancel method.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Executor.Reset">
            <summary>
            
            Resets the instance to its post-ctor state.  Does not cancel execution.
            
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Executor.CurrentExecutor">
             <summary>
             
             Makes the given instance the "current" instance, that is, the instance that will receive a Cancel call if the break 
             handler is triggered and calls the static Cancel method.
             
             </summary>
             <value>
             
             The instance to make current.  Null is allowed.  
             
             </value>
             <remarks>
             
             Here are some state-transition cases to illustrate the use of CurrentExecutor
             
             null is current 
             p1.ExecuteCommand
                 set p1 as current
                 promptforparams
                     tab complete
                         p2.ExecuteCommand
                             set p2 as current
                             p2.Execute completes
                             restore old current to p1
                 p1.Execute completes
                 restore null as current 
            
             Here's another case:
             null is current
             p1.ExecuteCommand
                 set p1 as current
                 ShouldProcess - suspend
                     EnterNestedPrompt
                         set null as current so that break does not exit the subshell
                         evaluate prompt
                             p2.ExecuteCommand
                                set p2 as current
                                Execute completes
                                restore null as current
                        nested loop exit
                        restore p1 as current
            
             Summary: 
             ExecuteCommand always saves/sets/restores CurrentExector
             Host.EnterNestedPrompt always saves/clears/restores CurrentExecutor
             
             </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Executor.CancelCurrentExecutor">
            <summary>
            
            Cancels the execution of the current instance (the instance last passed to PushCurrentExecutor), if any.  If no 
            instance is Current, then does nothing.
            
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleHost">
             <summary>
             
             Subclasses S.M.A.Host to implement a console-mode monad host.
             
             </summary>
            
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.CheckForSevereException(System.Exception)">
            <summary>
            Checks whether the exception is a severe exception which should
            cause immediate process failure.
            </summary>
            <param name="e"></param>
            <remarks>
            CB says 02/23/2005: I personally would err on the side
            of treating OOM like an application exception, rather than
            a critical system failure.I think this will be easier to justify
            in Orcas, if we tease apart the two cases of OOM better.
            But even in Whidbey, how likely is it that we couldn't JIT
            some backout code?  At that point, the process or possibly
            the machine is likely to stop executing soon no matter
            what you do in this routine.  So I would just consider
            AccessViolationException.  (I understand why you have SO here,
            at least temporarily).
            
            JN/GX 04/15/2005: There is currently no way to log host events,
            so these FailFasts cannot be logged.
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.Start(System.Management.Automation.Runspaces.RunspaceConfiguration,System.String,System.String,System.String,System.String[])">
             <summary>
            
             internal Entry point in msh console host implementation
            
             </summary>
             
             <param name="configuration">
             Configuration information to use for creating runspace.
             </param>
             
             <param name="bannerText">
             Banner text to be displayed by ConsoleHost
             </param>
            
             <param name="helpText">
             Help text for minishell. This is displayed on 'minishell -?'.
             </param>
            
             <param name="preStartWarning">
             
             Warning occurred prior to this point, for example, a snap-in fails to load beforehand.
             This string will be printed out.
             
             </param>
             <param name = "args">
             
             Command line parameters to powershell.exe
             
             </param>
             <returns>
             
             The exit code for the shell.
             
             NTRAID#Windows OS Bugs-1036968-2005/01/20-sburns The behavior here is related to monitor work.  The low word of the 
             exit code is available for the user.  The high word is reserved for the shell and monitor.
             
             The shell process needs to return:
             
             - if the shell.exe fails init, 0xFFFF0000
             - if the exit keyword is called with no parameter at the point of top-level prompt, 0x80000000 (e.g. 0 with the high 
             bit set)
             - if the exit keyword is called with any int param less than or equal to 0xFFFF, then that int masked with the high 
             bit set.  e.g. "exit 3" results in 0x80000003
             - if the script ends (in the case of msh -command or msh -commandfile), then 0x80000000.
             - if ctrl-break is pressed, with 0xFFFE0000
             - if the shell.exe is passed a bad command-line parameter, with 0xFFFD0000.
             - if the shell.exe crashes, with 0x00000000
            
             The monitor process gets the exit code.  If the high bit is set, then the shell process exited normally (though
             possibly due to an error).  If not, the shell process crashed.  If the shell.exe exit code is x00000000 (crashed) 
             or 0xFFFE0000 (user hit ctrl-break), the monitor should restart the shell.exe. Otherwise, the monitor should exit 
             with the same exit code as the shell.exe.
            
             Anyone checking the exit code of the shell or monitor can mask off the hiword to determine the exit code passed
             by the script that the shell last executed.
             
             </returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.MyBreakHandler(Microsoft.PowerShell.ConsoleControl.ConsoleBreakSignal)">
            <summary>
            
            The break handler for the program.  Dispatches a break event to the current Executor.
            
            </summary>
            <param name="signal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.SpinUpBreakHandlerThread(System.Boolean)">
             <summary>
             
             Spin up a new thread to cancel the current pipline.  This will allow subsequent break interrupts to be received even
             if the cancellation is blocked (which can be the case when the pipeline blocks and nothing implements Cmdlet.Stop
             properly).  That is because the OS will not inject another thread when a break event occurs if one has already been
             injected and is running.
             
             </summary>
             <param name="shouldEndSession">
             
             if true, then flag the parent ConsoleHost that it should shutdown the session.  If false, then only the current 
             executing instance is stopped.
             
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.CreateSingletonInstance(System.Management.Automation.Runspaces.RunspaceConfiguration)">
            <summary>
            Create single instance of ConsoleHost. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.Name">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception/>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.Version">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception/>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.InstanceId">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception/>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.UI">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception/>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.PushRunspace(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            See base class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.HandleRemoteRunspaceStateChanged(System.Object,System.Management.Automation.Runspaces.RunspaceStateEventArgs)">
            <summary>
            Handles state changed event of the remote runspace. If the remote runspace
            gets into a broken or closed state, writes a message and pops out the
            runspace
            </summary>
            <param name="sender">not sure</param>
            <param name="eventArgs">arguments describing this event</param>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.PopRunspace">
            <summary>
            See base class.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.IsRunspacePushed">
            <summary>
            True if a runspace is pushed; false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.Runspace">
            <summary>
            Returns the current runspace associated with this host.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.PrivateData">
            <summary>
            Return the actual console host object so that the user can get at
            the unproxied methods.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.CurrentCulture">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception/>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.CurrentUICulture">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception/>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.SetShouldExit(System.Int32)">
            <summary>
            
            </summary>
            <exception/>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.EnterNestedPrompt">
            <summary>
            
            If an input loop is running, then starts a new, nested input loop.  If an input loop is not running, 
            throws an exception.
            
            </summary>
            <exception cref="T:System.InvalidOperationException">
            
            If a nested prompt is entered while the host is not running at least one prompt loop.
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.ExitNestedPrompt">
            <summary>
            
            See base class
            
            </summary>
            <exception cref="T:System.InvalidOperationException">
            
            If there is no nested prompt.
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.NotifyBeginApplication">
            <summary>
            
            See base class
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.NotifyEndApplication">
            <summary>
            
            See base class
            
            <seealso cref="M:Microsoft.PowerShell.ConsoleHost.NotifyBeginApplication"/>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.#ctor(System.Management.Automation.Runspaces.RunspaceConfiguration)">
            <summary>
            
            Constructs a new instance
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.Finalize">
            <summary>
            
            Finalizes the instance
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.Dispose">
            <summary>
            
            Disposes of this instance, per the IDisposable pattern
            
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.ShouldEndSession">
            <summary>
            
            Indicates if the session should be terminated or not.  Typically set by the break handler for Close, Logoff, and 
            Shutdown events.  Note that the only valid transition for this property is from false to true: it is not legal to 
            try to set it to false after is was set to true. 
            
            </summary> 
            <value>
            
            true to shut down the session.  false is only allowed if the property is already false.
            
            </value>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.RunspaceRef">
            <summary>
            
            The Runspace ref object being used by this Host instance.  A host only opens one Runspace.
            
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.Run(Microsoft.PowerShell.CommandLineParameterParser,System.Boolean)">
            <summary>
            
            The main run loop of the program: processes command line parameters, and starts up a runspace.
            
            </summary>
            
            <param name="cpp">
            Commandline parameter parser. The commandline parameter parser is expected to parse all the 
            arguments before calling this method.
            </param>
            
            <param name="isPrestartWarned">
            Is there any warning at startup
            </param>
            
            <returns>
            
            The process exit code to be returned by Main.
            
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.Run(System.String,System.String,System.Boolean,System.String[])">
            <summary>
            This method is reatined to make V1 tests compatible with V2 as signature of this method
            is slighlty changed in v2.
            </summary>
            <param name="bannerText"></param>
            <param name="helpText"></param>
            <param name="isPrestartWarned"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.DoRunspaceLoop(System.String,System.Boolean,System.Collections.ObjectModel.Collection{System.Management.Automation.Runspaces.CommandParameter},System.Boolean,System.Boolean,System.String)">
            <summary>
            
            Loops over the Host's sole Runspace; opens the runspace, initializes it, then recycles it if the Runspace fails.
            
            </summary>
            <returns>
            
            The process exit code to be returned by Main.
            
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.InitializeRunspace(System.String,System.Boolean,System.Collections.ObjectModel.Collection{System.Management.Automation.Runspaces.CommandParameter})">
            <summary>
            This method is here only to make V1 tests compatible with V2. DO NOT USE THIS FUNCTION! Use DoCreateRunspace instead
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.DoCreateRunspace(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Collections.ObjectModel.Collection{System.Management.Automation.Runspaces.CommandParameter})">
            <summary>
            
            Opens and Initializes the Host's sole Runspace.  Processes the startup scripts and runs any command passed on the
            command line.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.EscapeSingleQuotes(System.String)">
            <summary>
            
            Escapes backtick and tick characters with a backtick, returns the result
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.ReportExceptionFallback(System.Exception,System.String)">
            <summary>
            
            Reports an exception accoring to the exception reporting settings in effect.
            
            </summary>
            <param name="e">
            
            The exception to report.
            
            </param>
            <param name="header">
            
            Optional header message.  Empty or null means "no header"
            
            </param>
        </member>
        <member name="E:Microsoft.PowerShell.ConsoleHost.RunspacePopped">
            <summary>
            raised when the host pops a runspace
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.ConsoleHost.RunspacePushed">
            <summary>
            raised when the host pushes a runspace
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.OnExecutionSuspended(System.Object,System.Management.Automation.DebuggerStopEventArgs)">
            <summary>
            Handler for debugger events
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.InDebugMode">
            <summary>
            Returns true if the host is in debug mode
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHost.DebuggerCanStopCommand">
            <summary>
            True when debugger command is user and available 
            for stopping.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.EnterDebugMode">
            <summary>
            Sets the host to debug mode and enters a nested prompt.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.ExitDebugMode(System.Management.Automation.DebuggerResumeAction)">
            <summary>
            Exits the debugger's nested prompt.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.WriteDebuggerMessage(System.String)">
            <summary>
            Writes a line using the debugger colors
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleHost.InputLoop">
            <summary>
            
            InputLoop represents the prompt-input-execute loop of the interactive host.  Input loops can be nested, meaning that
            one input loop can be interrupted and another started; when the second ends, the first resumes.
            
            Neither this class' instances nor its static data is threadsafe.  Caller is responsible for ensuring threadsafe 
            access.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.InputLoop.ExitCurrentLoop">
             <summary>
             
             </summary>
             <returns>True if next input loop is nested, False otherwise.</returns>
             <exception cref="T:System.InvalidOperationException">
            
              when there is no instanceStack.Count == 0
             
             </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.InputLoop.GetNonNestedLoop">
            <summary>
            Returns current root (non-nested) loop only if there is no
            nesting.  This is used *only* by the debugger for remote debugging
            where data handling on the base commands needs to be blocked 
            during remote debug stop handling.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.InputLoop.HandleRunspacePopped(System.Object,System.EventArgs)">
            <summary>
            When a runspace is popped, we need to reevaluate the
            prompt
            </summary>
            <param name="sender">sender of this event, unused</param>
            <param name="eventArgs">arguments describing this event, unused</param>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHost.InputLoop.Run(System.Boolean)">
            <summary>
            
            Evaluates the prompt, displays it, gets a command from the console, and executes it.  Repeats until the command 
            is "exit", or until the shutdown flag is set.
            
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleHost.runspaceRef">
            <summary>
            By declaring runspace as ObjectRef&lt;Runspace&gt; we are able to hide the real runspace with 
            a remote runspace in the PushRunspace scenario. By declaring it as a mask, the variable 
            runspace becomes an indirect reference to the actual runspace which we can override with 
            a remote runspace while it is pushed. Also we can easily revert back to the original 
            runspace when the PopRunspace command is invoked.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.RunspaceCreationEventArgs">
            <summary>
            Defines arguments passed to ConsoleHost.CreateRunspace
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.RunspaceCreationEventArgs.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,System.String,System.Collections.ObjectModel.Collection{System.Management.Automation.Runspaces.CommandParameter})">
            <summary>
            Constructs RunspaceCreationEventArgs
            </summary>
            <param name="initialCommand"> </param>
            <param name="skipProfiles"></param>
            <param name="staMode"></param>
            <param name="importSystemModules"></param>
            <param name="configurationName"></param>
            <param name="initialCommandArgs"></param>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleHostRawUserInterface">
            <summary>
            
            implementation of RawConsole for powershell.exe
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.#ctor(Microsoft.PowerShell.ConsoleHostUserInterface)">
            <summary>
            
            </summary>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining the buffer's foreground and background color failed
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.ForegroundColor">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentException">
            
            If set to an invalid ConsoleColor
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining information about the buffer failed
               OR
               Win32's SetConsoleTextAttribute
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.BackgroundColor">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentException">
            
            If set to an invalid ConsoleColor
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining information about the buffer failed
               OR
               Win32's SetConsoleTextAttribute
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.CursorPosition">
            <summary>
            
            See base class 
            
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            
            If set to outside of the buffer
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining information about the buffer failed
               OR
               Win32's SetConsoleCursorPosition failed
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.CursorSize">
            <summary>
            
            See base class
            
            </summary>
            <value>
            
            Cursor size
            
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            
            If set to under 0 or over 100
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining a handle to the active screen buffer failed
               OR
               Win32's GetConsoleCursorInfo failed
               OR
               Win32's SetConsoleCursorInfo failed
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.WindowPosition">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            
            If set outside of the buffer
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obaining information about the buffer failed
               OR
               Win32's SetConsoleWindowInfo failed
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.BufferSize">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            
            If setting to an invalid size
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining a handle to the active screen buffer failed
               OR
               obtaining information about the buffer failed
               OR
               Win32's SetConsoleScreenBufferSize failed
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.WindowSize">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            
            If setting width or height to less than 1, larger than the screen buffer,
             over the maximum window size allowed
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining information about the buffer failed
               OR
               Win32's SetConsoleWindowInfo failed
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.MaxWindowSize">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining information about the buffer failed
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.MaxPhysicalWindowSize">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining a handle to the active screen buffer failed
               OR
               Win32's GetLargestConsoleWindowSize failed
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.NewPipelineStoppedException">
            <summary>
            Helper method to create and trace PipelineStoppedException
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.CacheKeyEvent(Microsoft.PowerShell.ConsoleControl.KEY_EVENT_RECORD,Microsoft.PowerShell.ConsoleControl.KEY_EVENT_RECORD@)">
            <summary>
            Used by ReadKey, cache KeyEvent based on if input.RepeatCount > 1
            </summary>
            <param name="input">Input key event record</param>
            <param name="cache">Cache key event</param>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.ReadKey(System.Management.Automation.Host.ReadKeyOptions)">
            <summary>
            
            See base class
            This method unwraps the repeat count in KEY_EVENT_RECORD by caching repeated keystrokes
            in a logical queue. The implications are:
            1) Per discussion with Sburns on 2005/01/20, calling this method with allowCtrlC | includeKeyUp may not
               return ctrl-c even it is pressed. This is because ctrl-c could generate the following sequence of
               key events: {Ctrl, KeyDown}, {Ctrl-c KeyDown}, {Ctrl, KeyUp}, {c, KeyUp} if Ctrl is released before c.
               In this case, {Ctrl, KeyUp}, {c, KeyUp} would be returned.
            2) If the cache is non-empty, a call to ReadLine will not return the cached keys. This
               behavior is the same as that of System.Console.ReadKey
            
            </summary>
            <param name="options"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            
            If neither IncludeKeyDown or IncludeKeyUp is set in <paramref name="options"/>
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining a handle to the active screen buffer failed
               OR
               Win32's setting input buffer mode to disregard window and mouse input failed
               OR
               Win32's ReadConsoleInput failed
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.FlushInputBuffer">
            <summary>
            
            See base class
            
            </summary>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining a handle to the active screen buffer failed
               OR
               Win32's FlushConsoleInputBuffer failed
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.KeyAvailable">
            <summary>
            
            See base class
            
            </summary>
            <returns></returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining a handle to the active screen buffer failed
               OR
               Win32's GetNumberOfConsoleInputEvents failed
               OR
               Win32's PeekConsoleInput failed
            
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostRawUserInterface.WindowTitle">
            <summary>
            
            See base class
            
            </summary>
            <value></value>
            <exception cref="T:System.ArgumentNullException">
            
            If set to null
            
            </exception>
            <exception cref="T:System.ArgumentException">
            
            If set to a string whose length is not between 1 to 1023
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If Win32's GetConsoleWindowTitle failed
               OR
               Win32's SetConsoleWindowTitle failed
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.SetBufferContents(System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.BufferCell[0:,0:])">
             <summary>
             
             See base class.
            
             
             </summary>
             <param name="origin">
             
             location on screen buffer where contents will be written
             
             </param>
             <param name="contents">
             
             array of info to be written
             
             </param>
             <remarks></remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">
             
             If <paramref name="origin"/> is outside of the screen buffer.
                OR
                <paramref name="contents"/> is an ill-formed BufferCell array
                OR
                it is illegal to write <paramref name="contents"/> at <paramref name="origin"/> in the buffer
             
             </exception>
             <exception cref="T:System.Management.Automation.Host.HostException">
             
             If obtaining a handle to the active screen buffer failed
                OR
                obtaining information about the buffer failed
                OR
                there is not enough memory to complete calls to Win32's WriteConsoleOutput
             
             </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.SetBufferContents(System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.BufferCell)">
            <summary>
            
            If <paramref name="region"/> is completely outside of the screen buffer, it's a no-op.
            
            </summary>
            <param name="region">
            
            region with all elements = -1 means "entire screen buffer"
            
            </param>
            <param name="fill">
            
            character and attribute to fill the screen buffer
            
            </param>
            <remarks>
            
            Provided for clearing regions -- less chatty than passing an array of cells.
            Clear screen is:
               SetBufferContents(new Rectangle(-1, -1, -1, -1), ' ', ForgroundColor, BackgroundColor);
               CursorPosition = new Coordinates(0, 0);
            
            fill.Type is ignored
            
            </remarks>
            <exception cref="T:System.ArgumentException">
            
            If <paramref name="region"/>'s Left exceeds Right or Bottom exceeds Top
               OR
               it is illegal to set <paramref name="region"/> in the buffer with <paramref name="fill"/>
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If Win32's CreateFile fails
               OR
               Win32's GetConsoleScreenBufferInfo fails
               OR
               there is not enough memory to complete calls to Win32's WriteConsoleOutput
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.GetBufferContents(System.Management.Automation.Host.Rectangle)">
            <summary>
            
            See base class.
            If the rectangle is invalid, ie, Right exceeds Left OR Bottom exceeds Top,
            
            </summary>
            <param name="region">
            
            area on screen buffer to be read
            
            </param>
            <returns>
            
            an array of BufferCell containing screen buffer contents
            
            </returns>
            <exception cref="T:System.ArgumentException">
            
            If <paramref name="region"/>'s Left exceeds Right or Bottom exceeds Top.
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining a handle to the active screen buffer failed
               OR
               obtaining information about the buffer failed
               OR
               there is not enough memory to complete calls to Win32's ReadConsoleOutput
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.ScrollBufferContents(System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.BufferCell)">
            <summary>
            
            See base class 
            
            </summary>
            <param name="source">
            
            area to be moved
            
            </param>
            <param name="destination">
            
            top left corner to which source to be moved
            
            </param>
            <param name="clip">
            
            area to be updated caused by the move
            
            </param>
            <param name="fill">
            
            character and attribute to fill the area vacated by the move
            
            </param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining the active screen buffer failed
               OR
               Call to Win32's ScrollConsoleScreenBuffer failed
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.LengthInBufferCells(System.String)">
            <summary>
            See base class
            </summary>
            <param name="s"></param>
            <returns></returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If Win32's WideCharToMultiByte fails
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.LengthInBufferCells(System.String,System.Int32)">
            <summary>
            See base class
            </summary>
            <param name="s"></param>
            <param name="offset"></param>
            <returns></returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If Win32's WideCharToMultiByte fails
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.LengthInBufferCells(System.Char)">
            <summary>
            
            See base class
            
            </summary>
            <param name="c"></param>
            <returns></returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If Win32's WideCharToMultiByte fails
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.ClearKeyCache">
            <summary>
            
            Clear the ReadKey cache
            
            </summary>
            <exception/>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.CheckCoordinateWithinBuffer(System.Management.Automation.Host.Coordinates@,Microsoft.PowerShell.ConsoleControl.CONSOLE_SCREEN_BUFFER_INFO@,System.String)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="bufferInfo"></param>
            <param name="paramName"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="c"/> is outside of the output buffer area
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostRawUserInterface.GetBufferInfo(Microsoft.PowerShell.ConsoleControl.CONSOLE_SCREEN_BUFFER_INFO@)">
            <summary>
            Get output buffer info
            </summary>
            <param name="bufferInfo"></param>
            <returns></returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            If Win32's CreateFile fails
               OR
               Win32's GetConsoleScreenBufferInfo fails
            </exception>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleHostUserInterface">
            <summary>
            
            ConsoleHostUserInterface implements console-mode user interface for powershell.exe
            
            </summary>
            <summary> 
            
            ConsoleHostUserInterface implements console-mode user interface for powershell.exe
            
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleHostUserInterface.commandCompletionPowerShell">
            <summary>
            Command completion implementation object
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleHostUserInterface._h">
            <summary>
            This is a test hook for programmatically reading and writing ConsoleHost I/O.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostUserInterface.SupportsVirtualTerminal">
            <summary>
            Return true if the console supports a VT100 like virtual terminal
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.#ctor(Microsoft.PowerShell.ConsoleHost)">
            <summary>
            
            Constructs an instance 
            
            </summary>
            <param name="parent"></param>
            <exception/>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostUserInterface.RawUI">
            <summary>
            
            Supplies an implementation of PSHostRawUserInterface that provides low-level console mode UI facilities.
            
            </summary>
            <value></value>
            <exception/>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostUserInterface.IsCommandCompletionRunning">
            <summary>
            
            true if command completion is currently running
            
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostUserInterface.ReadFromStdin">
            <summary>
            
            true if the Read* functions should read from the stdin stream instead of from the win32 console.
            
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostUserInterface.NoPrompt">
            <summary>
            
            true if the host shouldn't write out prompts.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.ReadLine">
            <summary>
            
            See base class
            
            </summary>
            <returns></returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If Win32's SetConsoleMode fails
               OR
               Win32's ReadConsole fails
               OR
               obtaining information about the buffer failed
               OR
               Win32's SetConsoleCursorPosition failed
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.ReadLineAsSecureString">
             <summary>
             
             See base class
             
             </summary>
             <returns></returns>
             <exception cref="T:System.Management.Automation.Host.HostException">
             
             If obtaining a handle to the active screen buffer failed
                OR
                Win32's setting input buffer mode to disregard window and mouse input failed
                OR
                Win32's ReadConsole failed
            
             
             </exception>
             <exception cref="T:System.Management.Automation.PipelineStoppedException">
            
             If Ctrl-C is entered by user
             
             </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.ReadLineSafe(System.Boolean,System.Nullable{System.Char})">
             <summary>
             
             Implementation based on NT CredUI's GetPasswdStr.
             Use Win32.ReadConsole to construct a SecureString. The advantage of ReadConsole over ReadKey is
             Alt-ddd where d is {0-9} is allowed.
             It also manages the cursor as keys are entered and "backspaced". However, it is possible that
             while this method is running, the console buffer contents could change. Then, its cursor mgmt
             will likely be messed up.
             
             </summary>
            <param name="isSecureString">
             
             True to specify reading a SecureString; false reading a string
             
             </param>
             <param name="printToken">
             
             string for output echo
             
             </param>
             <returns></returns>
             <exception cref="T:System.Management.Automation.Host.HostException">
             
             If obtaining a handle to the active screen buffer failed
                OR
                Win32's setting input buffer mode to disregard window and mouse input failed
                OR
                Win32's ReadConsole failed
                OR
                obtaining information about the buffer failed
                OR
                Win32's SetConsoleCursorPosition failed
            
             </exception>
             <exception cref="T:System.Management.Automation.PipelineStoppedException">
            
             If Ctrl-C is entered by user
             
             </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.WritePrintToken(System.String,System.Management.Automation.Host.Coordinates@)">
             <summary>
            
             Handle writing print token with proper cursor adjustment for ReadLineSafe
            
             </summary>
             <param name="printToken">
             
             token output for each char input. It must be a one-char string
             
             </param>
             <param name="originalCursorPosition">
             
             it is the cursor position where ReadLineSafe begins
             
             </param>
             <exception cref="T:System.Management.Automation.Host.HostException">
             
             If obtaining information about the buffer failed
                OR
                Win32's SetConsoleCursorPosition failed
             
             </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.WriteBackSpace(System.Management.Automation.Host.Coordinates)">
             <summary>
            
             Handle backspace with proper cursor adjustment for ReadLineSafe
            
             </summary>
             <param name="originalCursorPosition">
             
             it is the cursor position where ReadLineSafe begins
             
             </param>
             <exception cref="T:System.Management.Automation.Host.HostException">
             
             If obtaining information about the buffer failed
                OR
                Win32's SetConsoleCursorPosition failed
             
             </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.BlankAtCursor(System.Management.Automation.Host.Coordinates)">
            <summary>
            Blank out at and move rawui.CursorPosition to <paramref name="cursorPosition"/>
            </summary>
            <param name="cursorPosition">Position to blank out</param>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.shouldUnsetMode(Microsoft.PowerShell.ConsoleControl.ConsoleModes,Microsoft.PowerShell.ConsoleControl.ConsoleModes@)">
            <summary>
            
            If <paramref name="m"/> is set on <paramref name="flagToUnset"/>, unset it and return true;
            otherwise return false
            
            </summary>
            <param name="flagToUnset">
            
            a flag in ConsoleControl.ConsoleModes to be unset in <paramref name="m"/>
            
            </param>
            <param name="m">
            </param>
            <returns>
            
            true if <paramref name="m"/> is set on <paramref name="flagToUnset"/>
            false otherwise
            
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.Write(System.String)">
            <summary>
            
            See base class.
            
            </summary>
            <param name="value"></param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If Win32's CreateFile fails
               OR
               Win32's GetConsoleMode fails
               OR
               Win32's SetConsoleMode fails
               OR
               Win32's WriteConsole fails
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.Write(System.ConsoleColor,System.ConsoleColor,System.String)">
            <summary>
            
            See base class
            
            </summary>
            <param name="foregroundColor"></param>
            <param name="backgroundColor"></param>
            <param name="value"></param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining information about the buffer failed
               OR
               Win32's SetConsoleTextAttribute
               OR
               Win32's CreateFile fails
               OR
               Win32's GetConsoleMode fails
               OR
               Win32's SetConsoleMode fails
               OR
               Win32's WriteConsole fails
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.WriteLine(System.String)">
            <summary>
            
            See base class
            
            </summary>
            <param name="value"></param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
               Win32's CreateFile fails
               OR
               Win32's GetConsoleMode fails
               OR
               Win32's SetConsoleMode fails
               OR
               Win32's WriteConsole fails
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.WrapText(System.String,System.Int32)">
            <summary>
            
            This is a poor-man's word-wrapping routine.  It breaks a single string into segments small enough to fit within a
            given number of cells.  A break is determined by the last occurrance of whitespace that allows all prior characters 
            on a line to be written within a given number of cells.  If there is no whitespace found within that span, then the
            largest span that will fit in the bounds is used.
            
            The problem is complicated by the fact that a single character may consume more than one cell.  Conceptually, this 
            is the same case as placing an upper bound on the length of a line while also having a strlen function that 
            arbitrarily considers the length of any single character to be 1 or greater.
            
            </summary>
            <param name="text">
            
            Text to be emitted.
            Each tab character in the text is replaced with a space in the results.  
            
            </param>
            <param name="maxWidthInBufferCells">
            
            Max width, in buffer cells, of a single line.  Note that a single character may consume more than one cell.  The 
            number of cells consumed is determined by calling ConsoleHostRawUserInterface.LengthInBufferCells.
            
            </param>
            <returns>
            
            A list of strings representing the text broken into "lines" each of which are guaranteed not to exceed 
            maxWidthInBufferCells.
            
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleHostUserInterface.WordFlags">
            <summary>
            
            Struct used by WrapText
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.ChopTextIntoWords(System.String,System.Int32)">
            <summary>
            
            Chops text into "words," where a word is defined to be a sequence of whitespace characters, or a sequence of 
            non-whitespace characters, each sequence being no longer than a given maximum.  Therefore, in the text "this is a 
            string" there are 7 words: 4 sequences of non-whitespace characters and 3 sequences of whitespace characters.
            
            Whitespace is considered to be spaces or tabs.  Each tab character is replaced with a single space.
            
            </summary>
            <param name="text">
            
            The text to be chopped up.
            
            </param>
            <param name="maxWidthInBufferCells">
            
            The maximum number of buffer cells that each word may consume.
            
            </param>
            <returns>
            
            A list of words, in the same order they appear in the source text.
            
            </returns>
            <remarks>
            
            This can be made faster by, instead of creating little strings for each word, creating indices of the start and end 
            range of a word.  That would reduce the string allocations.
            
            </remarks>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.AddWord(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Collections.Generic.List{Microsoft.PowerShell.ConsoleHostUserInterface.Word}@)">
            <summary>
            
            Helper for ChopTextIntoWords.  Takes a span of characters in a string and adds it to the word list, further 
            subdividing the span as needed so that each subdivision fits within the limit.
            
            </summary>
            <param name="text">
            
            The string of characters in which the span is to be extracted.
            
            </param>
            <param name="startIndex">
            
            index into text of the start of the word to be added.
            
            </param>
            <param name="endIndex">
            
            index of the char after the last char to be included in the word.
            
            </param>
            <param name="maxWidthInBufferCells">
            
            The maximum number of buffer cells that each word may consume.
            
            </param>
            <param name="isWhitespace">
            
            true if the span is whitespace, false if not.
            
            </param>
            <param name="result">
            
            The list into which the words will be added.
            
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.WriteWrappedLine(System.ConsoleColor,System.ConsoleColor,System.String)">
            <summary>
            
            Writes text, wrapping a "word" boundaries when needed.
            
            </summary>
            <param name="fg">
            
            Foreground color to output the text.
            
            </param>
            <param name="bg">
            
            Background color to output the text.
            
            </param>
            <param name="text">
            
            Text to be emitted.
            
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.WriteDebugLine(System.String)">
            <summary>
            
            See base class
            
            </summary>
            <param name="message"></param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining information about the buffer failed
               OR
               Win32's SetConsoleTextAttribute
               OR
               Win32's CreateFile fails
               OR
               Win32's GetConsoleMode fails
               OR
               Win32's SetConsoleMode fails
               OR
               Win32's WriteConsole fails
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.WriteInformation(System.Management.Automation.InformationRecord)">
            <summary>
            
            See base class
            
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.WriteVerboseLine(System.String)">
            <summary>
            
            See base class
            
            </summary>
            <param name="message"></param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining information about the buffer failed
               OR
               Win32's SetConsoleTextAttribute
               OR
               Win32's CreateFile fails
               OR
               Win32's GetConsoleMode fails
               OR
               Win32's SetConsoleMode fails
               OR
               Win32's WriteConsole fails
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.WriteWarningLine(System.String)">
            <summary>
            
            See base class
            
            </summary>
            <param name="message"></param>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If obtaining information about the buffer failed
               OR
               Win32's SetConsoleTextAttribute
               OR
               Win32's CreateFile fails
               OR
               Win32's GetConsoleMode fails
               OR
               Win32's SetConsoleMode fails
               OR
               Win32's WriteConsole fails
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.WriteProgress(System.Int64,System.Management.Automation.ProgressRecord)">
             <summary>
            
             Invoked by CommandBase.WriteProgress to display a progress record.
            
             </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.ReadLine(System.Boolean,System.String,Microsoft.PowerShell.ConsoleHostUserInterface.ReadLineResult@,System.Boolean,System.Boolean)">
            <summary>
            
            Reads a line of input from the console.  Returns when the user hits enter, a break key, a break event occurrs.  In 
            the case that stdin has been redirected, reads from the stdin stream instead of the console.
            
            </summary>
            <param name="endOnTab">
            
            true to end input when the user hits the tab or shift-tab keys, false to only end on the enter key (or a break 
            event). Ignored if not reading from the console device.
            
            </param>
            <param name="initialContent">
            
            The initial contents of the input buffer.  Nice if you want to have a default result. Ignored if not reading from the
            console device.
            
            </param>
            <param name="result">
            
            Receives an enum value indicating how input was ended.
            
            </param>
            <param name="calledFromPipeline">
            
            TBD
            
            </param>
            <param name="transcribeResult">
            
            true to include the results in any transcription that might be happening.
            
            </param>
            
            <returns>
            
            The string read from either the console or the stdin stream.  null if:
            - stdin was read and EOF was reached on the stream, or
            - the console was read, and input was terminated with Ctrl-C, Ctrl-Break, or Close.
            
            </returns>
            <exception cref="T:System.Management.Automation.Host.HostException">
            
            If Win32's SetConsoleMode fails
               OR
               Win32's ReadConsole fails
               OR
               obtaining information about the buffer failed
               OR
               Win32's SetConsoleCursorPosition failed
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.GetCharacterUnderCursor(System.Management.Automation.Host.Coordinates)">
            <summary>
            Get the character at the cursor when the user types 'tab' in the middle of line.
            </summary>
            <param name="cursorPosition">the cursor position where 'tab' is hit</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.RemoveNulls(System.String)">
            <summary>
            Strip nulls from a string...
            </summary>
            <param name="input">The string to process</param>
            <returns>The string with any \0 characters removed...</returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.ReadLineWithTabCompletion(Microsoft.PowerShell.Executor)">
            <summary>
            
            Reads a line, and completes the input for the user if they hit tab.
            
            </summary>
            <param name="exec">
            
            The Executor instance on which to run any pipelines that are needed to find matches
            
            </param>
            
            <returns>
            
            null on a break event
            the completed line otherwise
            
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.ResetProgress">
            <summary>
            
            Called at the end of a prompt loop to take down any progress display that might have appeared and purge any 
            outstanding progress activity state.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.HandleIncomingProgressRecord(System.Int64,System.Management.Automation.ProgressRecord)">
             <summary>
            
             Invoked by ConsoleHostUserInterface.WriteProgress to update the set of outstanding activities for which 
             ProgressRecords have been received.
            
             </summary>
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleHostUserInterface.PromptCommonInputErrors">
            <summary>
            Used by Prompt to indicate any common errors when converting the user input string to
             the type of the parameter
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleHostUserInterface.PromptCommonInputErrors.None">
            <summary>
            No error or not an error prompt handles
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleHostUserInterface.PromptCommonInputErrors.Format">
            <summary>
            Format error
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ConsoleHostUserInterface.PromptCommonInputErrors.Overflow">
            <summary>
            Overflow error
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.Prompt(System.String,System.String,System.Collections.ObjectModel.Collection{System.Management.Automation.Host.FieldDescription})">
            <summary>
            
            See base class
            
            </summary>
            <param name="caption"></param>
            <param name="message"></param>
            <param name="descriptions"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            
            If <paramref name="descriptions"/> is null
               OR
               at least one FieldDescription in <paramref name="descriptions"/> is null
            
            </exception>
            <exception cref="T:System.ArgumentException">
            
            If <paramref name="descriptions"/> count is less than 1
               OR   
               at least one FieldDescription.AssemblyFullName in <paramref name="descriptions"/> is
                null or empty
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.PromptingException">
            
            If a FieldDescription in <paramref name="descriptions"/> specifies one of SecureString or
                PSCredential and the type can not be loaded.
               OR
               at least one FieldDescription in <paramref name="descriptions"/> specifies an array
                whose rank is less than 1.
               
            </exception>
            <exception cref="T:System.Management.Automation.PSInvalidCastException">
            
            If the converting the user input to the prompt field type fails unless it is caused by
                OverflowException or FormatException
            
            </exception> 
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.PromptReadInput(System.String,System.Management.Automation.Host.FieldDescription,System.Boolean,System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Called by Prompt. Reads user input and processes tilde commands.
            </summary>
            <param name="fieldPrompt">prompt written to host for the field</param>
            <param name="desc">the field to be read</param>
            <param name="fieldEchoOnPrompt">true to echo user input</param>
            <param name="listInput">true if the field is a list</param>
            <param name="endListInput">valid only if listInput is true. set to true if the input signals end of list input </param>
            <param name="cancelled">true iff the input is canceled, e.g., by Ctrl-C or Ctrl-Break</param>
            <returns>processed input string to be converted with LanguagePrimitives.ConvertTo </returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.PromptTryConvertTo(System.Type,System.Boolean,System.String,System.Object@)">
            <summary>
            Uses LanguagePrimitives.ConvertTo to parse inputString for fieldType. Handles two most common parse
             exceptions: OverflowException and FormatException.
            </summary>
            <param name="fieldType">the type that inputString is to be interpreted</param>
            <param name="isFromRemoteHost">is the call coming from a remote host</param>
            <param name="inputString">the string to be converted</param>
            <param name="convertedObj">if there's no error in the conversion, the converted object will be assigned here;
            otherwise, this will be the same as the inputString</param>
            <returns>an object of type fieldType that inputString represents</returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.PromptCommandMode(System.String,System.Management.Automation.Host.FieldDescription,System.Boolean@)">
            <summary>
            Handles Tilde Commands in Prompt
            If input does not start with PromptCommandPrefix (= "!"), returns input
            Tilde commands -
            !   end of list, only valid for input field types that implement IList, returns string.Empty
            !!*  input !* literally, returns !* where * is any string
            !h  prints out field's Quick Help, returns null
            All others tilde comments are invalid and return null
            
            returns null iff there's nothing the caller can process
            </summary>
            <param name="input"></param>
            <param name="desc"></param>
            <param name="inputDone"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.PromptForChoice(System.String,System.String,System.Collections.ObjectModel.Collection{System.Management.Automation.Host.ChoiceDescription},System.Int32)">
            <summary>
            
            See base class
            
            </summary>
            <param name="caption"></param>
            <param name="message"></param>
            <param name="choices"></param>
            <param name="defaultChoice"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            
            If <paramref name="choices"/> is null.
            
            </exception>
            <exception cref="T:System.ArgumentException">
            
            If <paramref name="choices"/>.Count is 0.
            
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            
            If <paramref name="defaultChoice"/> is greater than
                the length of <paramref name="choices"/>.
            
            </exception>
            <exception cref="T:System.Management.Automation.Host.PromptingException">
            
             when prompt is canceled by, for example, Ctrl-c.
            
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.PromptForChoice(System.String,System.String,System.Collections.ObjectModel.Collection{System.Management.Automation.Host.ChoiceDescription},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Presents a dialog allowing the user to choose options from a set of options.
            </summary>
            <param name="caption">
            Caption to preceed or title the prompt.  E.g. "Parameters for get-foo (instance 1 of 2)"
            </param>
            <param name="message">
            A message that describes what the choice is for.
            </param>
            <param name="choices">
            An Collection of ChoiceDescription objects that describe each choice.
            </param>
            <param name="defaultChoices">
            The index of the labels in the choices collection element to be presented to the user as 
            the default choice(s). 
            </param>
            <returns>
            The indices of the choice elements that corresponds to the options selected.
            </returns>
            <seealso cref="M:System.Management.Automation.Host.PSHostUserInterface.PromptForChoice(System.String,System.String,System.Collections.ObjectModel.Collection{System.Management.Automation.Host.ChoiceDescription},System.Int32)"/>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostUserInterface.PromptColor">
            <summary>
            Guarantee a contrasting color for the prompt...
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.ConsoleHostUserInterface.DefaultPromptColor">
            <summary>
            Guarantee a contrasting color for the default prompt that is slightly
            different from the other prompt elements.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.PromptForCredential(System.String,System.String,System.String,System.String)">
             <summary>
             Prompt for credentials.
            
             In future, when we have Credential object from the security team,
             this function will be modified to prompt using secure-path
             if so configured.
             
             </summary>
             <param name="userName"> name of the user whose creds are to be prompted for. If set to null or empty string, the function will prompt for user name first. </param>
             
             <param name="targetName"> name of the target for which creds are being collected </param>
             
             <param name="message"> message to be displayed. </param>
             
             <param name="caption"> caption for the message. </param>
             
             <returns> PSCredential object</returns>
            
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleHostUserInterface.PromptForCredential(System.String,System.String,System.String,System.String,System.Management.Automation.PSCredentialTypes,System.Management.Automation.PSCredentialUIOptions)">
             <summary>
             Prompt for credentials.
             </summary>
             <param name="userName"> name of the user whose creds are to be prompted for. If set to null or empty string, the function will prompt for user name first. </param>
             
             <param name="targetName"> name of the target for which creds are being collected </param>
             
             <param name="message"> message to be displayed. </param>
             
             <param name="caption"> caption for the message. </param>
             
             <param name="allowedCredentialTypes"> what type of creds can be supplied by the user </param>
             
             <param name="options"> options that control the cred gathering UI behavior </param>
             
             <returns> PSCredential object, or null if input was cancelled (or if reading from stdin and stdin at EOF)</returns>
            
        </member>
        <member name="T:Microsoft.PowerShell.ConsoleShell">
            <summary>
            This class provides an entry point which is called by minishell's main
            to transfer control to Msh console host implementation.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleShell.Start(System.Management.Automation.Runspaces.RunspaceConfiguration,System.String,System.String,System.String[])">
            <summary>Entry point in to ConsoleShell. This method is called by main of minishell.</summary>
            <param name="configuration">Configuration information which is used to create Runspace.</param>
            <param name="bannerText">Banner text to be displayed by ConsoleHost</param>
            <param name="helpText">Help text for minishell. This is displayed on 'minishell -?'.</param>
            <param name="args">Commandline parameters specified by user.</param>
            <returns>An integer value which should be used as exit code for the process.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.ConsoleShell.Start(System.Management.Automation.Runspaces.RunspaceConfiguration,System.String,System.String,System.String,System.String[])">
            <summary>
            
            Entry point in to ConsoleShell. This method is called by the MSHManagedEntrace
            
            </summary>
            <param name="configuration">
            Configuration information which is used to create Runspace.
            </param>
            
            <param name="bannerText">
            Banner text to be displayed by ConsoleHost
            </param>
            
            <param name="helpText">
            Help text for minishell. This is displayed on 'minishell -?'.
            </param>
            
            <param name="preStartWarning">
            Warning occurred prior to this point, for example, a snap-in fails to load beforehand.
            This string will be printed out.
            </param>
            
            <param name="args">
            Commandline parameters specified by user.
            </param>
            
            <returns>
            An integer value which should be used as exit code for the
            process.
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.ProgressPane">
             <summary>
             
             ProgressPane is a class that represents the "window" in which outstanding activities for which the host has recevied 
             progress updates are shown. 
             
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressPane.#ctor(Microsoft.PowerShell.ConsoleHostUserInterface)">
            <summary>
            
            Constructs a new instance.
            
            </summary>
            <param name="ui">
            
            An implementation of the PSHostRawUserInterface with which the pane will be shown and hidden.
            
            </param>
        </member>
        <member name="P:Microsoft.PowerShell.ProgressPane.IsShowing">
             <summary>
             
             Indicates whether the pane is visible on the screen buffer or not.
             
             </summary>
             <value>
            
             true if the pane is visible, false if not.
             
            </value>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressPane.Show">
            <summary>
            
            Shows the pane in the screen buffer.  Saves off the content of the region of the buffer that will be overwritten so 
            that it can be restored again.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressPane.Hide">
            <summary>
            
            Hides the pane by restoring the saved contents of the region of the buffer that the pane occupies.  If the pane is 
            not showing, then does nothing.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressPane.Show(Microsoft.PowerShell.PendingProgress)">
            <summary>
            
            Updates the pane with the rendering of the supplied PendingProgress, and shows it.
            
            </summary>
            <param name="pendingProgress">
            
            A PendingProgress instance that represents the outstanding activities that should be shown.
            
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.PendingProgress">
            <summary>
            
            Represents all of the outstanding progress activities received by the host, and includes methods to update that state 
            upon receipt of new ProgressRecords, and to render that state into an array of strings such that ProgressPane can 
            display it.
            
            The set of activities that we're tracking is logically a binary tree, with siblings in one branch and children in
            another.  For ease of implementation, this tree is represented as lists of lists.  We use ArrayList as out list type, 
            although List1 (generic List) would also have worked. I suspect that ArrayList is faster because there are fewer links 
            to twiddle, though I have not measured that.
            
            This class uses lots of nearly identical helper functions to recursively traverse the tree. If I weren't so pressed 
            for time, I would see if generic methods could be used to collapse the number of traversers.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.Update(System.Int64,System.Management.Automation.ProgressRecord)">
             <summary>
             
             Update the data structures that represent the outstanding progress records reported so far.
            
             </summary>
             <param name="sourceId">
             
             Identifier of the source of the event.  This is used as part of the "key" for matching newly received records with 
             records that have already been received. For a record to match (meaning that they refer to the same activity), both 
             the source and activity identifiers need to match.
             
             </param>
             <param name="record">
             
             The ProgressRecord received that will either update the status of an activity which we are already tracking, or 
             represent a new activity that we need to track.
             
             </param>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.RemoveNode(System.Collections.ArrayList,System.Int32)">
            <summary>
            
            Removes a node from the tree.
            
            </summary>
            <param name="nodes">
            
            List in the tree from which the node is to be removed.
            
            </param>
            <param name="indexToRemove">
            
            Index into the list of the node to be removed.
            
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.AddNode(System.Collections.ArrayList,Microsoft.PowerShell.ProgressNode)">
            <summary>
            
            Adds a node to the tree, first removing the oldest node if the tree is too large.
            
            </summary>
            <param name="nodes">
            
            List in the tree where the node is to be added.
            
            </param>
            <param name="nodeToAdd">
            
            Node to be added.
            
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.FindNodeById(System.Int64,System.Int32)">
            <summary>
            
            Convenience overload.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.FindNodeById(System.Int64,System.Int32,System.Collections.ArrayList@,System.Int32@)">
            <summary>
            
            Finds a node with a given ActivityId in provided set of nodes. Recursively walks the set of nodes and their children.
            
            </summary>
            <param name="sourceId">
            
            Identifier of the source of the record.
            
            </param>
            <param name="activityId">
            
            ActivityId to search for.
            
            </param>
            <param name="listWhereFound">
            
            Receives reference to the List where the found node was located, or null if no suitable node was found.
            
            </param>
            <param name="indexWhereFound">
            
            Receives the index into listWhereFound that indicating where in the list the node was located, or -1 if 
            no suitable node was found.
            
            </param>
            <returns>
            
            The found node, or null if no suitable node was located.
            
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.FindOldestNodeOfGivenStyle(System.Collections.ArrayList,System.Int32,Microsoft.PowerShell.ProgressNode.RenderStyle)">
            <summary>
            
            Finds the oldest node with a given rendering style that is at least as old as a given age.
            
            </summary>
            <param name="nodes">
            
            List of nodes to search. Child lists of each node in this list will also be searched.
            
            </param>
            <param name="oldestSoFar"></param>
            
            The minimum age of the node to be located.  To find the oldest node, pass 0.
            
            <param name="style">
            
            The rendering style of the node to be located.
            
            </param>
            <returns>
            
            The found node, or null if no suitable node was located.
            
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.AgeNodesAndResetStyle">
            <summary>
            
            Increments the age of each of the nodes in the given list, and all their children.  Also sets the rendering 
            style of each node to "full."
            
            All nodes are aged every time a new ProgressRecord is received. 
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.Render(System.Int32,System.Int32,System.Management.Automation.Host.PSHostRawUserInterface)">
            <summary>
            
            Generates an array of strings representing as much of the outstanding progress activties as possible within the given
            space.  As more outstanding activities are collected, nodes are "compressed" (i.e. rendered in an increasing terse
            fashion) in order to display as many as possible.  Ultimately, some nodes may be compressed to the point of 
            invisibility. The oldest nodes are compressed first.
            
            </summary>
            <param name="maxWidth">
            
            The maximum width (in BufferCells) that the rendering may consume.
            
            </param>
            <param name="maxHeight">
            
            The maximum height (in BufferCells) that the rendering may consume.
            
            </param>
            <param name="rawUI">
            
            The PSHostRawUserInterface used to gauge string widths in the rendering.
            
            </param>
            <returns>
            
            An array of strings containing the textual representation of the outstanding progress activities.
            
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.RenderHelper(System.Collections.ArrayList,System.Collections.ArrayList,System.Int32,System.Int32,System.Management.Automation.Host.PSHostRawUserInterface)">
            <summary>
            
            Helper function for Render().  Recursively renders nodes.
            
            </summary>
            <param name="strings">
            
            The rendered strings so far.  Additional rendering will be appended.
            
            </param>
            <param name="nodes">
            
            The nodes to be rendered.  All child nodes will also be rendered.
            
            </param>
            <param name="indentation">
            
            The current indentation level (in BufferCells).
            
            </param>
            <param name="maxWidth">
            
            The maximum number of BufferCells that the rendering can consume, horizontally.
            
            </param>
            <param name="rawUI">
            
            The PSHostRawUserInterface used to gauge string widths in the rendering.
            
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.TallyHeight(System.Management.Automation.Host.PSHostRawUserInterface,System.Int32,System.Int32)">
            <summary>
            
            Tallies up the number of BufferCells vertically that will be required to show all the ProgressNodes in the given 
            list, and all of their children.
            
            </summary>
            <param name="maxHeight">
            
            The maximum height (in BufferCells) that the rendering may consume.
            
            </param>
            <param name="rawUi">
            
            The PSHostRawUserInterface used to gauge string widths in the rendering.
            
            </param>
            <returns>
            
            The vertical height (in BufferCells) that will be required to show all of the nodes in the given list.
            
            </returns>
            <param name="maxWidth">
            
            
            
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.CompressToFitHelper(System.Management.Automation.Host.PSHostRawUserInterface,System.Int32,System.Int32,System.Int32@,Microsoft.PowerShell.ProgressNode.RenderStyle,Microsoft.PowerShell.ProgressNode.RenderStyle)">
            <summary>
            
            Helper function to CompressToFit.  Considers compressing nodes from one level to another.
            
            </summary>
            <param name="rawUi">
            
            The PSHostRawUserInterface used to gauge string widths in the rendering.
            
            </param>
            <param name="maxHeight">
            
            The maximum height (in BufferCells) that the rendering may consume.
            
            </param>
            <param name="maxWidth">
            
            The maximum width (in BufferCells) that the rendering may consume.
            
            </param>
            <param name="nodesCompressed">
            
            Receives the number of nodes that were compressed. If the result of the method is false, then this will be the total 
            number of nodes being tracked (i.e. all of them will have been compressed).
            
            </param>
            <param name="priorStyle">
            
            The rendering style (e.g. "compression level") that the nodes are expected to currently have.
            
            </param>
            <param name="newStyle">
            
            The new rendering style that a node will have when it is compressed. If the result of the method is false, then all 
            nodes will have this rendering style.
            
            </param>
            <returns>
            
            true to indicate that the nodes are compressed to the point that their rendering will fit within the constraint, or
            false to indicate that all of the nodes are compressed to a given level, but that the rendering still can't fit 
            within the constraint.
            
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.CompressToFit(System.Management.Automation.Host.PSHostRawUserInterface,System.Int32,System.Int32)">
             <summary>
             
             "Compresses" the nodes representing the outstanding progress activities until their rendering will fit within a 
             "given height, or until they are compressed to a given level.  The oldest nodes are compressed first.
             
             This is a 4-stage process -- from least compressed to "invisible".  At each stage we find the oldest nodes in the
             tree and change their rendering style to a more compact style.  As soon as the rendering of the nodes will fit within
             the maxHeight, we stop.  The result is that the most recent nodes will be the least compressed, the idea being that 
             the rendering should show the most recently updated activities with the most complete rendering for them possible.
            
             </summary>
             <param name="rawUi">
             
             The PSHostRawUserInterface used to gauge string widths in the rendering.
             
             </param>
             <param name="maxHeight">
             
             The maximum height (in BufferCells) that the rendering may consume.
             
             </param>
             <param name="maxWidth">
             
             The maximum width (in BufferCells) that the rendering may consume.
             
             </param>
             <returns>
             
             The number of nodes that were made invisible during the compression.
             
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.PendingProgress.NodeVisitor.Visit(Microsoft.PowerShell.ProgressNode,System.Collections.ArrayList,System.Int32)">
            <summary>
            
            Called for each node in the tree.
            
            </summary>
            <param name="node">
            
            The node being visited.
            
            </param>
            <param name="listWhereFound">
            
            The list in which the node resides.
            
            </param>
            <param name="indexWhereFound">
            
            The index into listWhereFound of the node.
            
            </param>
            <returns>
            
            true to continue visiting nodes, false if not.
            
            </returns>
        </member>
        <member name="T:Microsoft.PowerShell.ProgressNode">
            <summary>
            
            ProgressNode is an augmentation of the ProgressRecord type that adds extra fields for the purposes of tracking 
            outstanding activities received by the host, and rendering them in the console.
            
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.ProgressNode.RenderStyle">
            <summary>
            
            Indicates the various layouts for rendering a particular node.  Each style is progressively less terse.
            
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ProgressNode.RenderStyle.Full">
            <summary>
            Allocate only one line for displaying the StatusDescription or the CurrentOperation, 
            truncate the rest if the StatusDescription or CurrentOperation doesn't fit in one line
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ProgressNode.RenderStyle.FullPlus">
            <summary>
            The node will be displayed the same as Full, plus, the whole StatusDescription and CurrentOperation will be displayed (in multiple lines if needed).
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressNode.#ctor(System.Int64,System.Management.Automation.ProgressRecord)">
            <summary>
            
            Constructs an instance from a ProgressRecord.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressNode.Render(System.Collections.ArrayList,System.Int32,System.Int32,System.Management.Automation.Host.PSHostRawUserInterface)">
            <summary>
            
            Renders a single progress node as strings of text according to that node's style. The text is appended to the 
            supplied list of strings.
            
            </summary>
            <param name="strCollection">
            
            List of strings to which the node's rendering will be appended.
            
            </param>
            <param name="indentation">
            
            The indentation level (in BufferCells) at which the node should be rendered.
            
            </param>
            <param name="maxWidth">
            
            The maximum number of BufferCells that the rendering is allowed to consume.
            
            </param>
            <param name="rawUI">
            
            The PSHostRawUserInterface used to gauge string widths in the rendering.
            
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressNode.RenderFull(System.Collections.ArrayList,System.Int32,System.Int32,System.Management.Automation.Host.PSHostRawUserInterface,System.Boolean)">
            <summary>
            
            Renders a node in the "Full" style.
            
            </summary>
            <param name="strCollection">
            
            List of strings to which the node's rendering will be appended.
            
            </param>
            <param name="indentation">
            
            The indentation level (in BufferCells) at which the node should be rendered.
            
            </param>
            <param name="maxWidth">
            
            The maximum number of BufferCells that the rendering is allowed to consume.
            
            </param>
            <param name="rawUI">
            
            The PSHostRawUserInterface used to gauge string widths in the rendering.
            
            </param>
            <param name="isFullPlus">
            
            Indicate if the full StatusDescription and CurrentOperation should be displayed.
            
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressNode.RenderCompact(System.Collections.ArrayList,System.Int32,System.Int32,System.Management.Automation.Host.PSHostRawUserInterface)">
            <summary>
            
            Renders a node in the "Compact" style.
            
            </summary>
            <param name="strCollection">
            
            List of strings to which the node's rendering will be appended.
            
            </param>
            <param name="indentation">
            
            The indentation level (in BufferCells) at which the node should be rendered.
            
            </param>
            <param name="maxWidth">
            
            The maximum number of BufferCells that the rendering is allowed to consume.
            
            </param>
            <param name="rawUI">
            
            The PSHostRawUserInterface used to gauge string widths in the rendering.
            
            </param>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressNode.RenderMinimal(System.Collections.ArrayList,System.Int32,System.Int32,System.Management.Automation.Host.PSHostRawUserInterface)">
            <summary>
            
            Renders a node in the "Minimal" style.
            
            </summary>
            <param name="strCollection">
            
            List of strings to which the node's rendering will be appended.
            
            </param>
            <param name="indentation">
            
            The indentation level (in BufferCells) at which the node should be rendered.
            
            </param>
            <param name="maxWidth">
            
            The maximum number of BufferCells that the rendering is allowed to consume.
            
            </param>
            <param name="rawUI">
            
            The PSHostRawUserInterface used to gauge string widths in the rendering.
            
            </param>
        </member>
        <member name="F:Microsoft.PowerShell.ProgressNode.Children">
            <summary>
            
            The nodes that have this node as their parent.
            
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ProgressNode.Age">
            <summary>
            
            The "age" of the node.  A node's age is incremented by PendingProgress.Update each time a new ProgressRecord is
            received by the host. A node's age is reset when a corresponding ProgressRecord is received.  Thus, the age of 
            a node reflects the number of ProgressRecord that have been received since the node was last updated.  
            
            The age is used by PendingProgress.Render to determine which nodes should be rendered on the display, and how. As the
            display has finite size, it may be possible to have many more outstanding progress activities than will fit in that
            space. The rendering of nodes can be progressively "compressed" into a more terse format, or not rendered at all in 
            order to fit as many nodes as possible in the available space. The oldest nodes are compressed or skipped first.
            
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ProgressNode.Style">
            <summary>
            
            The style in which this node should be rendered.
            
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.ProgressNode.SourceId">
            <summary>
            
            Identifies the source of the progress record.
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressNode.LinesRequiredMethod(System.Management.Automation.Host.PSHostRawUserInterface,System.Int32)">
            <summary>
            
            The number of vertical BufferCells that are required to render the node in its current style.
            
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.PowerShell.ProgressNode.LinesRequiredInFullStyleMethod(System.Management.Automation.Host.PSHostRawUserInterface,System.Int32,System.Boolean)">
            <summary>
            
            The number of vertical BufferCells that are required to render the node in the Full style.
            
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.ProgressNode.LinesRequiredInCompactStyle">
            <summary>
            
            The number of vertical BufferCells that are required to render the node in the Compact style.
            
            </summary>
            <value></value>
        </member>
        <member name="T:Microsoft.PowerShell.Serialization">
            <summary>
            
            Wraps Hitesh's xml serializer in such a way that it will select the proper serializer based on the data
            format.
            
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Serialization.DataFormat">
            <summary>
            
            Describes the format of the data streamed between minishells, e.g. the allowed arguments to the minishell 
            -outputformat and -inputformat command line parameters.
            
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Serialization.DataFormat.Text">
            <summary>
            
            text format -- i.e. stream text just as out-default would display it.
            
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Serialization.DataFormat.XML">
            <summary>
            
            XML-serialized format
            
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Serialization.DataFormat.None">
            <summary>
            
            Indicates that the data should be discarded instead of processed.
            
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.UnmanagedPSEntry">
            <summary>
            Defines an entry point from unmanaged code to managed Msh
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.UnmanagedPSEntry.Start(System.String,System.String[])">
            <summary>
            Starts managed MSH
            </summary>
            <param name="consoleFilePath">
            Console file used to create a runspace configuration to start MSH
            </param>
            <param name="args">
            Command line arguments to the managed MSH
            </param>
        </member>
        <member name="T:Microsoft.PowerShell.Commands.StartTranscriptCommand">
            <summary>
            
            Implements the start-transcript cmdlet
            
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartTranscriptCommand.Path">
            <summary>
            
            The name of the file in which to write the transcript. If not provided, the file indicated by the variable 
            $TRANSCRIPT is used.  If neither the filename is supplied or $TRANSCRIPT is not set, the filename shall be $HOME/My
            Documents/PowerShell_transcript.YYYYMMDDmmss.txt
            
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartTranscriptCommand.LiteralPath">
            <summary>
            The literal name of the file in which to write the transcript.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartTranscriptCommand.OutputDirectory">
            <summary>
            The literal name of the file in which to write the transcript.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartTranscriptCommand.Append">
            <summary>
            
            Describes the current state of the activity.
            
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartTranscriptCommand.Force">
            <summary>
            Property that sets force parameter.  This will reset the read-only
            attribute on an existing file.
            </summary>
            <remarks>
            The read-only attribute will not be replaced when the transcript is done.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartTranscriptCommand.NoClobber">
            <summary>
            Property that prevents file overwrite.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Commands.StartTranscriptCommand.IncludeInvocationHeader">
            <summary>
            Whether to include command invocation time headers between commands.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartTranscriptCommand.BeginProcessing">
            <summary>
            
            Starts the transcription
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StartTranscriptCommand.ResolveFilePath(System.String,System.Boolean)">
            resolve a user provided file name or path (cluding globbing characters)
            to a fully qualified file path, using the file system provider
        </member>
        <member name="T:Microsoft.PowerShell.Commands.StopTranscriptCommand">
            <summary>
            
            Implements the stop-transcript cmdlet
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Commands.StopTranscriptCommand.BeginProcessing">
            <summary>
            
            Starts the transcription
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.PSHostPSSnapIn">
            <summary>
            
            PSHostMshSnapin (or PSHostMshSnapinInstaller) is a class for facilitating registry 
            of necessary information for monad host mshsnapin. 
            
            This class will be built with monad host engine dll 
            (Microsoft.PowerShell.ConsoleHost.dll). 
            
            </summary>
            
        </member>
        <member name="M:Microsoft.PowerShell.PSHostPSSnapIn.#ctor">
            <summary>
            Create an instance of this class. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.PSHostPSSnapIn.Name">
            <summary>
            Get name of this mshsnapin.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.PSHostPSSnapIn.Vendor">
            <summary>
            Get the default vendor string for this mshsnapin. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.PSHostPSSnapIn.VendorResource">
            <summary>
            Get resource information for vendor. This is a string of format: resourceBaseName,resourceName. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.PSHostPSSnapIn.Description">
            <summary>
            Get the default description string for this mshsnapin. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.PSHostPSSnapIn.DescriptionResource">
            <summary>
            Get resource information for description. This is a string of format: resourceBaseName,resourceName. 
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.EngineInstaller">
            <summary>
            
            EngineInstaller is a class for facilitating registry of necessary 
            information for monad engine. 
            
            This class will be built with monad console host dll 
            (System.Management.Automation.dll). 
            
            At install time, installation utilities (like InstallUtil.exe) will 
            call install this engine assembly based on the implementation in
            this class. 
            
            This class derives from base class PSInstaller. PSInstaller will 
            handle the details about how information got written into registry. 
            Here, the information about registry content is provided. 
            
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.EngineInstaller.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EngineInstaller.RegKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.EngineInstaller.RegValues">
            <summary>
            
            </summary>
        </member>
        <member name="T:HostMshSnapInResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:HostMshSnapInResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:HostMshSnapInResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:HostMshSnapInResources.Description">
            <summary>
              Looks up a localized string similar to This Windows PowerShell snap-in contains cmdlets (such as Start-Transcript and Stop-Transcript) that are provided for use with the Windows PowerShell console host..
            </summary>
        </member>
        <member name="P:HostMshSnapInResources.Name">
            <summary>
              Looks up a localized string similar to Host Windows PowerShell Snap-In..
            </summary>
        </member>
        <member name="P:HostMshSnapInResources.Vendor">
            <summary>
              Looks up a localized string similar to Microsoft Corporation.
            </summary>
        </member>
        <member name="T:CommandLineParameterParserStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.ArgsAlreadySpecified">
            <summary>
              Looks up a localized string similar to Cannot process the command because arguments to -Command or -EncodedCommand have already been specified with -EncodedArguments..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.ArgumentFileDoesNotExist">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; to the -File parameter does not exist. Provide the path to an existing &apos;.ps1&apos; file as an argument to the -File parameter..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.BadArgsValue">
            <summary>
              Looks up a localized string similar to Cannot process the command because the value specified with -EncodedArguments is not properly encoded. The value must be Base64 encoded..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.BadCommandValue">
            <summary>
              Looks up a localized string similar to Cannot process the command because the value specified with -EncodedCommand is not properly encoded. The value must be Base64 encoded..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.BadFormatParameterValue">
             <summary>
               Looks up a localized string similar to Cannot process the command because of an incorrect parameter value. &quot;{0}&quot; is not a valid format.  Valid formats are:
            {1}.
             </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.CannotReadFile">
            <summary>
              Looks up a localized string similar to Unable to read from file &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.CommandAlreadySpecified">
            <summary>
              Looks up a localized string similar to Cannot process command because a command is already specified with -Command or -EncodedCommand..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.DefaultHelp">
             <summary>
               Looks up a localized string similar to PowerShell[.exe] [-PSConsoleFile &lt;file&gt; | -Version &lt;version&gt;]
                [-NoLogo] [-NoExit] [-NoProfile] [-NonInteractive] [-STA]
                [-OutputFormat {Text | XML}] [-InputFormat {Text | XML}]
                [-ConfigurationName &lt;string&gt;]
                [-File fileName [arguments...]] [-ExecutionPolicy &lt;ExecutionPolicy&gt;]
                [-Command { - | &lt;script-block&gt; [-args &lt;arg-array&gt;]
                              | &lt;string&gt; [&lt;CommandParameters&gt;] } ]
            
            PowerShell[.exe] -Help | -? | /?
            
            -PSConsoleFile
                Loads the specified Windows PowerShell consol [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.InvalidFileArgument">
            <summary>
              Looks up a localized string similar to Processing -File &apos;{0}&apos; failed: {1} Specify a valid path for the -File parameter..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.InvalidFileArgumentExtension">
            <summary>
              Looks up a localized string similar to Processing -File &apos;{0}&apos; failed because the file does not have a &apos;.ps1&apos; extension. Specify a valid Windows PowerShell script file name, and then try again..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.InvalidWindowStyleArgument">
            <summary>
              Looks up a localized string similar to Processing -WindowStyle &apos;{0}&apos; failed: {1}..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.MissingArgsValue">
            <summary>
              Looks up a localized string similar to Cannot process the command because -EncodedArguments requires a value. Specify a value for the -EncodedArguments parameter..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.MissingCommandParameter">
            <summary>
              Looks up a localized string similar to Cannot process the command because of a missing parameter. A command must follow -Command..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.MissingConfigurationNameArgument">
            <summary>
              Looks up a localized string similar to Cannot process the command because -Configuration requires an argument that is a remote endpoint configuration name. Specify this argument and try again..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.MissingExecutionPolicyParameter">
            <summary>
              Looks up a localized string similar to Cannot process the execution policy because of a missing policy name. A policy name must follow -ExecutionPolicy..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.MissingFileArgument">
            <summary>
              Looks up a localized string similar to The command cannot be run because the File parameter requires a file path. Supply a path for the File parameter and then try the command again..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.MissingInputFormatParameter">
             <summary>
               Looks up a localized string similar to Cannot process the command because the -InputFormat parameter requires an argument. Specify a valid format argument for this parameter.  Valid formats are:
            {0}.
             </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.MissingOutputFormatParameter">
             <summary>
               Looks up a localized string similar to The command cannot be run because no argument has been supplied for the OutputFormat parameter. Specify one of the following formats for this parameter.
            {0}.
             </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.MissingWindowStyleArgument">
            <summary>
              Looks up a localized string similar to Cannot process the command because -WindowStyle requires an argument that is normal, hidden, minimized or maximized. Specify one of these argument values and try again..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.MtaStaMutuallyExclusive">
            <summary>
              Looks up a localized string similar to Cannot process the command because -STA and -MTA are both specified. Specify either -STA or -MTA..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.StdinNotRedirected">
            <summary>
              Looks up a localized string similar to &apos;-&apos; was specified as the argument to -Command but standard input has not been redirected for this process..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.TooManyParametersToCommand">
            <summary>
              Looks up a localized string similar to &apos;-&apos; was specified with the -Command parameter; no other arguments to -Command are permitted..
            </summary>
        </member>
        <member name="P:CommandLineParameterParserStrings.UnknownParameter">
            <summary>
              Looks up a localized string similar to Unrecognized parameter: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:ConsoleControlStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.AddBreakHandlerExceptionMessage">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred when adding a break handler. Contact Microsoft Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.AttachToParentConsoleExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while attaching to parent console. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.DetachFromConsoleExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while detaching from the console. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.FillConsoleOutputAttributeExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while filling the console output buffer with attributes. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.FillConsoleOutputCharacterExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while filling the console output buffer with characters. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.FlushConsoleInputBufferExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while flushing the console input buffer. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.GetActiveScreenBufferHandleExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while retrieving the handle for the active console output buffer. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.GetConsoleCursorInfoExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while getting cursor information. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.GetConsoleFontInfoExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while getting console font information. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.GetConsoleScreenBufferInfoExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while getting console output buffer information. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.GetInputModeExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while getting input about the console handle. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.GetLargestConsoleWindowSizeExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while getting the largest console window size. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.GetModeExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while getting the console mode. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.GetNumberOfConsoleInputEventsExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while getting the number of events in the console input buffer. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.PeekConsoleInputExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while reading the contents of the console input buffer. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.ReadConsoleExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while reading characters from the console input buffer. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.ReadConsoleInputExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while reading input records from the console input buffer. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.ReadConsoleOutputExceptionTemplate">
            <summary>
              Looks up a localized string similar to Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while reading the console output buffer. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.RemoveBreakHandlerExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while trying to remove a break handler. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.ScrollConsoleScreenBufferExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while scrolling the console output buffer. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.SendKeyPressInputExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while sending keyboard input. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.SetConsoleCursorInfoExceptionTemplate">
            <summary>
              Looks up a localized string similar to Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while setting cursor information.Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.SetConsoleCursorPositionExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while trying to set the cursor position. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.SetConsoleFontInfoExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while setting console font information. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.SetConsoleScreenBufferSizeExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while setting the console output buffer size. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.SetConsoleTextAttributeExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while setting character attributes for the console output buffer. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.SetConsoleWindowInfoExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while setting the console window information. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.SetConsoleWindowTitleExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while setting the console window title. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.SetModeExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while setting the console mode. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.WriteConsoleExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while writing to the console output buffer at the current cursor position. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="P:ConsoleControlStrings.WriteConsoleOutputExceptionTemplate">
            <summary>
              Looks up a localized string similar to The Win32 internal error &quot;{0}&quot; 0x{1:X} occurred while writing to the console output buffer. Contact Microsoft Customer Support Services..
            </summary>
        </member>
        <member name="T:ConsoleHostRawUserInterfaceStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.CoordinateOutOfBufferErrorTemplate">
            <summary>
              Looks up a localized string similar to Cannot process the operation because the supplied coordinate is not valid. Specify a coordinate within the buffer area of {0}..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.InvalidBufferSizeError">
            <summary>
              Looks up a localized string similar to Cannot set the buffer size because the size specified is too large or too small..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.InvalidConsoleColorError">
            <summary>
              Looks up a localized string similar to Cannot set the console color because the value specified is not valid. Specify a valid color as defined by the System.ConsoleColor type..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.InvalidCursorSizeError">
            <summary>
              Looks up a localized string similar to Cannot process CursorSize because the cursor size specified is not valid..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.InvalidReadKeyOptionsError">
            <summary>
              Looks up a localized string similar to Cannot read key options. To read options, set one or both of the following: IncludeKeyDown, IncludeKeyUp..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.InvalidRegionErrorTemplate">
            <summary>
              Looks up a localized string similar to {0} should be greater than or equal to {1}..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.InvalidXWindowPositionError">
            <summary>
              Looks up a localized string similar to Cannot use the specified Window X (column) position because it extends past the width of the screen buffer. Specify another X position, starting with 0 as the left most column of the buffer..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.InvalidYWindowPositionError">
            <summary>
              Looks up a localized string similar to Cannot use the specified Window Y (row) position because it extends past the height of the screen buffer. Specify another Y position, starting with 0 as the top-most row of the buffer..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowHeightLargerThanBufferError">
            <summary>
              Looks up a localized string similar to Window cannot be taller than the screen buffer..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowHeightTooLargeErrorTemplate">
            <summary>
              Looks up a localized string similar to Window cannot be taller than {0}..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowHeightTooSmallError">
            <summary>
              Looks up a localized string similar to Window height must be at least 1..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowTitleElevatedPrefix">
            <summary>
              Looks up a localized string similar to Administrator.
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowTitleTemplate">
            <summary>
              Looks up a localized string similar to {0}: {1}.
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowTitleTooLongErrorTemplate">
            <summary>
              Looks up a localized string similar to Window title cannot be longer than {0} characters..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowTitleTooShortError">
            <summary>
              Looks up a localized string similar to Window title cannot be empty..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowTooNarrowError">
            <summary>
              Looks up a localized string similar to Window size is too narrow..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowTooShortError">
            <summary>
              Looks up a localized string similar to Window size is too short..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowWidthLargerThanBufferError">
            <summary>
              Looks up a localized string similar to Window cannot be wider than the screen buffer..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowWidthTooLargeErrorTemplate">
            <summary>
              Looks up a localized string similar to Window cannot be wider than {0}..
            </summary>
        </member>
        <member name="P:ConsoleHostRawUserInterfaceStrings.WindowWidthTooSmallError">
            <summary>
              Looks up a localized string similar to Window width cannot be less than 1..
            </summary>
        </member>
        <member name="T:ConsoleHostStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.CannotLoadPSReadline">
            <summary>
              Looks up a localized string similar to Cannot load PSReadline module.  Console is running without PSReadline..
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.CommandFailed">
            <summary>
              Looks up a localized string similar to An error occurred while running &apos;{0}&apos;: {1}.
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.CommandNotExecuted">
            <summary>
              Looks up a localized string similar to Command &apos;{0}&apos; was not run as the session in which it was intended to run was either closed or broken.
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.ConflictingServerModeParameters">
            <summary>
              Looks up a localized string similar to More than one server mode parameter was specified. Server mode parameters must be used exclusively..
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.ConsoleHostIsSingleton">
            <summary>
              Looks up a localized string similar to An instance of the ConsoleHost class has already been created for this process..
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.DebuggerSourceCodeFormat">
            <summary>
              Looks up a localized string similar to {0}:{1,-3} {2}.
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.DefaultPrompt">
            <summary>
              Looks up a localized string similar to PS&gt;.
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.EnteringDebugger">
            <summary>
              Looks up a localized string similar to Entering debug mode. Use h or ? for help. .
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.HitBreakpoint">
            <summary>
              Looks up a localized string similar to Hit {0}.
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.InitialCommandNotExecuted">
            <summary>
              Looks up a localized string similar to Command &apos;{0}&apos; could not be run because some Windows PowerShell Snap-Ins did not load..
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.InitScriptFailed">
            <summary>
              Looks up a localized string similar to Execution of initialization script has failed. The shell cannot be started..
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.InputExitCurrentLoopOutOfSyncError">
            <summary>
              Looks up a localized string similar to Cannot process input loop. ExitCurrentLoop was called when no InputLoops were running..
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.NestedPromptEntryError">
            <summary>
              Looks up a localized string similar to A nested prompt cannot be entered until the host is running at least one prompt loop..
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.SessionDoesNotSupportDebugger">
             <summary>
               Looks up a localized string similar to 
            The current session does not support debugging; execution will continue.
            
            .
             </summary>
        </member>
        <member name="P:ConsoleHostStrings.ShellCannotBeStarted">
            <summary>
              Looks up a localized string similar to The shell cannot be started. A failure occurred during initialization:.
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.SlowProfileLoadingMessage">
            <summary>
              Looks up a localized string similar to Loading personal and system profiles took {0}ms..
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.TooManyNestedPromptsError">
            <summary>
              Looks up a localized string similar to Cannot display prompt because too many nested prompts are already running..
            </summary>
        </member>
        <member name="P:ConsoleHostStrings.TranscriptEpilogue">
             <summary>
               Looks up a localized string similar to **********************
            Windows PowerShell transcript end
            End time: {0:yyyyMMddHHmmss}
            **********************.
             </summary>
        </member>
        <member name="P:ConsoleHostStrings.TranscriptPrologue">
             <summary>
               Looks up a localized string similar to **********************
            Windows PowerShell transcript start
            Start time: {0:yyyyMMddHHmmss}
            Username  : {1}\{2} 
            Machine	  : {3} ({4}) 
            **********************.
             </summary>
        </member>
        <member name="P:ConsoleHostStrings.UnhandledExceptionShutdownMessage">
            <summary>
              Looks up a localized string similar to An error has occurred that was not properly handled. Additional information is shown below. The Windows PowerShell process will exit..
            </summary>
        </member>
        <member name="T:ConsoleHostUserInterfaceSecurityResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceSecurityResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceSecurityResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceSecurityResources.PromptForCredential_Password">
            <summary>
              Looks up a localized string similar to Password for user {0}: .
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceSecurityResources.PromptForCredential_User">
            <summary>
              Looks up a localized string similar to User: .
            </summary>
        </member>
        <member name="T:ConsoleHostUserInterfaceStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.ChoiceMessage">
            <summary>
              Looks up a localized string similar to Choice[{0}]: .
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.DebugFormatString">
            <summary>
              Looks up a localized string similar to DEBUG: {0}.
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.DefaultChoiceForMultipleChoices">
            <summary>
              Looks up a localized string similar to (default is &quot;{0}&quot;).
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.DefaultChoicePrompt">
            <summary>
              Looks up a localized string similar to (default is &quot;{0}&quot;): .
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.DefaultChoicesForMultipleChoices">
            <summary>
              Looks up a localized string similar to (default choices are {0}).
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.EmptyChoicesErrorTemplate">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; should have at least one element..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.InvalidChoiceHotKeyError">
            <summary>
              Looks up a localized string similar to Cannot process the hot key because a question mark (&quot;?&quot;) cannot be used as a hot key..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.InvalidDefaultChoiceErrorTemplate">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; must be a valid index into &quot;{1}&quot; or -1 for no default choice..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.InvalidDefaultChoiceForMultipleSelection">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; must be a valid index into &quot;{1}&quot;. &quot;{2}&quot; is not a valid index..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.NullErrorTemplate">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; cannot be null..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.NullOrEmptyErrorTemplate">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; cannot be null or empty..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.PromptCanceledError">
            <summary>
              Looks up a localized string similar to The prompt was canceled..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.PromptEmptyDescriptionsErrorTemplate">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; collection must have at least one element..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.PromptFieldPromptInputSeparatorTemplate">
            <summary>
              Looks up a localized string similar to {0}: .
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.PromptForChoiceHelp">
            <summary>
              Looks up a localized string similar to [?] Help .
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.PromptHelp">
            <summary>
              Looks up a localized string similar to (Type !? for Help.).
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.PromptNoHelpAvailableErrorTemplate">
            <summary>
              Looks up a localized string similar to No help is available for {0}..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.PromptParseFormatErrorTemplate">
            <summary>
              Looks up a localized string similar to Cannot recognize &quot;{1}&quot; as a {0} due to a format error..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.PromptParseOverflowErrorTemplate">
            <summary>
              Looks up a localized string similar to Cannot recognize &quot;{1}&quot; as a {0} due to an overflow error..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.PromptTypeLoadErrorTemplate">
            <summary>
              Looks up a localized string similar to Cannot display the prompt for &quot;{0}&quot; because type &quot;{1}&quot; cannot be loaded..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.PromptUnrecognizedCommandErrorTemplate">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; cannot be recognized as a valid Prompt command..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.RankZeroArrayErrorTemplate">
            <summary>
              Looks up a localized string similar to The field &quot;{0}&quot; is a zero rank array..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.ReadFailsOnNonInteractiveFlag">
            <summary>
              Looks up a localized string similar to Windows PowerShell is in NonInteractive mode. Read and Prompt functionality is not available..
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.VerboseFormatString">
            <summary>
              Looks up a localized string similar to VERBOSE: {0}.
            </summary>
        </member>
        <member name="P:ConsoleHostUserInterfaceStrings.WarningFormatString">
            <summary>
              Looks up a localized string similar to WARNING: {0}.
            </summary>
        </member>
        <member name="T:ManagedEntranceStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ManagedEntranceStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ManagedEntranceStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ManagedEntranceStrings.ShellBanner">
             <summary>
               Looks up a localized string similar to Windows PowerShell 
            Copyright (C) Microsoft Corporation. All rights reserved..
             </summary>
        </member>
        <member name="P:ManagedEntranceStrings.ShellHelp">
             <summary>
               Looks up a localized string similar to PowerShell[.exe] [-PSConsoleFile &lt;file&gt; | -Version &lt;version&gt;]
                [-NoLogo] [-NoExit] [-Sta] [-Mta] [-NoProfile] [-NonInteractive]
                [-InputFormat {Text | XML}] [-OutputFormat {Text | XML}]
                [-WindowStyle &lt;style&gt;] [-EncodedCommand &lt;Base64EncodedCommand&gt;]
                [-ConfigurationName &lt;string&gt;]
                [-File &lt;filePath&gt; &lt;args&gt;] [-ExecutionPolicy &lt;ExecutionPolicy&gt;]
                [-Command { - | &lt;script-block&gt; [-args &lt;arg-array&gt;]
                              | &lt;string&gt; [&lt;CommandParameters&gt;] } ]
            
            PowerShell[.exe] -Help | -? | / [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:ProgressNodeStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ProgressNodeStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ProgressNodeStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ProgressNodeStrings.InvisibleNodesMessagePlural">
            <summary>
              Looks up a localized string similar to {0} activities not shown....
            </summary>
        </member>
        <member name="P:ProgressNodeStrings.InvisibleNodesMessageSingular">
            <summary>
              Looks up a localized string similar to {0} activity not shown....
            </summary>
        </member>
        <member name="P:ProgressNodeStrings.SecondsRemaining">
            <summary>
              Looks up a localized string similar to {0}{1} remaining. .
            </summary>
        </member>
        <member name="T:TranscriptStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:TranscriptStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:TranscriptStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:TranscriptStrings.CannotStartTranscription">
            <summary>
              Looks up a localized string similar to Transcription cannot be started..
            </summary>
        </member>
        <member name="P:TranscriptStrings.ErrorStoppingTranscript">
            <summary>
              Looks up a localized string similar to An error occurred stopping transcription: {0}.
            </summary>
        </member>
        <member name="P:TranscriptStrings.HostDoesNotSupportTranscript">
            <summary>
              Looks up a localized string similar to This host does not support transcription..
            </summary>
        </member>
        <member name="P:TranscriptStrings.MultipleFilesNotSupported">
            <summary>
              Looks up a localized string similar to Cannot perform operation because the path resolved to more than one file. This command cannot operate on multiple files..
            </summary>
        </member>
        <member name="P:TranscriptStrings.ReadWriteFileNotFileSystemProvider">
            <summary>
              Looks up a localized string similar to The current provider ({0}) cannot open a file..
            </summary>
        </member>
        <member name="P:TranscriptStrings.TranscriptFileExistsNoClobber">
            <summary>
              Looks up a localized string similar to File {0} already exists and {1} was specified..
            </summary>
        </member>
        <member name="P:TranscriptStrings.TranscriptFileReadOnly">
            <summary>
              Looks up a localized string similar to File {0} is read-only. Cannot write to this file. &quot;Start-Transcript -Force&quot; will clear the read-only attribute..
            </summary>
        </member>
        <member name="P:TranscriptStrings.TranscriptionStarted">
            <summary>
              Looks up a localized string similar to Transcript started, output file is {0}.
            </summary>
        </member>
        <member name="P:TranscriptStrings.TranscriptionStopped">
            <summary>
              Looks up a localized string similar to Transcript stopped, output file is {0}.
            </summary>
        </member>
    </members>
</doc>
