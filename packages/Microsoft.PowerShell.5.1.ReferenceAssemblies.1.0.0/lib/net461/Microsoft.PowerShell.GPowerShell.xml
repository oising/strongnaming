<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.PowerShell.GPowerShell</name>
    </assembly>
    <members>
        <member name="T:GuiStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:GuiStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:GuiStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:GuiStrings.AboutISEAddOns">
            <summary>
              Looks up a localized string similar to _Open Add-on Tools Website.
            </summary>
        </member>
        <member name="P:GuiStrings.AddKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Add.
            </summary>
        </member>
        <member name="P:GuiStrings.AddOns">
            <summary>
              Looks up a localized string similar to _Add-ons.
            </summary>
        </member>
        <member name="P:GuiStrings.AddOnToolWithTheSameControl">
            <summary>
              Looks up a localized string similar to An Add-on tool with the same control has already been added to the vertical or horizontal Add-on tools..
            </summary>
        </member>
        <member name="P:GuiStrings.AddOnToolWithTheSameName">
            <summary>
              Looks up a localized string similar to An Add-on tool with the following name has already been added to the vertical or horizontal Add-on tools: {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.AliceBlueColorName">
            <summary>
              Looks up a localized string similar to Alice Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.AllFiles">
            <summary>
              Looks up a localized string similar to All Files.
            </summary>
        </member>
        <member name="P:GuiStrings.AlreadyRunning">
            <summary>
              Looks up a localized string similar to Already running a command. Please wait..
            </summary>
        </member>
        <member name="P:GuiStrings.AltKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Alt.
            </summary>
        </member>
        <member name="P:GuiStrings.AntiqueWhiteColorName">
            <summary>
              Looks up a localized string similar to Antique White.
            </summary>
        </member>
        <member name="P:GuiStrings.ApplicationStatus">
            <summary>
              Looks up a localized string similar to Application status.
            </summary>
        </member>
        <member name="P:GuiStrings.AquaColorName">
            <summary>
              Looks up a localized string similar to Aqua.
            </summary>
        </member>
        <member name="P:GuiStrings.AquamarineColorName">
            <summary>
              Looks up a localized string similar to Aquamarine.
            </summary>
        </member>
        <member name="P:GuiStrings.ArgumentArrayShouldHaveAtLeastOneElement">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; should have at least one element..
            </summary>
        </member>
        <member name="P:GuiStrings.ArgumentNotNullException">
            <summary>
              Looks up a localized string similar to Value must be null..
            </summary>
        </member>
        <member name="P:GuiStrings.ArgumentOutOfRangeMessage">
            <summary>
              Looks up a localized string similar to Argument &apos;{0}&apos; must be in the range: [{1},{2}]..
            </summary>
        </member>
        <member name="P:GuiStrings.ArgumentShouldBeFullPath">
            <summary>
              Looks up a localized string similar to The argument: &apos;{0}&apos; with value &apos;{1}&apos; must be a full path..
            </summary>
        </member>
        <member name="P:GuiStrings.ArgumentShouldBeGreaterThanOrEqualToAnotherArgument">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; should be greater than or equal to &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:GuiStrings.AzureColorName">
            <summary>
              Looks up a localized string similar to Azure.
            </summary>
        </member>
        <member name="P:GuiStrings.BackspaceKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Backspace.
            </summary>
        </member>
        <member name="P:GuiStrings.BeigeColorName">
            <summary>
              Looks up a localized string similar to Beige.
            </summary>
        </member>
        <member name="P:GuiStrings.BisqueColorName">
            <summary>
              Looks up a localized string similar to Bisque.
            </summary>
        </member>
        <member name="P:GuiStrings.BlackColorName">
            <summary>
              Looks up a localized string similar to Black.
            </summary>
        </member>
        <member name="P:GuiStrings.BlanchedAlmondColorName">
            <summary>
              Looks up a localized string similar to Blanched Almond.
            </summary>
        </member>
        <member name="P:GuiStrings.BlueColorName">
            <summary>
              Looks up a localized string similar to Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.BlueVioletColorName">
            <summary>
              Looks up a localized string similar to Blue Violet.
            </summary>
        </member>
        <member name="P:GuiStrings.BreakAllDebuggerMenuItem">
            <summary>
              Looks up a localized string similar to Break _All.
            </summary>
        </member>
        <member name="P:GuiStrings.BreakAllDebuggerShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+B.
            </summary>
        </member>
        <member name="P:GuiStrings.BreakKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Break.
            </summary>
        </member>
        <member name="P:GuiStrings.BrownColorName">
            <summary>
              Looks up a localized string similar to Brown.
            </summary>
        </member>
        <member name="P:GuiStrings.BurlyWoodColorName">
            <summary>
              Looks up a localized string similar to Burly Wood.
            </summary>
        </member>
        <member name="P:GuiStrings.CadetBlueColorName">
            <summary>
              Looks up a localized string similar to Cadet Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.Cancel">
            <summary>
              Looks up a localized string similar to _Cancel.
            </summary>
        </member>
        <member name="P:GuiStrings.CancelName">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:GuiStrings.CannotAddMoreThanMaxAddOnTools">
            <summary>
              Looks up a localized string similar to Cannot add more than {0} Add-on tools..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotAddOrChangeItems">
            <summary>
              Looks up a localized string similar to Cannot add or change items in the collection..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotAddRunspace">
            <summary>
              Looks up a localized string similar to Cannot add past the maximum number of items..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotAddSubenusForMenusWithAnExecuteScript">
            <summary>
              Looks up a localized string similar to Cannot add submenus if the {0} property is not null..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotCloseUnsavedFileFormat">
            <summary>
              Looks up a localized string similar to Cannot close unsaved file: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotCreateElement">
            <summary>
              Looks up a localized string similar to Cannot create element because an exception occurred with the message: {0}..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotExecuteScript">
            <summary>
              Looks up a localized string similar to Windows PowerShell ISE cannot run the script, because a script or command is already running in this tab..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotExecuteUnsavedScript">
            <summary>
              Looks up a localized string similar to Cannot run unsaved script..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotFindText">
            <summary>
              Looks up a localized string similar to Cannot Find &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotGetHelpWhileRunning">
            <summary>
              Looks up a localized string similar to Cannot get help for &apos;{0}&apos; while running a command..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotGetOrSetObjectModelPropertyForAddOnToolExceptionFormat">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not available for Add-on tools, it is meant for script use only. You can use &apos;{1}&apos; to get or set the selected file..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotInsertValue">
            <summary>
              Looks up a localized string similar to Cannot add this object to the collection. You can call the {0} method with no parameters or the {1} method..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotLaunchFormat">
             <summary>
               Looks up a localized string similar to Cannot start &quot;{0}&quot;. Interactive console applications are not supported. 
            To run the application, use the Start-Process cmdlet or use &quot;Start PowerShell.exe&quot; from the File menu.
            To view/modify the list of blocked console applications, use {1}, or consult online help..
             </summary>
        </member>
        <member name="P:GuiStrings.CannotModifyCollection">
            <summary>
              Looks up a localized string similar to Cannot modify collection.
            </summary>
        </member>
        <member name="P:GuiStrings.CannotOpenPaneWithNoVisibleTools">
            <summary>
              Looks up a localized string similar to Cannot open pane that has no visible tools.
            </summary>
        </member>
        <member name="P:GuiStrings.CannotRecognizeDueToFormat">
            <summary>
              Looks up a localized string similar to Cannot recognize &quot;{0}&quot; as a {1} due to a format error..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotRecognizeDueToOverflow">
            <summary>
              Looks up a localized string similar to Cannot recognize &quot;{0}&quot; as a {1} due to an overflow error..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotRemoveSavedFile">
            <summary>
              Looks up a localized string similar to Cannot remove saved file..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotSaveAlreadyOpened">
            <summary>
              Looks up a localized string similar to Cannot save the file with the name of an already opened file..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotSaveFileThatNeedsUnicodeUpgrade">
            <summary>
              Looks up a localized string similar to The file cannot be saved in the current encoding..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotSaveUntitled">
            <summary>
              Looks up a localized string similar to {0} cannot be used for Untitled files, please use {1}..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotSetCollectionValue">
            <summary>
              Looks up a localized string similar to Cannot set object in the collection..
            </summary>
        </member>
        <member name="P:GuiStrings.CannotShowCommandWhileRunning">
            <summary>
              Looks up a localized string similar to Cannot show command &apos;{0}&apos; while running a command..
            </summary>
        </member>
        <member name="P:GuiStrings.CaptionDashMessage">
            <summary>
              Looks up a localized string similar to {0} - {1}.
            </summary>
        </member>
        <member name="P:GuiStrings.CDATANotClosed">
            <summary>
              Looks up a localized string similar to CDATA not closed.
            </summary>
        </member>
        <member name="P:GuiStrings.ChartreuseColorName">
            <summary>
              Looks up a localized string similar to Chartreuse.
            </summary>
        </member>
        <member name="P:GuiStrings.ChocolateColorName">
            <summary>
              Looks up a localized string similar to Chocolate.
            </summary>
        </member>
        <member name="P:GuiStrings.ClearConsoleTooltip">
            <summary>
              Looks up a localized string similar to Clear Console Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.CloseButtonTitle">
            <summary>
              Looks up a localized string similar to _Stop.
            </summary>
        </member>
        <member name="P:GuiStrings.CloseRunspace">
            <summary>
              Looks up a localized string similar to C_lose PowerShell Tab.
            </summary>
        </member>
        <member name="P:GuiStrings.CloseRunspaceShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+W.
            </summary>
        </member>
        <member name="P:GuiStrings.CloseScript">
            <summary>
              Looks up a localized string similar to _Close.
            </summary>
        </member>
        <member name="P:GuiStrings.CloseScriptShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+F4.
            </summary>
        </member>
        <member name="P:GuiStrings.CloseTool">
            <summary>
              Looks up a localized string similar to Close Tool.
            </summary>
        </member>
        <member name="P:GuiStrings.Col">
            <summary>
              Looks up a localized string similar to Col.
            </summary>
        </member>
        <member name="P:GuiStrings.CollapseScriptPane">
            <summary>
              Looks up a localized string similar to Collapse Script Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.CollectionShouldContainAtLeastOneRunspace">
            <summary>
              Looks up a localized string similar to This collection should contain at least one item..
            </summary>
        </member>
        <member name="P:GuiStrings.CommandsAddOnToolTitle">
            <summary>
              Looks up a localized string similar to Commands.
            </summary>
        </member>
        <member name="P:GuiStrings.CommandTextAndDetail">
            <summary>
              Looks up a localized string similar to {0} ({1}).
            </summary>
        </member>
        <member name="P:GuiStrings.Completed">
            <summary>
              Looks up a localized string similar to Completed.
            </summary>
        </member>
        <member name="P:GuiStrings.Computer">
            <summary>
              Looks up a localized string similar to _Computer:.
            </summary>
        </member>
        <member name="P:GuiStrings.Connect">
            <summary>
              Looks up a localized string similar to Co_nnect.
            </summary>
        </member>
        <member name="P:GuiStrings.Console">
            <summary>
              Looks up a localized string similar to Console.
            </summary>
        </member>
        <member name="P:GuiStrings.Copy">
            <summary>
              Looks up a localized string similar to _Copy.
            </summary>
        </member>
        <member name="P:GuiStrings.Copy2Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Ins.
            </summary>
        </member>
        <member name="P:GuiStrings.CopyInsteadOfStop">
            <summary>
              Looks up a localized string similar to {0} copied selected text. Unselect or use {1} to stop operation..
            </summary>
        </member>
        <member name="P:GuiStrings.CopyTooltip">
            <summary>
              Looks up a localized string similar to Copy.
            </summary>
        </member>
        <member name="P:GuiStrings.CoralColorName">
            <summary>
              Looks up a localized string similar to Coral.
            </summary>
        </member>
        <member name="P:GuiStrings.CornflowerBlueColorName">
            <summary>
              Looks up a localized string similar to Cornflower Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.CornsilkColorName">
            <summary>
              Looks up a localized string similar to Cornsilk.
            </summary>
        </member>
        <member name="P:GuiStrings.CredentialMessage">
            <summary>
              Looks up a localized string similar to You will be asked for credentials when you connect..
            </summary>
        </member>
        <member name="P:GuiStrings.CredentialTitle">
            <summary>
              Looks up a localized string similar to Windows PowerShell ISE Credential Request.
            </summary>
        </member>
        <member name="P:GuiStrings.CrimsonColorName">
            <summary>
              Looks up a localized string similar to Crimson.
            </summary>
        </member>
        <member name="P:GuiStrings.CtrlKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Ctrl.
            </summary>
        </member>
        <member name="P:GuiStrings.Cut">
            <summary>
              Looks up a localized string similar to Cu_t.
            </summary>
        </member>
        <member name="P:GuiStrings.Cut1Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+X.
            </summary>
        </member>
        <member name="P:GuiStrings.Cut2Shortcut">
            <summary>
              Looks up a localized string similar to Shift+Del.
            </summary>
        </member>
        <member name="P:GuiStrings.CutTooltip">
            <summary>
              Looks up a localized string similar to Cut.
            </summary>
        </member>
        <member name="P:GuiStrings.CyanColorName">
            <summary>
              Looks up a localized string similar to Cyan.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkBlueColorName">
            <summary>
              Looks up a localized string similar to Dark Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkCyanColorName">
            <summary>
              Looks up a localized string similar to Dark Cyan.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkGoldenrodColorName">
            <summary>
              Looks up a localized string similar to Dark Goldenrod.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkGrayColorName">
            <summary>
              Looks up a localized string similar to Dark Gray.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkGreenColorName">
            <summary>
              Looks up a localized string similar to Dark Green.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkKhakiColorName">
            <summary>
              Looks up a localized string similar to Dark Khaki.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkMagentaColorName">
            <summary>
              Looks up a localized string similar to Dark Magenta.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkOliveGreenColorName">
            <summary>
              Looks up a localized string similar to Dark Olive Green.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkOrangeColorName">
            <summary>
              Looks up a localized string similar to Dark Orange.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkOrchidColorName">
            <summary>
              Looks up a localized string similar to Dark Orchid.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkRedColorName">
            <summary>
              Looks up a localized string similar to Dark Red.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkSalmonColorName">
            <summary>
              Looks up a localized string similar to Dark Salmon.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkSeaGreenColorName">
            <summary>
              Looks up a localized string similar to Dark Sea Green.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkSlateBlueColorName">
            <summary>
              Looks up a localized string similar to Dark Slate Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkSlateGrayColorName">
            <summary>
              Looks up a localized string similar to Dark Slate Gray.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkTurquoiseColorName">
            <summary>
              Looks up a localized string similar to Dark Turquoise.
            </summary>
        </member>
        <member name="P:GuiStrings.DarkVioletColorName">
            <summary>
              Looks up a localized string similar to Dark Violet.
            </summary>
        </member>
        <member name="P:GuiStrings.DebugFormat">
            <summary>
              Looks up a localized string similar to DEBUG: {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.DebuggerSourceLineFormat">
            <summary>
              Looks up a localized string similar to Stopped at: {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.DebugMenu">
            <summary>
              Looks up a localized string similar to _Debug.
            </summary>
        </member>
        <member name="P:GuiStrings.DebugPrompt">
            <summary>
              Looks up a localized string similar to Debug Prompt.
            </summary>
        </member>
        <member name="P:GuiStrings.DeepPinkColorName">
            <summary>
              Looks up a localized string similar to Deep Pink.
            </summary>
        </member>
        <member name="P:GuiStrings.DeepSkyBlueColorName">
            <summary>
              Looks up a localized string similar to Deep Sky Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultFont">
            <summary>
              Looks up a localized string similar to Lucida Console.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultFontSize">
            <summary>
              Looks up a localized string similar to 9.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultOptionsCannotBeSet">
            <summary>
              Looks up a localized string similar to Default options cannot be set..
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetAuthor">
            <summary>
              Looks up a localized string similar to Microsoft Corporation.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetCmdletAdvancedFunction">
            <summary>
              Looks up a localized string similar to {0} (advanced function).
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetCmdletAdvancedFunctionComplete">
            <summary>
              Looks up a localized string similar to {0} (advanced function) - complete.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetCommentBlock">
            <summary>
              Looks up a localized string similar to Comment block.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionClass">
            <summary>
              Looks up a localized string similar to Simple class..
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionDSCConfiguration">
            <summary>
              Looks up a localized string similar to DSC Configuration that uses built-in resource providers: {0} and {1}.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionDSCConfigurationData">
            <summary>
              Looks up a localized string similar to DSC ConfigurationData..
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionDSCConfigurationWithConfigurationData">
            <summary>
              Looks up a localized string similar to DSC Configuration that uses built-in resource providers: {0} and {1} using ConfigurationData..
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionDSCResourceProvider">
            <summary>
              Looks up a localized string similar to PowerShell Desired State Configuration simple resource provider with functions for {0}, {1}, and {2}.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionDSCResourcesWithClass">
            <summary>
              Looks up a localized string similar to A DSC Resource implemented as a PowerShell class..
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionFor">
            <summary>
              Looks up a localized string similar to {0} loop.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionFunction2Param">
            <summary>
              Looks up a localized string similar to Simple {0} with 2 parameters.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionFunctionAdvanced">
            <summary>
              Looks up a localized string similar to Advanced {0} ({1}) with some {2} and some inline help fields.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionFunctionAdvancedBig">
            <summary>
              Looks up a localized string similar to Advanced {0} ({1}) with all {2} and all inline help fields.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetDescriptionStatement">
            <summary>
              Looks up a localized string similar to {0} statement.
            </summary>
        </member>
        <member name="P:GuiStrings.DefaultSnippetExceptionHandling">
            <summary>
              Looks up a localized string similar to {0} exception handling.
            </summary>
        </member>
        <member name="P:GuiStrings.DelKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Del.
            </summary>
        </member>
        <member name="P:GuiStrings.DifferentEndTagExpectedXmlErrorFormat">
            <summary>
              Looks up a localized string similar to End tag for element &apos;{0}&apos; expected.
            </summary>
        </member>
        <member name="P:GuiStrings.DimGrayColorName">
            <summary>
              Looks up a localized string similar to Dim Gray.
            </summary>
        </member>
        <member name="P:GuiStrings.DirtyFlag">
            <summary>
              Looks up a localized string similar to *.
            </summary>
        </member>
        <member name="P:GuiStrings.DisableAllBreakpointsMenuItem">
            <summary>
              Looks up a localized string similar to _Disable All Breakpoints.
            </summary>
        </member>
        <member name="P:GuiStrings.DisableBreakpointMenuItem">
            <summary>
              Looks up a localized string similar to _Disable Breakpoint.
            </summary>
        </member>
        <member name="P:GuiStrings.DodgerBlueColorName">
            <summary>
              Looks up a localized string similar to Dodger Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.DownKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Down.
            </summary>
        </member>
        <member name="P:GuiStrings.Edit">
            <summary>
              Looks up a localized string similar to _Edit.
            </summary>
        </member>
        <member name="P:GuiStrings.Editor">
            <summary>
              Looks up a localized string similar to Editor.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorBoxSelectLineDownShortcut">
            <summary>
              Looks up a localized string similar to Alt+Shift+Down.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorBoxSelectLineUpShortcut">
            <summary>
              Looks up a localized string similar to Alt+Shift+Up.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorBoxSelectToNextCharacterShortcut">
            <summary>
              Looks up a localized string similar to Alt+Shift+Right.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorBoxSelectToPreviousCharacterShortcut">
            <summary>
              Looks up a localized string similar to Alt+Shift+Left.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorDeleteCharacterToLeftShortcut">
            <summary>
              Looks up a localized string similar to Shift+Backspace.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorDeleteWordToLeftShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Backspace.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorDeleteWordToRightShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Del.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorInsertNewLineShortcut">
            <summary>
              Looks up a localized string similar to Shift+Enter.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorMakeLowercaseShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+U.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorMakeUppercaseShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+U.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorMoveCurrentLineToBottomShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Alt+End.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorMoveCurrentLineToTopShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Alt+Home.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorMoveToEndOfDocumentShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+End.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorMoveToNextWordShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Right.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorMoveToPreviousWordShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Left.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorMoveToStartOfDocumentShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Home.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorRedoShortcut1">
            <summary>
              Looks up a localized string similar to Ctrl+Y.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorRedoShortcut2">
            <summary>
              Looks up a localized string similar to Alt+Shift+Backspace.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorScrollDownAndMoveCaretIfNecessaryShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Down.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorScrollUpAndMoveCaretIfNecessaryShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Up.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectAllShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+A.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectEnclosingShortcut">
            <summary>
              Looks up a localized string similar to Alt+Left.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectFirstChildShortcut">
            <summary>
              Looks up a localized string similar to Alt+Right.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectLineDownShortcut">
            <summary>
              Looks up a localized string similar to Shift+Down.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectLineUpShortcut">
            <summary>
              Looks up a localized string similar to Shift+Up.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectNextSiblingShortcut">
            <summary>
              Looks up a localized string similar to Alt+Down.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectPageDownShortcut">
            <summary>
              Looks up a localized string similar to Shift+PgDn.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectPageUpShortcut">
            <summary>
              Looks up a localized string similar to Shift+PgUp.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectPreviousSiblingShortcut">
            <summary>
              Looks up a localized string similar to Alt+Up.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectToEndOfDocumentShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+End.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectToEndOfLineShortcut">
            <summary>
              Looks up a localized string similar to Shift+End.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectToNextCharacterShortcut">
            <summary>
              Looks up a localized string similar to Shift+Right.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectToNextWordShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Right.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectToPreviousCharacterShortcut">
            <summary>
              Looks up a localized string similar to Shift+Left.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectToPreviousWordShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Left.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectToStartOfDocumentShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Home.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorSelectToStartOfLineShortcut">
            <summary>
              Looks up a localized string similar to Shift+Home.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorTransposeLineShortcut">
            <summary>
              Looks up a localized string similar to Alt+Shift+T.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorUndoShortcut1">
            <summary>
              Looks up a localized string similar to Ctrl+Z.
            </summary>
        </member>
        <member name="P:GuiStrings.EditorUndoShortcut2">
            <summary>
              Looks up a localized string similar to Alt+Backspace.
            </summary>
        </member>
        <member name="P:GuiStrings.ElementNameNotFoundXmlError">
            <summary>
              Looks up a localized string similar to Element name not found.
            </summary>
        </member>
        <member name="P:GuiStrings.EnableAllBreakpointsMenuItem">
            <summary>
              Looks up a localized string similar to _Enable All Breakpoints.
            </summary>
        </member>
        <member name="P:GuiStrings.EnableBreakpointMenuItem">
            <summary>
              Looks up a localized string similar to _Enable Breakpoint.
            </summary>
        </member>
        <member name="P:GuiStrings.EndKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to End.
            </summary>
        </member>
        <member name="P:GuiStrings.EndTagNotClosedXmlError">
            <summary>
              Looks up a localized string similar to End tag not closed.
            </summary>
        </member>
        <member name="P:GuiStrings.EnterKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Enter.
            </summary>
        </member>
        <member name="P:GuiStrings.ErrorCaption">
            <summary>
              Looks up a localized string similar to Windows PowerShell ISE - Error.
            </summary>
        </member>
        <member name="P:GuiStrings.ErrorMessageUserSettingsCorrupted">
            <summary>
              Looks up a localized string similar to Application cannot run because of an error in a user settings file. Click OK to restore default settings and continue, or click Cancel to exit.{0}{1}..
            </summary>
        </member>
        <member name="P:GuiStrings.EvaluatingIntellisense">
            <summary>
              Looks up a localized string similar to Intellisense....
            </summary>
        </member>
        <member name="P:GuiStrings.EvaluatingTabCompletion">
            <summary>
              Looks up a localized string similar to Tab Completion....
            </summary>
        </member>
        <member name="P:GuiStrings.ExceptionalAddOnApplicationCloseMessageFormat">
            <summary>
              Looks up a localized string similar to An unexpected error has occurred and {0} must close. The problem might have been caused by an Add-on tool. Some Add-on tools can be added by your profile. To run Windows PowerShell ISE without running your profile, run &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:GuiStrings.ExceptionalApplicationCloseMessageFormat">
            <summary>
              Looks up a localized string similar to An unexpected error has occurred, and {0} must close..
            </summary>
        </member>
        <member name="P:GuiStrings.ExecuteProfileErrorFormat">
            <summary>
              Looks up a localized string similar to Error running profile: {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.Exit">
            <summary>
              Looks up a localized string similar to E_xit.
            </summary>
        </member>
        <member name="P:GuiStrings.ExitShortcut">
            <summary>
              Looks up a localized string similar to Alt+F4.
            </summary>
        </member>
        <member name="P:GuiStrings.F10KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F10.
            </summary>
        </member>
        <member name="P:GuiStrings.F11KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F11.
            </summary>
        </member>
        <member name="P:GuiStrings.F12KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F12.
            </summary>
        </member>
        <member name="P:GuiStrings.F1KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F1.
            </summary>
        </member>
        <member name="P:GuiStrings.F2KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F2.
            </summary>
        </member>
        <member name="P:GuiStrings.F3KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F3.
            </summary>
        </member>
        <member name="P:GuiStrings.F4KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F4.
            </summary>
        </member>
        <member name="P:GuiStrings.F5KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F5.
            </summary>
        </member>
        <member name="P:GuiStrings.F6KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F6.
            </summary>
        </member>
        <member name="P:GuiStrings.F7KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F7.
            </summary>
        </member>
        <member name="P:GuiStrings.F8KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F8.
            </summary>
        </member>
        <member name="P:GuiStrings.F9KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to F9.
            </summary>
        </member>
        <member name="P:GuiStrings.Failed">
            <summary>
              Looks up a localized string similar to Failed.
            </summary>
        </member>
        <member name="P:GuiStrings.FailedToRefresh">
            <summary>
              Looks up a localized string similar to Failed to refresh. Message: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:GuiStrings.File">
            <summary>
              Looks up a localized string similar to _File.
            </summary>
        </member>
        <member name="P:GuiStrings.FileAlreadyOpened">
            <summary>
              Looks up a localized string similar to A copy of this file is open in another PowerShell Tab. Changes made to this file will affect all open copies..
            </summary>
        </member>
        <member name="P:GuiStrings.FileDisplayNameFormat">
            <summary>
              Looks up a localized string similar to {0} {1}{2}{3} {4}.
            </summary>
        </member>
        <member name="P:GuiStrings.FileIsReadOnly">
            <summary>
              Looks up a localized string similar to You cannot edit any script files in Windows PowerShell ISE while the debugger is running. To edit a script, stop the debugger..
            </summary>
        </member>
        <member name="P:GuiStrings.FileNumberFormat">
            <summary>
              Looks up a localized string similar to {0}{1}.
            </summary>
        </member>
        <member name="P:GuiStrings.FilesHaveBeenRecoveredMessageFormat">
            <summary>
              Looks up a localized string similar to The most recent {0} session did not close normally. All files {1} that were open during the previous session will be reopened..
            </summary>
        </member>
        <member name="P:GuiStrings.Find">
            <summary>
              Looks up a localized string similar to _Find in Script....
            </summary>
        </member>
        <member name="P:GuiStrings.FindInSelection">
            <summary>
              Looks up a localized string similar to Find in _selection.
            </summary>
        </member>
        <member name="P:GuiStrings.FindNext">
            <summary>
              Looks up a localized string similar to _Find Next.
            </summary>
        </member>
        <member name="P:GuiStrings.FindNextMenu">
            <summary>
              Looks up a localized string similar to Find _Next in Script.
            </summary>
        </member>
        <member name="P:GuiStrings.FindNextShortcut">
            <summary>
              Looks up a localized string similar to F3.
            </summary>
        </member>
        <member name="P:GuiStrings.FindPreviousMenu">
            <summary>
              Looks up a localized string similar to Find Pre_vious in Script.
            </summary>
        </member>
        <member name="P:GuiStrings.FindPreviousShortcut">
            <summary>
              Looks up a localized string similar to Shift+F3.
            </summary>
        </member>
        <member name="P:GuiStrings.FindShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+F.
            </summary>
        </member>
        <member name="P:GuiStrings.FindTitle">
            <summary>
              Looks up a localized string similar to Find.
            </summary>
        </member>
        <member name="P:GuiStrings.FindWhat">
            <summary>
              Looks up a localized string similar to Fi_nd what:.
            </summary>
        </member>
        <member name="P:GuiStrings.FindWhatText">
            <summary>
              Looks up a localized string similar to Find what text.
            </summary>
        </member>
        <member name="P:GuiStrings.FirebrickColorName">
            <summary>
              Looks up a localized string similar to Firebrick.
            </summary>
        </member>
        <member name="P:GuiStrings.FixedWidthCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Fixed Width.
            </summary>
        </member>
        <member name="P:GuiStrings.FloralWhiteColorName">
            <summary>
              Looks up a localized string similar to Floral White.
            </summary>
        </member>
        <member name="P:GuiStrings.ForestGreenColorName">
            <summary>
              Looks up a localized string similar to Forest Green.
            </summary>
        </member>
        <member name="P:GuiStrings.FuchsiaColorName">
            <summary>
              Looks up a localized string similar to Fuchsia.
            </summary>
        </member>
        <member name="P:GuiStrings.GainsboroColorName">
            <summary>
              Looks up a localized string similar to Gainsboro.
            </summary>
        </member>
        <member name="P:GuiStrings.GetCallStackMenuItem">
            <summary>
              Looks up a localized string similar to Display Call Stac_k.
            </summary>
        </member>
        <member name="P:GuiStrings.GetCallStackShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+D.
            </summary>
        </member>
        <member name="P:GuiStrings.GhostWhiteColorName">
            <summary>
              Looks up a localized string similar to Ghost White.
            </summary>
        </member>
        <member name="P:GuiStrings.GoldColorName">
            <summary>
              Looks up a localized string similar to Gold.
            </summary>
        </member>
        <member name="P:GuiStrings.GoldenrodColorName">
            <summary>
              Looks up a localized string similar to Goldenrod.
            </summary>
        </member>
        <member name="P:GuiStrings.GoToConsolePane">
            <summary>
              Looks up a localized string similar to Go To _Console.
            </summary>
        </member>
        <member name="P:GuiStrings.GoToConsoleShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+D.
            </summary>
        </member>
        <member name="P:GuiStrings.GoToEditorShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+I.
            </summary>
        </member>
        <member name="P:GuiStrings.GoToHorizontalAddOnTool">
            <summary>
              Looks up a localized string similar to Go _to horizontal Add-on Tool.
            </summary>
        </member>
        <member name="P:GuiStrings.GoToLine">
            <summary>
              Looks up a localized string similar to _Go To Line....
            </summary>
        </member>
        <member name="P:GuiStrings.GoToLineCaption">
            <summary>
              Looks up a localized string similar to Go To Line.
            </summary>
        </member>
        <member name="P:GuiStrings.GoToLineShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+G.
            </summary>
        </member>
        <member name="P:GuiStrings.GoToMatch">
            <summary>
              Looks up a localized string similar to Go to _Match.
            </summary>
        </member>
        <member name="P:GuiStrings.GoToMatchShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Oem6.
            </summary>
        </member>
        <member name="P:GuiStrings.GoToScriptPane">
            <summary>
              Looks up a localized string similar to Go to _Script Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.GoToVerticalAddOnTool">
            <summary>
              Looks up a localized string similar to _Go to vertical Add-on Tool.
            </summary>
        </member>
        <member name="P:GuiStrings.GraphicalPowerShell">
            <summary>
              Looks up a localized string similar to Windows PowerShell ISE.
            </summary>
        </member>
        <member name="P:GuiStrings.GrayColorName">
            <summary>
              Looks up a localized string similar to Gray.
            </summary>
        </member>
        <member name="P:GuiStrings.GreenColorName">
            <summary>
              Looks up a localized string similar to Green.
            </summary>
        </member>
        <member name="P:GuiStrings.GreenYellowColorName">
            <summary>
              Looks up a localized string similar to Green Yellow.
            </summary>
        </member>
        <member name="P:GuiStrings.Help">
            <summary>
              Looks up a localized string similar to _Help.
            </summary>
        </member>
        <member name="P:GuiStrings.HelpShortcut">
            <summary>
              Looks up a localized string similar to F1.
            </summary>
        </member>
        <member name="P:GuiStrings.Hidden">
            <summary>
              Looks up a localized string similar to Hidden.
            </summary>
        </member>
        <member name="P:GuiStrings.HideAddOnToolsPane">
            <summary>
              Looks up a localized string similar to Hide Add-on Tools Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.HideHorizontalAddOnToolShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+H.
            </summary>
        </member>
        <member name="P:GuiStrings.HideScriptPaneTooltip">
            <summary>
              Looks up a localized string similar to Hide Script Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.HideSelectedHorizontalAddOn">
            <summary>
              Looks up a localized string similar to Hi_de Selected Horizontal Add-on Tool.
            </summary>
        </member>
        <member name="P:GuiStrings.HideSelectedVerticallAddOn">
            <summary>
              Looks up a localized string similar to H_ide Selected Vertical Add-on Tool.
            </summary>
        </member>
        <member name="P:GuiStrings.HideVerticalAddOnToolShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+V.
            </summary>
        </member>
        <member name="P:GuiStrings.HitBreakpointFormat">
            <summary>
              Looks up a localized string similar to Hit {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.HomeKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Home.
            </summary>
        </member>
        <member name="P:GuiStrings.HoneydewColorName">
            <summary>
              Looks up a localized string similar to Honeydew.
            </summary>
        </member>
        <member name="P:GuiStrings.HorizontalAddOn">
            <summary>
              Looks up a localized string similar to Horizontal add-ons.
            </summary>
        </member>
        <member name="P:GuiStrings.HorizontalAddOnSplitter">
            <summary>
              Looks up a localized string similar to Horizontal Add-on Tools Splitter.
            </summary>
        </member>
        <member name="P:GuiStrings.HotPinkColorName">
            <summary>
              Looks up a localized string similar to Hot Pink.
            </summary>
        </member>
        <member name="P:GuiStrings.IncludingRecovered">
            <summary>
              Looks up a localized string similar to (including recovered files) .
            </summary>
        </member>
        <member name="P:GuiStrings.IndianRedColorName">
            <summary>
              Looks up a localized string similar to Indian Red.
            </summary>
        </member>
        <member name="P:GuiStrings.IndigoColorName">
            <summary>
              Looks up a localized string similar to Indigo.
            </summary>
        </member>
        <member name="P:GuiStrings.Input">
            <summary>
              Looks up a localized string similar to Windows PowerShell ISE - Input.
            </summary>
        </member>
        <member name="P:GuiStrings.InputDescription">
            <summary>
              Looks up a localized string similar to input description.
            </summary>
        </member>
        <member name="P:GuiStrings.InputHelpMessage">
            <summary>
              Looks up a localized string similar to input help message.
            </summary>
        </member>
        <member name="P:GuiStrings.InsKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Ins.
            </summary>
        </member>
        <member name="P:GuiStrings.IntegerRequired">
            <summary>
              Looks up a localized string similar to Number not valid. Value must be an integer in the range [1,{0}]..
            </summary>
        </member>
        <member name="P:GuiStrings.IntellisenseFontName">
            <summary>
              Looks up a localized string similar to Segoe UI.
            </summary>
        </member>
        <member name="P:GuiStrings.IntellisenseShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Space.
            </summary>
        </member>
        <member name="P:GuiStrings.IntellisenseTimedOut">
            <summary>
              Looks up a localized string similar to Intellisense timed out.
            </summary>
        </member>
        <member name="P:GuiStrings.InTheFutureDoNotShow">
            <summary>
              Looks up a localized string similar to In the future, do not show this message.
            </summary>
        </member>
        <member name="P:GuiStrings.InvalidFontName">
            <summary>
              Looks up a localized string similar to The font name: &apos;{0}&apos; is not valid..
            </summary>
        </member>
        <member name="P:GuiStrings.IvoryColorName">
            <summary>
              Looks up a localized string similar to Ivory.
            </summary>
        </member>
        <member name="P:GuiStrings.KhakiColorName">
            <summary>
              Looks up a localized string similar to Khaki.
            </summary>
        </member>
        <member name="P:GuiStrings.LavenderBlushColorName">
            <summary>
              Looks up a localized string similar to Lavender Blush.
            </summary>
        </member>
        <member name="P:GuiStrings.LavenderColorName">
            <summary>
              Looks up a localized string similar to Lavender.
            </summary>
        </member>
        <member name="P:GuiStrings.LawnGreenColorName">
            <summary>
              Looks up a localized string similar to Lawn Green.
            </summary>
        </member>
        <member name="P:GuiStrings.LeftKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Left.
            </summary>
        </member>
        <member name="P:GuiStrings.LemonChiffonColorName">
            <summary>
              Looks up a localized string similar to Lemon Chiffon.
            </summary>
        </member>
        <member name="P:GuiStrings.LightBlueColorName">
            <summary>
              Looks up a localized string similar to Light Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.LightCoralColorName">
            <summary>
              Looks up a localized string similar to Light Coral.
            </summary>
        </member>
        <member name="P:GuiStrings.LightCyanColorName">
            <summary>
              Looks up a localized string similar to Light Cyan.
            </summary>
        </member>
        <member name="P:GuiStrings.LightGoldenrodYellowColorName">
            <summary>
              Looks up a localized string similar to Light Goldenrod Yellow.
            </summary>
        </member>
        <member name="P:GuiStrings.LightGrayColorName">
            <summary>
              Looks up a localized string similar to Light Gray.
            </summary>
        </member>
        <member name="P:GuiStrings.LightGreenColorName">
            <summary>
              Looks up a localized string similar to Light Green.
            </summary>
        </member>
        <member name="P:GuiStrings.LightPinkColorName">
            <summary>
              Looks up a localized string similar to Light Pink.
            </summary>
        </member>
        <member name="P:GuiStrings.LightSalmonColorName">
            <summary>
              Looks up a localized string similar to Light Salmon.
            </summary>
        </member>
        <member name="P:GuiStrings.LightSeaGreenColorName">
            <summary>
              Looks up a localized string similar to Light Sea Green.
            </summary>
        </member>
        <member name="P:GuiStrings.LightSkyBlueColorName">
            <summary>
              Looks up a localized string similar to Light Sky Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.LightSlateGrayColorName">
            <summary>
              Looks up a localized string similar to Light Slate Gray.
            </summary>
        </member>
        <member name="P:GuiStrings.LightSteelBlueColorName">
            <summary>
              Looks up a localized string similar to Light Steel Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.LightYellowColorName">
            <summary>
              Looks up a localized string similar to Light Yellow.
            </summary>
        </member>
        <member name="P:GuiStrings.LimeColorName">
            <summary>
              Looks up a localized string similar to Lime.
            </summary>
        </member>
        <member name="P:GuiStrings.LimeGreenColorName">
            <summary>
              Looks up a localized string similar to Lime Green.
            </summary>
        </member>
        <member name="P:GuiStrings.LinenColorName">
            <summary>
              Looks up a localized string similar to Linen.
            </summary>
        </member>
        <member name="P:GuiStrings.LineNumber">
            <summary>
              Looks up a localized string similar to Line Number:.
            </summary>
        </member>
        <member name="P:GuiStrings.ListBreakpointsMenuItem">
            <summary>
              Looks up a localized string similar to _List Breakpoints.
            </summary>
        </member>
        <member name="P:GuiStrings.ListBreakpointsShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+L.
            </summary>
        </member>
        <member name="P:GuiStrings.Ln">
            <summary>
              Looks up a localized string similar to Ln.
            </summary>
        </member>
        <member name="P:GuiStrings.LoadingSettingsFailedFormat">
            <summary>
              Looks up a localized string similar to The application cannot start because it could not access the user settings file: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:GuiStrings.LoadSourceFileErrorFormat">
            <summary>
              Looks up a localized string similar to Error loading source file &apos;{0}&apos; ({1}).
            </summary>
        </member>
        <member name="P:GuiStrings.MagentaColorName">
            <summary>
              Looks up a localized string similar to Magenta.
            </summary>
        </member>
        <member name="P:GuiStrings.MainMenu">
            <summary>
              Looks up a localized string similar to Main Menu.
            </summary>
        </member>
        <member name="P:GuiStrings.MainWindow">
            <summary>
              Looks up a localized string similar to Windows PowerShell ISE Main Window.
            </summary>
        </member>
        <member name="P:GuiStrings.ManageThemesButtonAutomationName">
            <summary>
              Looks up a localized string similar to Manage Themes Button.
            </summary>
        </member>
        <member name="P:GuiStrings.MaroonColorName">
            <summary>
              Looks up a localized string similar to Maroon.
            </summary>
        </member>
        <member name="P:GuiStrings.MatchCase">
            <summary>
              Looks up a localized string similar to Match _case.
            </summary>
        </member>
        <member name="P:GuiStrings.MediumAquamarineColorName">
            <summary>
              Looks up a localized string similar to Medium Aquamarine.
            </summary>
        </member>
        <member name="P:GuiStrings.MediumBlueColorName">
            <summary>
              Looks up a localized string similar to Medium Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.MediumOrchidColorName">
            <summary>
              Looks up a localized string similar to Medium Orchid.
            </summary>
        </member>
        <member name="P:GuiStrings.MediumPurpleColorName">
            <summary>
              Looks up a localized string similar to Medium Purple.
            </summary>
        </member>
        <member name="P:GuiStrings.MediumSeaGreenColorName">
            <summary>
              Looks up a localized string similar to Medium Sea Green.
            </summary>
        </member>
        <member name="P:GuiStrings.MediumSlateBlueColorName">
            <summary>
              Looks up a localized string similar to Medium Slate Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.MediumSpringGreenColorName">
            <summary>
              Looks up a localized string similar to Medium Spring Green.
            </summary>
        </member>
        <member name="P:GuiStrings.MediumTurquoiseColorName">
            <summary>
              Looks up a localized string similar to Medium Turquoise.
            </summary>
        </member>
        <member name="P:GuiStrings.MediumVioletRedColorName">
            <summary>
              Looks up a localized string similar to Medium Violet Red.
            </summary>
        </member>
        <member name="P:GuiStrings.MenuAlreadyAdded">
            <summary>
              Looks up a localized string similar to The menu &apos;{0}&apos; has already been added to a parent menu..
            </summary>
        </member>
        <member name="P:GuiStrings.MidnightBlueColorName">
            <summary>
              Looks up a localized string similar to Midnight Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.MintCreamColorName">
            <summary>
              Looks up a localized string similar to Mint Cream.
            </summary>
        </member>
        <member name="P:GuiStrings.MinusKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Minus.
            </summary>
        </member>
        <member name="P:GuiStrings.MistyRoseColorName">
            <summary>
              Looks up a localized string similar to Misty Rose.
            </summary>
        </member>
        <member name="P:GuiStrings.MoccasinColorName">
            <summary>
              Looks up a localized string similar to Moccasin.
            </summary>
        </member>
        <member name="P:GuiStrings.ModuleBrowserAddOn">
            <summary>
              Looks up a localized string similar to Get Module Browser Add-on Tool.
            </summary>
        </member>
        <member name="P:GuiStrings.MoveHorizontalAddOnToolToVertical">
            <summary>
              Looks up a localized string similar to Mov_e Selected Horizontal Add-on Tool to Vertical.
            </summary>
        </member>
        <member name="P:GuiStrings.MoveScriptPaneRight">
            <summary>
              Looks up a localized string similar to Move Script Pane Right..
            </summary>
        </member>
        <member name="P:GuiStrings.MoveScriptPaneUp">
            <summary>
              Looks up a localized string similar to Move Script Pane Up..
            </summary>
        </member>
        <member name="P:GuiStrings.MoveVerticalAddOnToolToHorizontal">
            <summary>
              Looks up a localized string similar to _Move Selected Vertical Add-on Tool to Horizontal.
            </summary>
        </member>
        <member name="P:GuiStrings.NameAlreadyInUseError">
            <summary>
              Looks up a localized string similar to This name is already in use..
            </summary>
        </member>
        <member name="P:GuiStrings.NavajoWhiteColorName">
            <summary>
              Looks up a localized string similar to Navajo White.
            </summary>
        </member>
        <member name="P:GuiStrings.NavyColorName">
            <summary>
              Looks up a localized string similar to Navy.
            </summary>
        </member>
        <member name="P:GuiStrings.NestedPrompt">
            <summary>
              Looks up a localized string similar to Nested Prompt.
            </summary>
        </member>
        <member name="P:GuiStrings.NewRemotePowerShellTab">
            <summary>
              Looks up a localized string similar to New Remote _PowerShell Tab....
            </summary>
        </member>
        <member name="P:GuiStrings.NewRemotePowerShellTabCaption">
            <summary>
              Looks up a localized string similar to New Remote PowerShell Tab.
            </summary>
        </member>
        <member name="P:GuiStrings.NewRemotePowerShellTabShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+R.
            </summary>
        </member>
        <member name="P:GuiStrings.NewRunspace">
            <summary>
              Looks up a localized string similar to N_ew PowerShell Tab.
            </summary>
        </member>
        <member name="P:GuiStrings.NewRunspaceShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+T.
            </summary>
        </member>
        <member name="P:GuiStrings.NewScript">
            <summary>
              Looks up a localized string similar to _New.
            </summary>
        </member>
        <member name="P:GuiStrings.NewScriptShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+N.
            </summary>
        </member>
        <member name="P:GuiStrings.NewScriptTooltip">
            <summary>
              Looks up a localized string similar to New Script.
            </summary>
        </member>
        <member name="P:GuiStrings.NoCorrespondingStartElementXmlError">
            <summary>
              Looks up a localized string similar to No corresponding start element.
            </summary>
        </member>
        <member name="P:GuiStrings.NoEndTagFoundXmlError">
            <summary>
              Looks up a localized string similar to End tag not found.
            </summary>
        </member>
        <member name="P:GuiStrings.NoHelpAvailableForParameter">
            <summary>
              Looks up a localized string similar to No help is available for {0}..
            </summary>
        </member>
        <member name="P:GuiStrings.NotStarted">
            <summary>
              Looks up a localized string similar to Not started.
            </summary>
        </member>
        <member name="P:GuiStrings.Oem6KeyboardDisplayName">
            <summary>
              Looks up a localized string similar to ].
            </summary>
        </member>
        <member name="P:GuiStrings.OK">
            <summary>
              Looks up a localized string similar to _OK.
            </summary>
        </member>
        <member name="P:GuiStrings.OKName">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:GuiStrings.OldLaceColorName">
            <summary>
              Looks up a localized string similar to Old Lace.
            </summary>
        </member>
        <member name="P:GuiStrings.OliveColorName">
            <summary>
              Looks up a localized string similar to Olive.
            </summary>
        </member>
        <member name="P:GuiStrings.OliveDrabColorName">
            <summary>
              Looks up a localized string similar to Olive Drab.
            </summary>
        </member>
        <member name="P:GuiStrings.OpenOptionsDialog">
            <summary>
              Looks up a localized string similar to _Options....
            </summary>
        </member>
        <member name="P:GuiStrings.OpenScript">
            <summary>
              Looks up a localized string similar to _Open....
            </summary>
        </member>
        <member name="P:GuiStrings.OpenScriptShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+O.
            </summary>
        </member>
        <member name="P:GuiStrings.OpenScriptTooltip">
            <summary>
              Looks up a localized string similar to Open Script.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsColorPickerBlueLabelContent">
            <summary>
              Looks up a localized string similar to Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsColorPickerGreenLabelContent">
            <summary>
              Looks up a localized string similar to Green.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsColorPickerHexadecimalRadioButtonContent">
            <summary>
              Looks up a localized string similar to Hexadecimal.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsColorPickerRedLabelContent">
            <summary>
              Looks up a localized string similar to Red.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsCustomColorName">
            <summary>
              Looks up a localized string similar to (Custom Color).
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsCustomThemeName">
            <summary>
              Looks up a localized string similar to (Customized Theme).
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsDeleteConfirmationMessage">
            <summary>
              Looks up a localized string similar to Are you sure you want to permanently delete &apos;{0}&apos;?.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsErrorsInGeneralSettingsMessage">
             <summary>
               Looks up a localized string similar to The following errors occurred while validating the settings.  Please correct them and try again:
            
            {0}.
             </summary>
        </member>
        <member name="P:GuiStrings.OptionsErrorsInThemeImport">
             <summary>
               Looks up a localized string similar to The following errors occurred while importing the theme:
            
            {0}.
             </summary>
        </member>
        <member name="P:GuiStrings.OptionsExportThemeTitle">
            <summary>
              Looks up a localized string similar to Export Theme.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsFileNotFoundMessage">
            <summary>
              Looks up a localized string similar to The file you specified does not exist..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsImportThemeTitle">
            <summary>
              Looks up a localized string similar to Import Theme.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsInvalidFontInThemeFile">
            <summary>
              Looks up a localized string similar to The font &quot;{0}&quot; specified in the theme file is not installed on your computer. The current font will be preserved..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsInvalidFontSizeInThemeFile">
            <summary>
              Looks up a localized string similar to The font size &quot;{0}&quot; specified in the theme file is not in the valid range of {1} to {2}. The current font size will be preserved..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsISEThemesName">
            <summary>
              Looks up a localized string similar to ISE Color Themes ({0}).
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsLoadFailedMessage">
             <summary>
               Looks up a localized string similar to The theme file exists but could not be imported.
            
            {0}.
             </summary>
        </member>
        <member name="P:GuiStrings.OptionsManageThemesCancelButtonContent">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsManageThemesDeleteButtonContent">
            <summary>
              Looks up a localized string similar to Delete....
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsManageThemesExportButtonContent">
            <summary>
              Looks up a localized string similar to Export....
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsManageThemesImportButtonContent">
            <summary>
              Looks up a localized string similar to Import....
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsManageThemesRenameButtonContent">
            <summary>
              Looks up a localized string similar to Rename....
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsManageThemesRenameToBlankMessage">
            <summary>
              Looks up a localized string similar to The theme name cannot be empty or consist only of white space characters..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsManageThemesWindowTitle">
            <summary>
              Looks up a localized string similar to Manage Themes.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsMostRecentlyUsedOutOfRangeMessage">
            <summary>
              Looks up a localized string similar to &quot;Number of recent files to show&quot; must be between {0} and {1}..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsOverwritePresetThemeTemplate">
            <summary>
              Looks up a localized string similar to {0} (1).
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsReallyResetMessage">
            <summary>
              Looks up a localized string similar to Reset all settings to their default values?.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsReallyResetTitle">
            <summary>
              Looks up a localized string similar to Restore Defaults Confirmation.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsRenameFailedMessage">
            <summary>
              Looks up a localized string similar to The theme cannot be renamed because another theme already exists with that name..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsRenamePrompt">
            <summary>
              Looks up a localized string similar to Enter the new name for the theme:.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsRenameTitle">
            <summary>
              Looks up a localized string similar to Rename Theme.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSampleCharacterData">
            <summary>
              Looks up a localized string similar to This is Character Data..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSampleLength">
            <summary>
              Looks up a localized string similar to &apos;Length:&apos;.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSampleOutputText">
            <summary>
              Looks up a localized string similar to This is some normal output text..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSamplePowerShellComment">
            <summary>
              Looks up a localized string similar to This is a PowerShell comment..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSampleQuotedString">
            <summary>
              Looks up a localized string similar to This is a quoted string, surrounded by quotation marks..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSampleThisIsAnError">
            <summary>
              Looks up a localized string similar to Write-Error &quot;This is an Error.&quot; : This is an Error..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSampleThisIsAWarning">
            <summary>
              Looks up a localized string similar to WARNING: This is a Warning..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSampleThisIsDebugOutput">
            <summary>
              Looks up a localized string similar to DEBUG: This is Debug output..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSampleThisIsVerboseOutput">
            <summary>
              Looks up a localized string similar to VERBOSE: This is Verbose output..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSampleXmlComment">
            <summary>
              Looks up a localized string similar to  This is a Comment, surrounded by Comment Delimiters..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSampleXmlText">
            <summary>
              Looks up a localized string similar to This is Text..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsSaveFailedMessage">
            <summary>
              Looks up a localized string similar to The theme file couldn&apos;t be saved.\r\n{0}.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsTextInScriptPaneExample">
            <summary>
              Looks up a localized string similar to This is an example of a text file in the script pane..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsThemeFileKeyValueMismatch">
            <summary>
              Looks up a localized string similar to The numbers of keys and specified values in the theme file do not match..
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsThemeNameDarkDark">
            <summary>
              Looks up a localized string similar to Dark Console, Dark Editor.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsThemeNameDarkLight">
            <summary>
              Looks up a localized string similar to Dark Console, Light Editor (default).
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsThemeNameLightDark">
            <summary>
              Looks up a localized string similar to Light Console, Dark Editor.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsThemeNameLightLight">
            <summary>
              Looks up a localized string similar to Light Console, Light Editor.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsThemeNameMonochromeGreen">
            <summary>
              Looks up a localized string similar to Monochrome Green.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsThemeNamePresentation">
            <summary>
              Looks up a localized string similar to Presentation.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowApplyButtonAutomationName">
            <summary>
              Looks up a localized string similar to Apply.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowApplyButtonContent">
            <summary>
              Looks up a localized string similar to _Apply.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowAttributeTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Attribute.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowAttributeTreeViewItemHeader2">
            <summary>
              Looks up a localized string similar to Attribute.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowAutoSaveIntervalInMinutesLabelContent">
            <summary>
              Looks up a localized string similar to AutoSave inter_val for scripts in minutes:.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowAutoSaveTextBoxAutomationName">
            <summary>
              Looks up a localized string similar to AutoSave.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowBackgroundTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Background.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowBackgroundTreeViewItemHeader2">
            <summary>
              Looks up a localized string similar to Background.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowBackgroundTreeViewItemHeader4">
            <summary>
              Looks up a localized string similar to Error Background.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowBackgroundTreeViewItemHeader5">
            <summary>
              Looks up a localized string similar to Warning Background.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowBackgroundTreeViewItemHeader6">
            <summary>
              Looks up a localized string similar to Verbose Background.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowBackgroundTreeViewItemHeader7">
            <summary>
              Looks up a localized string similar to Debug Background.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowCancelButtonAutomationName">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowCancelButtonContent">
            <summary>
              Looks up a localized string similar to _Cancel.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowCharacterDataTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to CharacterData.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowColorsAndFontsTabItemHeader">
            <summary>
              Looks up a localized string similar to Colors and Fonts.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowCommandArgumentTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Command Argument.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowCommandParameterTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Command Parameter.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowCommandTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Command.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowCommentDelimiterTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Comment Delimiter.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowCommentTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Comment.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowCommentTreeViewItemHeader2">
            <summary>
              Looks up a localized string similar to Comment.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowConsolePaneTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Console Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowConsoleTokensTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Console Tokens.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowCurrentThemeLabelContent">
            <summary>
              Looks up a localized string similar to Current Theme:.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowElementNameTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Element Name.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowEnterSelectsIntellisenseCheckBox2AutomationName">
            <summary>
              Looks up a localized string similar to Enter Selects Intellisense.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowEnterSelectsIntellisenseCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Enter Selects Intellisense.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowEnterSelectsIntellisenseCheckBoxContent">
            <summary>
              Looks up a localized string similar to _Enter selects Intellisense items in the Console Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowEnterSelectsIntellisenseCheckBoxContent2">
            <summary>
              Looks up a localized string similar to Enter selects Intellisense ite_ms in the Script Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowFixedWidthFontsOnlyCheckBoxContent">
            <summary>
              Looks up a localized string similar to Fixed-_width fonts only.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowFontFamilyComboBoxAutomationName">
            <summary>
              Looks up a localized string similar to Font Family.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowFontFamilyLabelContent">
            <summary>
              Looks up a localized string similar to _Font Family:.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowFontSizeComboBoxAutomationName">
            <summary>
              Looks up a localized string similar to Font Size.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowFontSizeLabelContent">
            <summary>
              Looks up a localized string similar to Font _Size:.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowForegroundTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Foreground.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowForegroundTreeViewItemHeader3">
            <summary>
              Looks up a localized string similar to Error Foreground.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowForegroundTreeViewItemHeader4">
            <summary>
              Looks up a localized string similar to Warning Foreground.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowForegroundTreeViewItemHeader5">
            <summary>
              Looks up a localized string similar to Verbose Foreground.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowForegroundTreeViewItemHeader6">
            <summary>
              Looks up a localized string similar to Debug Foreground.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowGeneralTabItemHeader">
            <summary>
              Looks up a localized string similar to General Settings.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowGroupEndTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Group End.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowGroupStartTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Group Start.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowHeader">
            <summary>
              Looks up a localized string similar to Options.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowIntellisenseGroupBoxHeader">
            <summary>
              Looks up a localized string similar to Intellisense.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowKeywordTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Keyword.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowLineContinuationTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Line Continuation (Back-tick).
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowLoopLabelTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Loop Label.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowManageThemesButtonContent">
            <summary>
              Looks up a localized string similar to _Manage Themes....
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowMarkupExtensionTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Markup Extension.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowMaximizedComboBoxItemContent">
            <summary>
              Looks up a localized string similar to Maximized.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowMemberTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Member.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowNumberTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Number.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowOkButtonAutomationName">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowOkButtonContent">
            <summary>
              Looks up a localized string similar to _OK.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowOperatorTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Operator.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowOtherSettingsGroupBoxHeader">
            <summary>
              Looks up a localized string similar to Other Settings.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowOutputStreamsTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Output Streams.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowPositionComboBoxAutomationName">
            <summary>
              Looks up a localized string similar to Position.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowPositionLabelContent">
            <summary>
              Looks up a localized string similar to Script Pane posi_tion:.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowPromptToSaveBeforeRunCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Prompt to Save Before Run.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowPromptToSaveBeforeRunCheckBoxContent">
            <summary>
              Looks up a localized string similar to _Prompt to save scripts before running them.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowQuotedStringTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Quoted String.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowQuoteTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Quote.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowRecentFilesTextBoxAutomationName">
            <summary>
              Looks up a localized string similar to Recent Files.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowRecentFilesToShowLabelContent">
            <summary>
              Looks up a localized string similar to Number of recent _files to show:.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowRestoreButtonAutomationName">
            <summary>
              Looks up a localized string similar to Restore.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowRestoreDefaultsButtonContent">
            <summary>
              Looks up a localized string similar to _Restore Defaults.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowRightComboBoxItemContent">
            <summary>
              Looks up a localized string similar to Right.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowSampleGroupBoxHeader">
            <summary>
              Looks up a localized string similar to Sample:.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowSampleRichTextBoxAutomationName">
            <summary>
              Looks up a localized string similar to Sample.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowScriptPaneBehaviorGroupBoxHeader">
            <summary>
              Looks up a localized string similar to Script Pane Behavior.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowScriptPaneTokensTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Script Pane Tokens.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowScriptPaneTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Script Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowShowInTheConsolePaneCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Show in the Console Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowShowInTheConsolePaneCheckBoxContent">
            <summary>
              Looks up a localized string similar to Show _Intellisense in the Console Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowShowInTheScriptPaneCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Show in the script pane.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowShowInTheScriptPaneCheckBoxContent">
            <summary>
              Looks up a localized string similar to Show Intellisense i_n the Script Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowShowLineNumbersCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Show Line Numbers.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowShowLineNumbersCheckBoxContent">
            <summary>
              Looks up a localized string similar to S_how line numbers in the Script Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowShowOutliningCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Show Outlining.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowShowOutliningCheckBoxContent">
            <summary>
              Looks up a localized string similar to _Show outlining in the Script Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowShowToolBarCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Show ToolBar.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowShowToolBarCheckBoxContent">
            <summary>
              Looks up a localized string similar to Show the Tool_Bar.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowStatementSeparatorTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Statement Separator (Semicolon).
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowStringTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to String.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowTagTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Tag.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowTextBackgroundTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Text Background.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowTextTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Text.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowTimeoutInSecondsComboBoxAutomationName">
            <summary>
              Looks up a localized string similar to Time-out Period In Seconds.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowTimeoutInSecondsLabelContent">
            <summary>
              Looks up a localized string similar to Intellisense timeout in secon_ds:.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowTopComboBoxItemContent">
            <summary>
              Looks up a localized string similar to Top.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowTypeTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Type.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowUseDefaultSnippetsCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Use Default Snippets.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowUseDefaultSnippetsCheckBoxContent">
            <summary>
              Looks up a localized string similar to _Use default snippets.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowUseLocalHelpCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Use Local Help.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowUseLocalHelpCheckBoxContent">
            <summary>
              Looks up a localized string similar to Use _local help content instead of online content.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowVariableTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to Variable.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowWarnAboutDuplicateFilesCheckBoxAutomationName">
            <summary>
              Looks up a localized string similar to Warn About Duplicate Files.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowWarnAboutDuplicateFilesCheckBoxContent">
            <summary>
              Looks up a localized string similar to _Warn me when I edit duplicate files.
            </summary>
        </member>
        <member name="P:GuiStrings.OptionsWindowXmlTokensTreeViewItemHeader">
            <summary>
              Looks up a localized string similar to XML Tokens.
            </summary>
        </member>
        <member name="P:GuiStrings.OrangeColorName">
            <summary>
              Looks up a localized string similar to Orange.
            </summary>
        </member>
        <member name="P:GuiStrings.OrangeRedColorName">
            <summary>
              Looks up a localized string similar to Orange Red.
            </summary>
        </member>
        <member name="P:GuiStrings.OrchidColorName">
            <summary>
              Looks up a localized string similar to Orchid.
            </summary>
        </member>
        <member name="P:GuiStrings.PaleGoldenrodColorName">
            <summary>
              Looks up a localized string similar to Pale Goldenrod.
            </summary>
        </member>
        <member name="P:GuiStrings.PaleGreenColorName">
            <summary>
              Looks up a localized string similar to Pale Green.
            </summary>
        </member>
        <member name="P:GuiStrings.PaleTurquoiseColorName">
            <summary>
              Looks up a localized string similar to Pale Turquoise.
            </summary>
        </member>
        <member name="P:GuiStrings.PaleVioletRedColorName">
            <summary>
              Looks up a localized string similar to Pale Violet Red.
            </summary>
        </member>
        <member name="P:GuiStrings.PapayaWhipColorName">
            <summary>
              Looks up a localized string similar to Papaya Whip.
            </summary>
        </member>
        <member name="P:GuiStrings.ParameterPrompt">
            <summary>
              Looks up a localized string similar to {0}: .
            </summary>
        </member>
        <member name="P:GuiStrings.ParseErrorsDetected">
            <summary>
              Looks up a localized string similar to Parse errors detected.
            </summary>
        </member>
        <member name="P:GuiStrings.PasswordInput">
            <summary>
              Looks up a localized string similar to password input.
            </summary>
        </member>
        <member name="P:GuiStrings.Paste">
            <summary>
              Looks up a localized string similar to _Paste.
            </summary>
        </member>
        <member name="P:GuiStrings.Paste1Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+V.
            </summary>
        </member>
        <member name="P:GuiStrings.Paste2Shortcut">
            <summary>
              Looks up a localized string similar to Shift+Ins.
            </summary>
        </member>
        <member name="P:GuiStrings.PasteTooltip">
            <summary>
              Looks up a localized string similar to Paste.
            </summary>
        </member>
        <member name="P:GuiStrings.PeachPuffColorName">
            <summary>
              Looks up a localized string similar to Peach Puff.
            </summary>
        </member>
        <member name="P:GuiStrings.PeruColorName">
            <summary>
              Looks up a localized string similar to Peru.
            </summary>
        </member>
        <member name="P:GuiStrings.PgDnKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to PgDn.
            </summary>
        </member>
        <member name="P:GuiStrings.PgUpKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to PgUp.
            </summary>
        </member>
        <member name="P:GuiStrings.PinkColorName">
            <summary>
              Looks up a localized string similar to Pink.
            </summary>
        </member>
        <member name="P:GuiStrings.PlumColorName">
            <summary>
              Looks up a localized string similar to Plum.
            </summary>
        </member>
        <member name="P:GuiStrings.PlusKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Plus.
            </summary>
        </member>
        <member name="P:GuiStrings.PowderBlueColorName">
            <summary>
              Looks up a localized string similar to Powder Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.PowerShellDataFiles">
            <summary>
              Looks up a localized string similar to PowerShell Data Files.
            </summary>
        </member>
        <member name="P:GuiStrings.PowerShellFiles">
            <summary>
              Looks up a localized string similar to PowerShell Files.
            </summary>
        </member>
        <member name="P:GuiStrings.PowerShellModules">
            <summary>
              Looks up a localized string similar to PowerShell Script Modules.
            </summary>
        </member>
        <member name="P:GuiStrings.PowerShellRoleCapabilityFiles">
            <summary>
              Looks up a localized string similar to PowerShell Role Capability Files.
            </summary>
        </member>
        <member name="P:GuiStrings.PowerShellScripts">
            <summary>
              Looks up a localized string similar to PowerShell Scripts.
            </summary>
        </member>
        <member name="P:GuiStrings.PowerShellSessionConfigurationFiles">
            <summary>
              Looks up a localized string similar to PowerShell Session Configuration Files.
            </summary>
        </member>
        <member name="P:GuiStrings.PowerShellXmlFiles">
            <summary>
              Looks up a localized string similar to PowerShell XML files.
            </summary>
        </member>
        <member name="P:GuiStrings.PressToLeaveEditableAreaFormat">
            <summary>
              Looks up a localized string similar to Press {0} to leave the editable area..
            </summary>
        </member>
        <member name="P:GuiStrings.ProgressIndicator">
            <summary>
              Looks up a localized string similar to Progress Indicator.
            </summary>
        </member>
        <member name="P:GuiStrings.ProgressRecordFullDescription">
            <summary>
              Looks up a localized string similar to {0}.
               {1}, {2} remaining, {3}..
            </summary>
        </member>
        <member name="P:GuiStrings.ProgressRecordNoOperation">
            <summary>
              Looks up a localized string similar to {0}.
               {1}, {2} remaining..
            </summary>
        </member>
        <member name="P:GuiStrings.ProgressRecordNoTime">
            <summary>
              Looks up a localized string similar to {0}.
               {1}, {2}..
            </summary>
        </member>
        <member name="P:GuiStrings.ProgressRecordNoTimeAndNoOperation">
            <summary>
              Looks up a localized string similar to {0}.
               {1}..
            </summary>
        </member>
        <member name="P:GuiStrings.Prompt">
            <summary>
              Looks up a localized string similar to Prompt.
            </summary>
        </member>
        <member name="P:GuiStrings.PromptHelpFormat">
            <summary>
              Looks up a localized string similar to (Type {0} for Help.).
            </summary>
        </member>
        <member name="P:GuiStrings.PromptTooltip">
            <summary>
              Looks up a localized string similar to Prompt.
            </summary>
        </member>
        <member name="P:GuiStrings.PromptToolTipFormat">
            <summary>
              Looks up a localized string similar to You can choose an empty string with {0}, {1} with {2} and exclamation point with {3}..
            </summary>
        </member>
        <member name="P:GuiStrings.PromptTypeLoadErrorTemplate">
            <summary>
              Looks up a localized string similar to Cannot display the prompt for &quot;{0}&quot; because type &quot;{1}&quot; cannot be loaded..
            </summary>
        </member>
        <member name="P:GuiStrings.ProvideText">
            <summary>
              Looks up a localized string similar to Provide Text.
            </summary>
        </member>
        <member name="P:GuiStrings.PurpleColorName">
            <summary>
              Looks up a localized string similar to Purple.
            </summary>
        </member>
        <member name="P:GuiStrings.ReadOnlyFlag">
            <summary>
              Looks up a localized string similar to [Read Only].
            </summary>
        </member>
        <member name="P:GuiStrings.Recovered">
            <summary>
              Looks up a localized string similar to (Recovered).
            </summary>
        </member>
        <member name="P:GuiStrings.RedColorName">
            <summary>
              Looks up a localized string similar to Red.
            </summary>
        </member>
        <member name="P:GuiStrings.Redo">
            <summary>
              Looks up a localized string similar to _Redo.
            </summary>
        </member>
        <member name="P:GuiStrings.RedoTooltip">
            <summary>
              Looks up a localized string similar to Redo.
            </summary>
        </member>
        <member name="P:GuiStrings.RegularExpressions">
            <summary>
              Looks up a localized string similar to Regular e_xpressions.
            </summary>
        </member>
        <member name="P:GuiStrings.RemoteFileFlag">
            <summary>
              Looks up a localized string similar to [Remote File].
            </summary>
        </member>
        <member name="P:GuiStrings.RemoteNestedPromptNotSupported">
            <summary>
              Looks up a localized string similar to Enter nested prompt is not supported for remote sessions..
            </summary>
        </member>
        <member name="P:GuiStrings.RemoteSaveFileFailed">
            <summary>
              Looks up a localized string similar to Saving file: {0} in the remote session has failed with error: {1}..
            </summary>
        </member>
        <member name="P:GuiStrings.RemoveAllBreakpointsMenuItem">
            <summary>
              Looks up a localized string similar to _Remove All Breakpoints.
            </summary>
        </member>
        <member name="P:GuiStrings.RemoveAllBreakpointsShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+F9.
            </summary>
        </member>
        <member name="P:GuiStrings.Replace">
            <summary>
              Looks up a localized string similar to R_eplace in Script....
            </summary>
        </member>
        <member name="P:GuiStrings.ReplaceAll">
            <summary>
              Looks up a localized string similar to Replace _All.
            </summary>
        </member>
        <member name="P:GuiStrings.ReplaceAllUndoAction">
            <summary>
              Looks up a localized string similar to Replace All.
            </summary>
        </member>
        <member name="P:GuiStrings.ReplaceButtonText">
            <summary>
              Looks up a localized string similar to _Replace.
            </summary>
        </member>
        <member name="P:GuiStrings.ReplaceCaption">
            <summary>
              Looks up a localized string similar to Replace.
            </summary>
        </member>
        <member name="P:GuiStrings.ReplaceShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+H.
            </summary>
        </member>
        <member name="P:GuiStrings.ReplaceWith">
            <summary>
              Looks up a localized string similar to Re_place with:.
            </summary>
        </member>
        <member name="P:GuiStrings.ReplaceWithText">
            <summary>
              Looks up a localized string similar to Replace with text.
            </summary>
        </member>
        <member name="P:GuiStrings.ResumeDebuggerMenuItem">
            <summary>
              Looks up a localized string similar to Run/_Continue.
            </summary>
        </member>
        <member name="P:GuiStrings.RightKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Right.
            </summary>
        </member>
        <member name="P:GuiStrings.RosyBrownColorName">
            <summary>
              Looks up a localized string similar to Rosy Brown.
            </summary>
        </member>
        <member name="P:GuiStrings.RoyalBlueColorName">
            <summary>
              Looks up a localized string similar to Royal Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.RunCommandTooltip">
            <summary>
              Looks up a localized string similar to Run Command.
            </summary>
        </member>
        <member name="P:GuiStrings.Running">
            <summary>
              Looks up a localized string similar to Running script / selection.  Press {0} to stop.  Press {1} to break into debugger..
            </summary>
        </member>
        <member name="P:GuiStrings.RunScript">
            <summary>
              Looks up a localized string similar to _Run.
            </summary>
        </member>
        <member name="P:GuiStrings.RunScriptShortcut">
            <summary>
              Looks up a localized string similar to F5.
            </summary>
        </member>
        <member name="P:GuiStrings.RunScriptTooltip">
            <summary>
              Looks up a localized string similar to Run Script ({0}).
            </summary>
        </member>
        <member name="P:GuiStrings.RunSelection">
            <summary>
              Looks up a localized string similar to R_un Selection.
            </summary>
        </member>
        <member name="P:GuiStrings.RunSelectionShortcut">
            <summary>
              Looks up a localized string similar to F8.
            </summary>
        </member>
        <member name="P:GuiStrings.RunSelectionTooltip">
            <summary>
              Looks up a localized string similar to Run Selection ({0}).
            </summary>
        </member>
        <member name="P:GuiStrings.Runspace">
            <summary>
              Looks up a localized string similar to PowerShell Tab.
            </summary>
        </member>
        <member name="P:GuiStrings.RunspaceName">
            <summary>
              Looks up a localized string similar to PowerShell {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.Runspaces">
            <summary>
              Looks up a localized string similar to PowerShell Tabs.
            </summary>
        </member>
        <member name="P:GuiStrings.SaddleBrownColorName">
            <summary>
              Looks up a localized string similar to Saddle Brown.
            </summary>
        </member>
        <member name="P:GuiStrings.SalmonColorName">
            <summary>
              Looks up a localized string similar to Salmon.
            </summary>
        </member>
        <member name="P:GuiStrings.SandyBrownColorName">
            <summary>
              Looks up a localized string similar to Sandy Brown.
            </summary>
        </member>
        <member name="P:GuiStrings.SaveOnRun">
            <summary>
              Looks up a localized string similar to The script you are about to run will be saved..
            </summary>
        </member>
        <member name="P:GuiStrings.SaveScript">
            <summary>
              Looks up a localized string similar to _Save.
            </summary>
        </member>
        <member name="P:GuiStrings.SaveScriptAs">
            <summary>
              Looks up a localized string similar to Save _As....
            </summary>
        </member>
        <member name="P:GuiStrings.SaveScriptQuestion">
            <summary>
              Looks up a localized string similar to Save {0}?.
            </summary>
        </member>
        <member name="P:GuiStrings.SaveScriptShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+S.
            </summary>
        </member>
        <member name="P:GuiStrings.SaveScriptTooltip">
            <summary>
              Looks up a localized string similar to Save Script.
            </summary>
        </member>
        <member name="P:GuiStrings.SavingSettingsFailedFormat">
            <summary>
              Looks up a localized string similar to The application cannot save the user settings file: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:GuiStrings.Script">
            <summary>
              Looks up a localized string similar to Script.
            </summary>
        </member>
        <member name="P:GuiStrings.ScriptAnalyserAddOn">
            <summary>
              Looks up a localized string similar to Get Script Analyzer Add-on Tool.
            </summary>
        </member>
        <member name="P:GuiStrings.ScriptBrowserAddOn">
            <summary>
              Looks up a localized string similar to Get Script Browser Add-on Tool.
            </summary>
        </member>
        <member name="P:GuiStrings.ScriptExpander">
            <summary>
              Looks up a localized string similar to Script expander.
            </summary>
        </member>
        <member name="P:GuiStrings.ScriptMenuFormat">
            <summary>
              Looks up a localized string similar to     {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.ScriptPane">
            <summary>
              Looks up a localized string similar to Script pane.
            </summary>
        </member>
        <member name="P:GuiStrings.ScriptSplitter">
            <summary>
              Looks up a localized string similar to Script Splitter.
            </summary>
        </member>
        <member name="P:GuiStrings.ScriptTools">
            <summary>
              Looks up a localized string similar to Script Tools.
            </summary>
        </member>
        <member name="P:GuiStrings.SeaGreenColorName">
            <summary>
              Looks up a localized string similar to Sea Green.
            </summary>
        </member>
        <member name="P:GuiStrings.SearchUp">
            <summary>
              Looks up a localized string similar to Search _up.
            </summary>
        </member>
        <member name="P:GuiStrings.SeaShellColorName">
            <summary>
              Looks up a localized string similar to Sea Shell.
            </summary>
        </member>
        <member name="P:GuiStrings.SelectAll">
            <summary>
              Looks up a localized string similar to Select _All.
            </summary>
        </member>
        <member name="P:GuiStrings.SelectionCanOnlyBeSetToAMemberOfCollection">
            <summary>
              Looks up a localized string similar to Selection can only be set to a member of the collection..
            </summary>
        </member>
        <member name="P:GuiStrings.ShiftKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Shift.
            </summary>
        </member>
        <member name="P:GuiStrings.ShortcutAlreadyInUse">
            <summary>
              Looks up a localized string similar to The menu &apos;{0}&apos; uses shortcut &apos;{1}&apos;, which is already in use by the menu or editor functionality..
            </summary>
        </member>
        <member name="P:GuiStrings.ShortcutWithNoModifier">
            <summary>
              Looks up a localized string similar to The shortcut &apos;{0}&apos; does not have the required keyboard modifier for non function keys..
            </summary>
        </member>
        <member name="P:GuiStrings.ShowCommand">
            <summary>
              Looks up a localized string similar to Show _Command Window.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowCommandCopy">
            <summary>
              Looks up a localized string similar to Copy.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowCommandInsert">
            <summary>
              Looks up a localized string similar to Insert.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowCommandRun">
            <summary>
              Looks up a localized string similar to Run.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowCommands">
            <summary>
              Looks up a localized string similar to Show Command A_dd-on.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowCommandShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+F1.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowCommandShowOnStartup">
            <summary>
              Looks up a localized string similar to Show on Startup.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowHorizontalAddOnToolsPane">
            <summary>
              Looks up a localized string similar to Show _Horizontal Add-on Tools Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowLineNumbers">
            <summary>
              Looks up a localized string similar to Show _Line Numbers.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowOutlining">
            <summary>
              Looks up a localized string similar to Show Outli_ning (Regions).
            </summary>
        </member>
        <member name="P:GuiStrings.ShowRunspace">
            <summary>
              Looks up a localized string similar to Show PowerShell Tab.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowScript">
            <summary>
              Looks up a localized string similar to Show Script.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowScriptPaneMaximized">
            <summary>
              Looks up a localized string similar to Show Script Pane _Maximized.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowScriptPaneMaximizedShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+3.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowScriptPaneRight">
            <summary>
              Looks up a localized string similar to Show Script Pane _Right.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowScriptPaneRightShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+2.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowScriptPaneTop">
            <summary>
              Looks up a localized string similar to Show Script Pane _Top.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowScriptPaneTopShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+1.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowSnippetShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+J.
            </summary>
        </member>
        <member name="P:GuiStrings.ShowVerticalAddOnToolsPane">
            <summary>
              Looks up a localized string similar to Show _Vertical Add-on Tools Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.SiennaColorName">
            <summary>
              Looks up a localized string similar to Sienna.
            </summary>
        </member>
        <member name="P:GuiStrings.SilverColorName">
            <summary>
              Looks up a localized string similar to Silver.
            </summary>
        </member>
        <member name="P:GuiStrings.SimpleCloseTagExpectedXmlErrorFormat">
            <summary>
              Looks up a localized string similar to {0} expected.
            </summary>
        </member>
        <member name="P:GuiStrings.SkyBlueColorName">
            <summary>
              Looks up a localized string similar to Sky Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.SlateBlueColorName">
            <summary>
              Looks up a localized string similar to Slate Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.SlateGrayColorName">
            <summary>
              Looks up a localized string similar to Slate Gray.
            </summary>
        </member>
        <member name="P:GuiStrings.SnipetsPreferenceWorkflow">
            <summary>
              Looks up a localized string similar to Preference variables that control runtime behavior.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetAnotherExample">
            <summary>
              Looks up a localized string similar to Another example of how to use this cmdlet.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetAnotherExampleWorkflow">
            <summary>
              Looks up a localized string similar to Another example of how to use this workflow.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetBadXmlFormat">
            <summary>
              Looks up a localized string similar to Snippet file &quot;{0}&quot; XML is not valid.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetCheckpointCommentWorkflow">
            <summary>
              Looks up a localized string similar to Saves (persists) the current workflow state and output.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetCleaningUp">
            <summary>
              Looks up a localized string similar to cleaning up ....
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetComponent">
            <summary>
              Looks up a localized string similar to The component this cmdlet belongs to.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetConstructorComment">
            <summary>
              Looks up a localized string similar to Constructor.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDefiningClassComment">
            <summary>
              Looks up a localized string similar to Define a class.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDivideByZeroException">
            <summary>
              Looks up a localized string similar to Divide by zero exception.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCConfigurationComment1">
            <summary>
              Looks up a localized string similar to One can evaluate expressions to get the node list.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCConfigurationComment2">
            <summary>
              Looks up a localized string similar to E.g: $AllNodes.Where(&quot;Role -eq Web&quot;).NodeName.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCConfigurationComment3">
            <summary>
              Looks up a localized string similar to Call Resource Provider.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCConfigurationComment4">
            <summary>
              Looks up a localized string similar to E.g: WindowsFeature, File.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCConfigurationComment5">
            <summary>
              Looks up a localized string similar to ConfigurationName -configurationData &lt;path to ConfigurationData (.psd1) file&gt;.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCConfigurationDataComment1">
            <summary>
              Looks up a localized string similar to Save ConfigurationData in a file with .psd1 file extension.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCReourceProviderComment1">
            <summary>
              Looks up a localized string similar to TODO: Add parameters here.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCReourceProviderComment2">
            <summary>
              Looks up a localized string similar to Make sure to use the same parameters for.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCReourceProviderComment3">
            <summary>
              Looks up a localized string similar to Get-TargetResource, Set-TargetResource, and Test-TargetResource.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassAbsentComment">
            <summary>
              Looks up a localized string similar to The resource must be absent..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassComment">
            <summary>
              Looks up a localized string similar to [DscResource()] indicates the class is a DSC resource..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassCreateInstanceComment">
            <summary>
              Looks up a localized string similar to Return this instance or construct a new instance..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassEnumComment">
            <summary>
              Looks up a localized string similar to Defines the values for the resource&apos;s Ensure property..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassGetComment">
            <summary>
              Looks up a localized string similar to Gets the resource&apos;s current state..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassKeyComment">
            <summary>
              Looks up a localized string similar to A DSC resource must define at least one key property..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassMandatoryComment">
            <summary>
              Looks up a localized string similar to Mandatory indicates the property is required and DSC will guarantee it is set..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassNotConfigurableComment1">
            <summary>
              Looks up a localized string similar to NotConfigurable properties return additional information about the state of the resource..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassNotConfigurableComment2">
            <summary>
              Looks up a localized string similar to For example, a Get() method might return the date a resource was last modified..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassNotConfigurableComment3">
            <summary>
              Looks up a localized string similar to NOTE: These properties are only used by the Get() method and cannot be set in configuration..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassPresentComment">
            <summary>
              Looks up a localized string similar to The resource must be present..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassSetComment">
            <summary>
              Looks up a localized string similar to Sets the desired state of the resource..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassSetPropertyComment">
            <summary>
              Looks up a localized string similar to NotConfigurable properties are set in the Get method..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetDSCResourceWithClassTestComment">
            <summary>
              Looks up a localized string similar to Tests if the resource is in the desired state..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetExample">
            <summary>
              Looks up a localized string similar to Example of how to use this cmdlet.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetExampleWorkflow">
            <summary>
              Looks up a localized string similar to Example of how to use this workflow.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetFunctionality">
            <summary>
              Looks up a localized string similar to The functionality that best describes this cmdlet.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetHiddenPropertyComment">
            <summary>
              Looks up a localized string similar to Hidden property does not show as result of Get-Member.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetInput">
            <summary>
              Looks up a localized string similar to Inputs to this cmdlet (if any).
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetInputWorkflow">
            <summary>
              Looks up a localized string similar to Inputs to this workflow (if any).
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetInstanceMethodComment">
            <summary>
              Looks up a localized string similar to Instance method.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetLoadFileMissing">
            <summary>
              Looks up a localized string similar to Unable to find or access the file {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetLoadFolderMissing">
            <summary>
              Looks up a localized string similar to Unable to find or access the folder {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetLongDescription">
            <summary>
              Looks up a localized string similar to Long description.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetNotes">
            <summary>
              Looks up a localized string similar to General notes.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetOptionalWorkflow">
            <summary>
              Looks up a localized string similar to Optional workflow common parameters such as -PSComputerName and -PSCredential.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetOtherException">
            <summary>
              Looks up a localized string similar to Other exception.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetOutput">
            <summary>
              Looks up a localized string similar to Output from this cmdlet (if any).
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetOutputWorkflow">
            <summary>
              Looks up a localized string similar to Output from this workflow (if any).
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetParam1Help">
            <summary>
              Looks up a localized string similar to Param1 help description.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetParam2Help">
            <summary>
              Looks up a localized string similar to Param2 help description.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetParam3Help">
            <summary>
              Looks up a localized string similar to Param3 help description.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetPropertyComment">
            <summary>
              Looks up a localized string similar to Property with validate set.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetRole">
            <summary>
              Looks up a localized string similar to The role this cmdlet belongs to.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetsCommonParamterWorkflow">
            <summary>
              Looks up a localized string similar to Workflow common parameters are available as variables such as:.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetsFunctionalityWorkflow">
            <summary>
              Looks up a localized string similar to The functionality that best describes this workflow.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetShortDescription">
            <summary>
              Looks up a localized string similar to Short description.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetsMissingNodeUnderParentNode">
            <summary>
              Looks up a localized string similar to Missing {0} under {1}.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetsMissingOrInvalidNodeUnderParentNode">
            <summary>
              Looks up a localized string similar to {0} under {1} is missing or not valid.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetsModuleNotFound">
            <summary>
              Looks up a localized string similar to Module not found..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetsNoCloseCData">
            <summary>
              Looks up a localized string similar to {0} cannot contain the following sequence of characters: &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetsNoSnippetsInModule">
            <summary>
              Looks up a localized string similar to Module {0} doesn&apos;t contain a {1} folder.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetsParentActivityWorkflow">
            <summary>
              Looks up a localized string similar to Set the progress message ParentActivityId.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetsRuntimeWorkflow">
            <summary>
              Looks up a localized string similar to Workflow runtime information can be accessed by using the following variables:.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetStaticMethodComment">
            <summary>
              Looks up a localized string similar to Static method.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetStaticPropertyComment">
            <summary>
              Looks up a localized string similar to Static property.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetSuspendCommentWorkflow">
            <summary>
              Looks up a localized string similar to Suspends the workflow.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetToolTipDefault">
            <summary>
              Looks up a localized string similar to Built-in.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetToolTipDescription">
            <summary>
              Looks up a localized string similar to Description: {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetToolTipPath">
            <summary>
              Looks up a localized string similar to Path: {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.SnippetWrongExtensionFormat">
            <summary>
              Looks up a localized string similar to Snippets must have the {0} extension.
            </summary>
        </member>
        <member name="P:GuiStrings.SnowColorName">
            <summary>
              Looks up a localized string similar to Snow.
            </summary>
        </member>
        <member name="P:GuiStrings.SpaceKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Space.
            </summary>
        </member>
        <member name="P:GuiStrings.SpringGreenColorName">
            <summary>
              Looks up a localized string similar to Spring Green.
            </summary>
        </member>
        <member name="P:GuiStrings.StartIntellisenseMenuItem">
            <summary>
              Looks up a localized string similar to Start _Intellisense.
            </summary>
        </member>
        <member name="P:GuiStrings.StartPowerShell">
            <summary>
              Looks up a localized string similar to Start PowerS_hell.exe.
            </summary>
        </member>
        <member name="P:GuiStrings.StartPowerShellInASeparateWindow">
            <summary>
              Looks up a localized string similar to Start PowerShell.exe in a separate window..
            </summary>
        </member>
        <member name="P:GuiStrings.StartPowerShellShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+P.
            </summary>
        </member>
        <member name="P:GuiStrings.StartSnippets">
            <summary>
              Looks up a localized string similar to Start _Snippets.
            </summary>
        </member>
        <member name="P:GuiStrings.StartTagNotClosedXmlError">
            <summary>
              Looks up a localized string similar to Start tag not closed.
            </summary>
        </member>
        <member name="P:GuiStrings.SteelBlueColorName">
            <summary>
              Looks up a localized string similar to Steel Blue.
            </summary>
        </member>
        <member name="P:GuiStrings.StepIntoMenuItem">
            <summary>
              Looks up a localized string similar to _Step Into.
            </summary>
        </member>
        <member name="P:GuiStrings.StepIntoShortcut">
            <summary>
              Looks up a localized string similar to F11.
            </summary>
        </member>
        <member name="P:GuiStrings.StepOutMenuItem">
            <summary>
              Looks up a localized string similar to Step O_ut.
            </summary>
        </member>
        <member name="P:GuiStrings.StepOutShortcut">
            <summary>
              Looks up a localized string similar to Shift+F11.
            </summary>
        </member>
        <member name="P:GuiStrings.StepOverMenuItem">
            <summary>
              Looks up a localized string similar to Step O_ver.
            </summary>
        </member>
        <member name="P:GuiStrings.StepOverShortcut">
            <summary>
              Looks up a localized string similar to F10.
            </summary>
        </member>
        <member name="P:GuiStrings.Stop">
            <summary>
              Looks up a localized string similar to S_top Operation.
            </summary>
        </member>
        <member name="P:GuiStrings.StopAndCopyShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+C.
            </summary>
        </member>
        <member name="P:GuiStrings.StopDebuggerMenuItem">
            <summary>
              Looks up a localized string similar to S_top Debugger.
            </summary>
        </member>
        <member name="P:GuiStrings.StopDebuggerShortcut">
            <summary>
              Looks up a localized string similar to Shift+F5.
            </summary>
        </member>
        <member name="P:GuiStrings.StopExecutionShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Break.
            </summary>
        </member>
        <member name="P:GuiStrings.StopExecutionTooltip">
            <summary>
              Looks up a localized string similar to Stop Operation ({0}).
            </summary>
        </member>
        <member name="P:GuiStrings.Stopped">
            <summary>
              Looks up a localized string similar to Stopped.
            </summary>
        </member>
        <member name="P:GuiStrings.Stopping">
            <summary>
              Looks up a localized string similar to Stopping.
            </summary>
        </member>
        <member name="P:GuiStrings.StoppingIntellisense">
            <summary>
              Looks up a localized string similar to Stopping Intellisense.
            </summary>
        </member>
        <member name="P:GuiStrings.StringContinuation">
            <summary>
              Looks up a localized string similar to {0}....
            </summary>
        </member>
        <member name="P:GuiStrings.SubMenuIsParent">
            <summary>
              Looks up a localized string similar to The menu &apos;{0}&apos; is a parent menu of &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:GuiStrings.SubtractKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Subtract.
            </summary>
        </member>
        <member name="P:GuiStrings.TabKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Tab.
            </summary>
        </member>
        <member name="P:GuiStrings.TanColorName">
            <summary>
              Looks up a localized string similar to Tan.
            </summary>
        </member>
        <member name="P:GuiStrings.TealColorName">
            <summary>
              Looks up a localized string similar to Teal.
            </summary>
        </member>
        <member name="P:GuiStrings.TextFiles">
            <summary>
              Looks up a localized string similar to Text Files.
            </summary>
        </member>
        <member name="P:GuiStrings.TextInput">
            <summary>
              Looks up a localized string similar to text input.
            </summary>
        </member>
        <member name="P:GuiStrings.ThistleColorName">
            <summary>
              Looks up a localized string similar to Thistle.
            </summary>
        </member>
        <member name="P:GuiStrings.TimeOutExceptionMessage">
            <summary>
              Looks up a localized string similar to The operation has timed out..
            </summary>
        </member>
        <member name="P:GuiStrings.ToggleBreakpointMenuItem">
            <summary>
              Looks up a localized string similar to To_ggle Breakpoint.
            </summary>
        </member>
        <member name="P:GuiStrings.ToggleBreakpointShortcut">
            <summary>
              Looks up a localized string similar to F9.
            </summary>
        </member>
        <member name="P:GuiStrings.ToggleHorizontalAddOnPaneShortcut">
            <summary>
              Looks up a localized string similar to Alt+Shift+H.
            </summary>
        </member>
        <member name="P:GuiStrings.ToggleOutliningExpansion">
            <summary>
              Looks up a localized string similar to Toggle _Outlining (Regions) Expansion.
            </summary>
        </member>
        <member name="P:GuiStrings.ToggleOutliningExpansionShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+M.
            </summary>
        </member>
        <member name="P:GuiStrings.ToggleScriptingPane">
            <summary>
              Looks up a localized string similar to Show Scr_ipt Pane.
            </summary>
        </member>
        <member name="P:GuiStrings.ToggleScriptPaneShortcut">
            <summary>
              Looks up a localized string similar to Ctrl+R.
            </summary>
        </member>
        <member name="P:GuiStrings.ToggleToolBar">
            <summary>
              Looks up a localized string similar to Show Tool_Bar.
            </summary>
        </member>
        <member name="P:GuiStrings.ToggleVerticalAddOnPaneShortcut">
            <summary>
              Looks up a localized string similar to Alt+Shift+V.
            </summary>
        </member>
        <member name="P:GuiStrings.TomatoColorName">
            <summary>
              Looks up a localized string similar to Tomato.
            </summary>
        </member>
        <member name="P:GuiStrings.ToolBar">
            <summary>
              Looks up a localized string similar to ToolBar.
            </summary>
        </member>
        <member name="P:GuiStrings.Tools">
            <summary>
              Looks up a localized string similar to _Tools.
            </summary>
        </member>
        <member name="P:GuiStrings.TooManyNestedPromptsError">
            <summary>
              Looks up a localized string similar to Cannot enter nested prompt because too many nested prompts are already running..
            </summary>
        </member>
        <member name="P:GuiStrings.TransparentColorName">
            <summary>
              Looks up a localized string similar to Transparent.
            </summary>
        </member>
        <member name="P:GuiStrings.TurquoiseColorName">
            <summary>
              Looks up a localized string similar to Turquoise.
            </summary>
        </member>
        <member name="P:GuiStrings.TypeNotAControl">
            <summary>
              Looks up a localized string similar to The type should be a Control.
            </summary>
        </member>
        <member name="P:GuiStrings.TypeShouldHaveADefaultConstructor">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; should have a default constructor..
            </summary>
        </member>
        <member name="P:GuiStrings.TypeShouldImplementIAddOnToolHostObject">
            <summary>
              Looks up a localized string similar to The control type should implement IAddOnToolHostObject.
            </summary>
        </member>
        <member name="P:GuiStrings.UnableToLoad">
            <summary>
              Looks up a localized string similar to Unable to load {0}: {1}.
            </summary>
        </member>
        <member name="P:GuiStrings.UnableToPerformHostDependentOperation">
            <summary>
              Looks up a localized string similar to Unable to perform host dependent operation..
            </summary>
        </member>
        <member name="P:GuiStrings.UnableToSave">
            <summary>
              Looks up a localized string similar to Unable to save {0}: {1}.
            </summary>
        </member>
        <member name="P:GuiStrings.UnableToStartProcess">
            <summary>
              Looks up a localized string similar to Unable to start {0}..
            </summary>
        </member>
        <member name="P:GuiStrings.Undo">
            <summary>
              Looks up a localized string similar to _Undo.
            </summary>
        </member>
        <member name="P:GuiStrings.UndoTooltip">
            <summary>
              Looks up a localized string similar to Undo.
            </summary>
        </member>
        <member name="P:GuiStrings.Unsaved">
             <summary>
               Looks up a localized string similar to Save changes to the following files?
            {0}.
             </summary>
        </member>
        <member name="P:GuiStrings.Untitled">
            <summary>
              Looks up a localized string similar to Untitled.
            </summary>
        </member>
        <member name="P:GuiStrings.UpdateHelp">
            <summary>
              Looks up a localized string similar to _Update Windows PowerShell Help.
            </summary>
        </member>
        <member name="P:GuiStrings.UpgradeEncoding">
             <summary>
               Looks up a localized string similar to {0}
            You have added Unicode characters that are not supported by the original file encoding. To preserve the new characters, the application will save the file in the Unicode format.
               ? Click OK to save the file as Unicode and preserve all the new characters
               ? Click Cancel to cancel the operation.
            .
             </summary>
        </member>
        <member name="P:GuiStrings.UpKeyboardDisplayName">
            <summary>
              Looks up a localized string similar to Up.
            </summary>
        </member>
        <member name="P:GuiStrings.UserName">
            <summary>
              Looks up a localized string similar to _User name:.
            </summary>
        </member>
        <member name="P:GuiStrings.VariableToolTip">
            <summary>
              Looks up a localized string similar to {0} = {1}.
            </summary>
        </member>
        <member name="P:GuiStrings.VerboseFormat">
            <summary>
              Looks up a localized string similar to VERBOSE: {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.VerticalAddOn">
            <summary>
              Looks up a localized string similar to Vertical Add-ons.
            </summary>
        </member>
        <member name="P:GuiStrings.VerticalAddOnSplitter">
            <summary>
              Looks up a localized string similar to Vertical Add-on Tools splitter.
            </summary>
        </member>
        <member name="P:GuiStrings.View">
            <summary>
              Looks up a localized string similar to _View.
            </summary>
        </member>
        <member name="P:GuiStrings.VioletColorName">
            <summary>
              Looks up a localized string similar to Violet.
            </summary>
        </member>
        <member name="P:GuiStrings.WarningCaption">
            <summary>
              Looks up a localized string similar to Windows PowerShell ISE - Warning.
            </summary>
        </member>
        <member name="P:GuiStrings.WarningFormat">
            <summary>
              Looks up a localized string similar to WARNING: {0}.
            </summary>
        </member>
        <member name="P:GuiStrings.WheatColorName">
            <summary>
              Looks up a localized string similar to Wheat.
            </summary>
        </member>
        <member name="P:GuiStrings.WhiteColorName">
            <summary>
              Looks up a localized string similar to White.
            </summary>
        </member>
        <member name="P:GuiStrings.WhiteSmokeColorName">
            <summary>
              Looks up a localized string similar to White Smoke.
            </summary>
        </member>
        <member name="P:GuiStrings.WholeWord">
            <summary>
              Looks up a localized string similar to _Whole word.
            </summary>
        </member>
        <member name="P:GuiStrings.WindowsPowerShellHelp">
            <summary>
              Looks up a localized string similar to _Windows PowerShell ISE Help.
            </summary>
        </member>
        <member name="P:GuiStrings.WindowTitleElevatedPrefix">
            <summary>
              Looks up a localized string similar to Administrator: .
            </summary>
        </member>
        <member name="P:GuiStrings.WindowTitleFormat">
            <summary>
              Looks up a localized string similar to {0}{1}{2}.
            </summary>
        </member>
        <member name="P:GuiStrings.WorkflowAdvancedDescription">
            <summary>
              Looks up a localized string similar to Advanced workflow that accesses common workflow parameters and other pre-defined variables..
            </summary>
        </member>
        <member name="P:GuiStrings.WorkflowInlineScriptSnippetDescription">
            <summary>
              Looks up a localized string similar to Runs isolated blocks of PowerShell script. Place optional workflow common parameters at the end of the script block..
            </summary>
        </member>
        <member name="P:GuiStrings.WorkflowParallelSnippetDescription">
            <summary>
              Looks up a localized string similar to Run commands in parallel. Operation order is not determined..
            </summary>
        </member>
        <member name="P:GuiStrings.WorkflowSequenceForEachParallelDescriptionFormat">
            <summary>
              Looks up a localized string similar to Runs the contents of the {0} block in parallel. Run order is not determined..
            </summary>
        </member>
        <member name="P:GuiStrings.WorkflowSequenceSnippetDescription">
            <summary>
              Looks up a localized string similar to Runs command in sequential order..
            </summary>
        </member>
        <member name="P:GuiStrings.WorkflowSimpleDescription">
            <summary>
              Looks up a localized string similar to Basic workflow..
            </summary>
        </member>
        <member name="P:GuiStrings.X86Suffix">
            <summary>
              Looks up a localized string similar to  (x86).
            </summary>
        </member>
        <member name="P:GuiStrings.XMLFiles">
            <summary>
              Looks up a localized string similar to XML Files.
            </summary>
        </member>
        <member name="P:GuiStrings.YellowColorName">
            <summary>
              Looks up a localized string similar to Yellow.
            </summary>
        </member>
        <member name="P:GuiStrings.YellowGreenColorName">
            <summary>
              Looks up a localized string similar to Yellow Green.
            </summary>
        </member>
        <member name="P:GuiStrings.Zoom">
            <summary>
              Looks up a localized string similar to Zoom.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomIn">
            <summary>
              Looks up a localized string similar to _Zoom In.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomIn1Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Add.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomIn2Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Add.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomIn3Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Plus.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomIn4Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Plus.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomLabelFormat">
            <summary>
              Looks up a localized string similar to {0}%.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomOut">
            <summary>
              Looks up a localized string similar to Zoom O_ut.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomOut1Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Subtract.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomOut2Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Subtract.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomOut3Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Minus.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomOut4Shortcut">
            <summary>
              Looks up a localized string similar to Ctrl+Shift+Minus.
            </summary>
        </member>
        <member name="P:GuiStrings.ZoomSelection">
            <summary>
              Looks up a localized string similar to Zoom Selection.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.App">
            <summary>
            Application class
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.App.hasHandledException">
            <summary>
            value indicating whether we should prompt for exceptions.
            This is set to true from tests and after prompting to prevent multiple prompts
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.App.#ctor">
            <summary>
            Initializes a new instance of the App class.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.App.HasHandledException">
            <summary>
            Gets or sets a value indicating whether we should prompt for exceptions.
            This is set to true from tests and after prompting to prevent multiple prompts
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.App.App_DispatcherUnhandledException(System.Object,System.Windows.Threading.DispatcherUnhandledExceptionEventArgs)">
            <summary>
            Auto saves files in the case of an unexpected shut down
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.AccessibleMenuItem">
            <summary>
            Provides an "accessible" menu item which enables a screen reader
            to read any global hotkey that is defined for the command that
            this menu item invokes.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AccessibleMenuItem.#ctor">
            <summary>
            Initializes a new instance of the AccessibleMenuItem class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AccessibleMenuItem.OnCreateAutomationPeer">
            <summary>
            Returns the AutomationPeer for this menu item.
            </summary>
            <returns>An AutomationPeer instance.</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.AccessibleMenuItem.AccessibleMenuItemAutomationPeer">
            <summary>
            Provides a custom MenuItemAutomationPeer which can report accelerator
            keys for the command it targets.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AccessibleMenuItem.AccessibleMenuItemAutomationPeer.GetAcceleratorKeyCore">
            <summary>
            Returns the accelerator key for this menu item.
            </summary>
            <returns>The accelerator key in string form.</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.AddOnToolTabControl">
            <summary>
            Tab control for horizontal and vertical tools
            </summary>
            <summary>
            AddOnToolTabControl
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AddOnToolTabControl.currentItemsSource">
            <summary>
            The current ItemsSource used to disconnect from listenning to changest in the SelectedFile.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AddOnToolTabControl.#ctor">
            <summary>
            Initializes a new instance of the AddOnToolTabControl class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AddOnToolTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the Items property has changed to:
            1) Set the SelectedItem to the Selected AddOn tool
            2) Start tracking changes to the SelectedAddOnTool in order to change the selecting when it changes
            3) Select a recently added tab        
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AddOnToolTabControl.ClosePane_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
             - Sets the Close AddOn Pane automation id to this automation id plus the automation if of the close button
            so they have distinct automation ids
             - Sets the Command property for the close pane button
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AddOnToolTabControl.CloseTool_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
             - Sets the Command property for the close tool button
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AddOnToolTabControl.ItemsSource_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the ReadOnlyISEAddOnCollection in the ItemsSouce changes in order to set the SelectedItem in the control.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AddOnToolTabControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog">
            <summary>
            Interaction logic for FindAndReplaceDialog.xaml
            </summary>
            <summary>
            FindAndReplaceDialog
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.currentFindText">
            <summary>
            gui find text
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.currentReplaceText">
            <summary>
            gui replace text current state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.currentMatchCase">
            <summary>
            gui match case current state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.currentWholeWord">
            <summary>
            gui whole word current state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.currentSearchReverse">
            <summary>
            gui search reverse current state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.currentregularExpressions">
            <summary>
             gui regular expressions current state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.findData">
            <summary>
            The data used for find operations
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.internalSelectionChange">
            <summary>
            True when we are changing the selection in the editor as the result of a match
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.regex">
            <summary>
            Current Regex in use, if FindAndReplaceDialog.findData.FindOptions has UseRegularExpression.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.findInSelectionSpan">
            <summary>
            When we are searching within the selection this member indicates the range for the search, otherwise it is null.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.searchUserString">
            <summary>
            The string to search typed by the user in the dialog. This string might be replaced by a pattern in findData
            if it ends with $, so we preserve it here if we have to show it to the user when there are no more matches.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.#ctor">
            <summary>
            Initializes a new instance of the FindAndReplaceDialog class.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.FindData">
            <summary>
            Gets the find data currently in use.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.SelectedFile">
            <summary>
            Gets the file currently selected.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.SetFindMode(System.Boolean)">
            <summary>
            Sets up the dialog for finding
            </summary>
            <param name="findMode">true for find, false for replace</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.FindNextOrPrevious(System.Boolean,System.Windows.Window,Microsoft.PowerShell.Host.ISE.ISEEditor)">
            <summary>
            Searches the next or previous match in the editor
            </summary>
            <param name="searchUp">true to search up</param>
            <param name="parent">parent window in case we should show there are no matches</param>
            <param name="editor">editor to search in</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.FindAndSelect(System.Boolean,System.Boolean,System.Windows.Window,Microsoft.PowerShell.Host.ISE.ISEEditor,System.Nullable{Microsoft.VisualStudio.Text.Span},System.Boolean)">
            <summary>
            Called after the findData has been set to perform the search and select the match.
            </summary>
            <param name="isFirstFindInSelection">true for the first find in selection</param>
            <param name="searchUp">true to search up</param>
            <param name="parent">parent window</param>
            <param name="editor">editor to search in</param>
            <param name="findInSelectionSpan">selection span being searched, null when not searching in selection</param>
            <param name="testing">true when calling this from test code.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.CanSetFindData(Microsoft.PowerShell.Host.ISE.ISEEditor,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            sets the findData fileds for a new search 
            </summary>
            <param name="editor">editor to search</param>
            <param name="findText">text to search</param>
            <param name="matchCase">true to match case</param>
            <param name="searchUp">true to search up</param>
            <param name="regEx">true to search with regular expressions</param>
            <param name="wholeWord">true to search whole word</param>
            <returns>true if successfully set findData</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.SelectAndScrollSpan(Microsoft.PowerShell.Host.ISE.ISEEditor,Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Expands all regions containing the span, selects the given span in the editor and scrolls the pan into view
            </summary>
            <param name="editor">the editor we are searching</param>
            <param name="span">span to select and view</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.ShowNoMatches(System.Windows.Window)">
            <summary>
            Shows the no matches dialog
            </summary>
            <param name="parent">Parent window.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.GetStartPosition(Microsoft.PowerShell.Host.ISE.ISEEditor,System.Boolean,System.Boolean)">
            <summary>
            Gets the position we should start our search on
            </summary>
            <param name="editor">the editor we are searching</param>
            <param name="isFirstFindInSelection">true if this is the first call during "Find In Selection"</param>
            <param name="searchUp">true to search up</param>
            <returns>the position we should start our search on</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.ActivateInitialization">
            <summary>
            Copies the selection text to the find what text box
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.SetFindInSelectionState">
            <summary>
            Sets the state of IsChecked and IsEnabled for the FindInSelection checkbox depending on the current selection.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.ResetHeightProperties">
            <summary>
            Resets height properties to their initial state and starts listening
            to LayoutUpdated to prevent vericat resizing
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.FindAndReplaceDialog_LayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Called to prevent vertical resizing
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.FindAndReplaceDialog_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Closes the dialog on Esc since modeless dialogs don't seem to respect IsCancel=true
            </summary>
            <param name="sender">evemt sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.FindAndReplaceDialog_Closed(System.Object,System.EventArgs)">
            <summary>
            stores the current dialog values for the next time this dialog is opened
            </summary>
            <param name="sender">evemt sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.CanSetFindData(Microsoft.PowerShell.Host.ISE.ISEEditor)">
            <summary>
            sets the findData fileds for a new search
            </summary>
            <param name="editor">the editor we are searching</param>
            <returns>true if successfully set findData</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.FindNext(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Finds the next word on the selected editor
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.ReplaceNext(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Replace/find the next word on the selected editor
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.ReplaceAllMatches">
            <summary>
            Replaces all matching occurrences of the given string.
            </summary>
            <remarks>All writable spans will be replaced by this method. Read only spans will be left in place.</remarks>
            <returns>The number of matches found, or -1 if the call to CanSetFindData failed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.ReplaceAll(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Replaces all matches of the search string
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.CanFindNext(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            sets e.CanExecute to true if there is a current editor with some text
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.Cancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to close the dialog
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FindAndReplaceDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NewRemotePowerShellTabDialog">
            <summary>
            Interaction logic for NewRemotePowerShellTabDialog.xaml
            </summary>
            <summary>
            NewRemotePowerShellTabDialog
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NewRemotePowerShellTabDialog.lastComputer">
            <summary>
            last value of the connectBox
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NewRemotePowerShellTabDialog.lastUser">
            <summary>
            last value of the userBox
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NewRemotePowerShellTabDialog.#ctor">
            <summary>
            Initializes a new instance of the NewRemotePowerShellTabDialog class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NewRemotePowerShellTabDialog.UserBox_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to selct all text on focus
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NewRemotePowerShellTabDialog.ConnectBox_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to selct all text on focus
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NewRemotePowerShellTabDialog.ConnectBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called to set the enabled state of the connect button
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NewRemotePowerShellTabDialog.Cancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to set the dialog result
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NewRemotePowerShellTabDialog.Connect_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to set the dialog result and save dialog text.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NewRemotePowerShellTabDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.SkippableMessageBox">
            <summary>
            MessageBox with a "skip this message" checkbox
            </summary>
            <summary>
            SkippableMessageBox
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.SkippableMessageBox.#ctor(System.Windows.Window,System.String)">
            <summary>
            Initializes a new instance of the SkippableMessageBox class.
            </summary>
            <param name="owner">window owner</param>
            <param name="message">message to be displayed</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.SkippableMessageBox.ShowDialogIfNecessary(System.Boolean@,System.Windows.Window,System.String)">
            <summary>
            Shows a message dialog if showAgain is true, setting showAgain with the dialog checkbox
            </summary>
            <param name="showAgain">boolean determining if a dialog should be displayed</param>
            <param name="owner">window owner</param>
            <param name="message">message to be displayed</param>
            <returns>false if the dialog has been displayed and cancelled, true otherwise</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.SkippableMessageBox.Cancel_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to set the dialog result and close the window
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.SkippableMessageBox.Ok_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to set the dialog result and close the window
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.SkippableMessageBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl">
            <summary>
            This control has all the script editor tabs
            </summary>
            <summary>
            EditorTabControl
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.currentItemsSource">
            <summary>
            The current ItemsSource used to disconnect from listenning to changest in the SelectedFile.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.#ctor">
            <summary>
            Initializes a new instance of the EditorTabControl class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the Items property has changed to:
            1) Set the SelectedItem to the SelectedFile
            2) Start tracking changes to the SelectedFile in order to change the selecting when it changes
            3) Select a recently added tab
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.ItemsSource_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the ISEFileCollection in the ItemsSouce changes in order to set the SelectedItem in the control.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.EditorTabControl_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the selection changes to set the focus on the Tab's Editor 
            and update currentPowerShellTab.Files.SelectedFile  
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.ToggleScriptingPane(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Sets the scripting pane visibility to true/false
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.ApplicationCanSaveOrCloseScript(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there is at least one script in the current runspace tab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.ApplicationCloseScript(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Closes a Script file tab
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.OnSelectedFileNeedsFocus(System.Object,System.EventArgs)">
            <summary>
            Updates the selected tab when the file selected in the runspace changes
            </summary>
            <param name="sender">PowerShellTab sending the event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.CloseTabButton_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Set the CloseTabButton automation id to filename.btnCloseTab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.EditorTabControl_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This fixes a problem when clicking on the header of a selected editor tab stealing the focus from the editor
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorTabControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.InternalPropertyBindingConverter">
            <summary>
            Used to Convert an object to an object's property value even if the property is internal.
            XAML does not support Binding to internal properties and this converter is meant to address that problem.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalPropertyBindingConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <paramref name="value"/> to the resulting object obtained from retrieving the property value in <paramref name="parameter"/> (or property values if <paramref name="parameter"/> contains dots) out of <paramref name="value"/>.
            In the spirit of WPF's Binding, this method traces instead of throwing exceptions so that it supports an eventual value of null and other 
            problems without throwing.
            </summary>
            <param name="value">The object we are trying to Convert.</param>
            <param name="targetType"><paramref name="targetType"/> is unused.</param>
            <param name="parameter">The property path out of <paramref name="value"/>. This can include dots, but not indexed properties.</param>
            <param name="culture"><paramref name="culture"/> is unused.</param>
            <returns>The resulting object obtained from retrieving the property value in <paramref name="parameter"/> (or property values if <paramref name="parameter"/> contains dots) out of <paramref name="value"/>. </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalPropertyBindingConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method is not supported and throws an exception when called.
            </summary>
            <param name="value">The parameter <paramref name="value"/> is not used.</param>
            <param name="targetType">The parameter <paramref name="targetType"/> is not used.</param>
            <param name="parameter">The parameter <paramref name="parameter"/> is not used.</param>
            <param name="culture">The parameter <paramref name="culture"/> is not used.</param>
            <returns>Nothing since an exception will be thrown.</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject">
            <summary>
            Wraps an object exposing its private properties as if they where public.
            This serves as a workarround for the fact that WPF DataBinding cannot see internal properties.
            This class is meant to be the DataContext of objects and therefore can be internal.
            There is no need to use this class if all properties in a property path are public.
            The property values returned here are also InternalObjects if the PropertyType is in this assembly
            (actually, in Application.Current.MainWindow.GetType().Assembly). This means that:
              1) This class can be used even if more than one property in a property binding path is internal.
              2) If a property binding path only contains objects declared in this assembly then the final
              binding value is going to be an InternalObject and it is only going to be useful for its
              string value.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.baseObject">
            <summary>
            Object being wrapped.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.baseType">
            <summary>
            Type of the object being wrapped.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the InternalObject class.
            </summary>
            <param name="baseObject">object being wrapped.</param>
            <exception cref="T:System.ArgumentNullException">If the baseObject is null</exception>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.PropertyChanged">
            <summary>
            Notifies callers of changes in the BaseObject's properties.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.BaseObject">
            <summary>
            Gets the object being wrapped.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.ToString">
            <summary>
            Returns this.BaseObject's ToString.
            </summary>
            <returns>this.BaseObject's ToString</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetAttributes">
            <summary>
            Repassed the static method with the same name in TypeDescriptor.
            </summary>
            <returns>The returnValue from the static method with the same name in  TypeDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetClassName">
            <summary>
            Repassed the static method with the same name in TypeDescriptor.
            </summary>
            <returns>The returnValue from the static method with the same name in  TypeDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetComponentName">
            <summary>
            Repassed the static method with the same name in TypeDescriptor.
            </summary>
            <returns>The returnValue from the static method with the same name in  TypeDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetConverter">
            <summary>
            Repassed the static method with the same name in TypeDescriptor.
            </summary>
            <returns>The returnValue from the static method with the same name in  TypeDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetDefaultEvent">
            <summary>
            Repassed the static method with the same name in TypeDescriptor.
            </summary>
            <returns>The returnValue from the static method with the same name in  TypeDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetDefaultProperty">
            <summary>
            Repassed the static method with the same name in TypeDescriptor.
            </summary>
            <returns>The returnValue from the static method with the same name in  TypeDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetEditor(System.Type)">
            <summary>
            Repassed the static method with the same name in TypeDescriptor.
            </summary>
            <param name="iseEditorType">The paramter <paramref name="iseEditorType"/> is repassed the static method with the same name in TypeDescriptor.</param>
            <returns>The returnValue from the static method with the same name in TypeDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetEvents(System.Attribute[])">
            <summary>
            Repassed the static method with the same name in TypeDescriptor.
            </summary>
            <param name="attributes">The parameter <paramref name="attributes"/> is repassed the static method with the same name in TypeDescriptor.</param>
            <returns>The returnValue from the static method with the same name in  TypeDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetEvents">
            <summary>
            Repassed the static method with the same name in TypeDescriptor.
            </summary>
            <returns>The returnValue from the static method with the same name in  TypeDescriptor.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetProperties(System.Attribute[])">
            <summary>
            Returns PropertyDescriptors for all public and private properties.
            </summary>
            <param name="attributes">This parameter is ignored.</param>
            <returns>PropertyDescriptors for all public and private properties.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetProperties">
            <summary>
            Returns PropertyDescriptors for all public and private properties.
            </summary>
            <returns>PropertyDescriptors for all public and private properties.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns this.BaseObject.
            </summary>
            <param name="pd">This parameter is ignored.</param>
            <returns>returns this.BaseObject</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.BaseNotifyPropertyChanged_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Repasses change notifications in the base object to potential listeners to the InternalObject's notifications.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event handler</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor">
            <summary>
            PropertyDescriptor returned by InternalObject's GetProperties method
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.propertyInfo">
            <summary>
            The PropertyInfo used to get and set values.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.getValueReturnsInternalObject">
            <summary>
            Set to true if the property type is in this assembly.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the InternalObjectPropertyDescriptor class.
            </summary>
            <param name="propertyInfo">the PropertyInfo used to get and set values.</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.ComponentType">
            <summary>
            Gets the value typeof(InternalObject).
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.IsReadOnly">
            <summary>
            Gets a value indicating tf the property cannot be written to.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.PropertyType">
            <summary>
            Gets the property type.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            Returns false.
            </summary>
            <param name="component">This parameter is ignored</param>
            <returns>always returns false.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the calue of the property descriptor in the component.
            </summary>
            <param name="component">InternalObject that owns the property.</param>
            <returns>the calue of the property descriptor in the component.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            This method has no effect.
            </summary>
            <param name="component">This parameter is ignored.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property in the component.
            </summary>
            <param name="component">InternalObject that owns the property.</param>
            <param name="value">Property value to set the property to.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.InternalObject.InternalObjectPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            Gets the value true.
            </summary>
            <param name="component">this parameter is ignored.</param>
            <returns>the value true.</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISECornerMarginProvider">
            <summary>
            A provider for a margin that will be the corner element
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECornerMarginProvider.CreateMargin(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Returns the corner element to serve as a margin
            </summary>
            <param name="textViewHost">the host, which is not used</param>
            <param name="containerMargin">the container, which is not used</param>
            <returns>the corner element to serve as a margin</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISECornerMarginProvider.ISECornerMargin">
            <summary>
            A simple margin with one border with Control background
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECornerMarginProvider.ISECornerMargin.border">
            <summary>
            The element returned in the VisualElement property
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECornerMarginProvider.ISECornerMargin.#ctor">
            <summary>
            Initializes a new instance of the ISECornerMargin class
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISECornerMarginProvider.ISECornerMargin.VisualElement">
            <summary>
            Gets the GUI for this marin
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISECornerMarginProvider.ISECornerMargin.MarginSize">
            <summary>
            Gets the MArginSize for this, which is not used
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISECornerMarginProvider.ISECornerMargin.Enabled">
            <summary>
            Gets a value indicating whether the margin is enabled
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECornerMarginProvider.ISECornerMargin.GetTextViewMargin(System.String)">
            <summary>
            Gets the margin by name
            </summary>
            <param name="marginName">name of the margin to get</param>
            <returns>the margin by name</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECornerMarginProvider.ISECornerMargin.Dispose">
            <summary>
            Disposes of resources
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow">
            <summary>
            Main Window class
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.CollapsedScriptPaneHeight">
            <summary>Minimum Height below which the ScriptPane is considered collapsed</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.brushColorArray">
            <summary>
            Array of brush names. their classic theme and high contrast colors.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.classicBrushes">
            <summary>
            The classic theme brushes build of brushColorArray
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.highContrastKeys">
            <summary>
            The high contrast keys built of brushColorArray
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.resourceBrushes">
            <summary>
            Dictionary where default brushes are saved
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.currentColorScheme">
            <summary>
            Current color mode the main window is on. Used not to set colors more than once
            if we receive multiple high contrast/theme messages.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.stopAndCopyGesture">
            <summary>
            Gesture used for stopping a command and copying text(Ctrl+C in English).
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.exitCode">
            <summary>
            The application exit code
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.mruManager">
            <summary>
            manager for MRU files
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.#ctor">
            <summary>
            Initializes a new instance of the MainWindow class.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MainWindowColorScheme">
            <summary>
            Color modes the main window might be on,
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MainWindowColorScheme.HighContrast">
            <summary>
            High Contrast mode. 
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MainWindowColorScheme.Classic">
            <summary>
            Classic, non high contrast mode.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MainWindowColorScheme.NonClassic">
            <summary>
            Non classic and non High Contrast mode
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MainWindowColorScheme.NotSet">
            <summary>
            Initial value of currentColorScheme
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.HighContrastForegroundBrush">
            <summary>
            Gets the high contrast foreground brush used for text in the editors and the editor caret
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.HighContrastForegroundColor">
            <summary>
            Gets the high contrast foreground color used for text in the editors and the editor caret
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.HighContrastBackgroundColor">
            <summary>
            Gets the high contrast background color used for some control colors
            and, in non high contrast mode, for the text color of non script editors, and the caret of all editors
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.HighContrastDarkButNotBlackColor">
            <summary>
            Gets the high contrast color used for tab items on mouse over.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.CurrentColorScheme">
            <summary>
            Gets the current color mode the main window is on. Used not to set colors more than once
            if we receive multiple high contrast/theme messages.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MruManager">
            <summary>
            Gets the manager for MRU files
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ExitCode">
            <summary>
            Gets or sets the application exit code
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.SetControlColors">
            <summary>
            Called when high contrast changes or when window is loaded to change control colors
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Zooms in our out responding to Ctrl+ Mouse wheel.
            </summary>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.OnPreviewDragEnter(System.Windows.DragEventArgs)">
            <summary>
            Marks the event as handled so that the editor does not start a drag operation for files
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.OnPreviewDrop(System.Windows.DragEventArgs)">
            <summary>
            Deals with files being dropped in the application.
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.OnPreviewDragOver(System.Windows.DragEventArgs)">
            <summary>
            Sets the visual effects of drag to indicate only files can be dropped.
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Previews keys before the editor gets a chance to see them.
            This is necessary in order to overide some shortcuts that are also used in the editor's
            DefaultKeyProcessor (Control+W) and (Control+T).
            It is also used to ensure Enter and Escape will only work in AddOn tools if the focus is on the AddOn tools
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.HandlePreviewEnter(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called from OnPreviewKeyDown to handle the Enter key
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.HandlePreviewEscape(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called from OnPreviewKeyDown to handle the Escape key
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.IsEditorFocused(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Returns true if one of the editors is focused
            </summary>
            <param name="selectedTab">currently selected PowerShellTab</param>
            <returns>rue if one of the editors is focused</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.IsAddOnToolFocused(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Returns true if any child control of the addon tools is focused
            </summary>
            <param name="selectedTab">currently selected PowerShellTab</param>
            <returns>true if any child control of the addon tools is focused</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.IsPositive(System.Double)">
            <summary>
            Returns true if the double is a valid positive number
            </summary>
            <param name="value">value to test</param>
            <returns>true if the double is a valid positive number</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GetFilesBeingDragged(System.Windows.DragEventArgs)">
            <summary>
            Retrieves from <paramref name="e"/> a string collection with files being dropped or null
            if there are no files being dropped
            </summary>
            <param name="e">event arguments</param>
            <returns>
            a string collection with files being dropped or null if there are no files being dropped
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.PopulateBrushes(Microsoft.Windows.PowerShell.Gui.Internal.MainWindow)">
            <summary>
            Called after the aplication initializes to create bursh dictionaries
            </summary>
            <param name="window">main window</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GetHighContrastBrush(System.String)">
            <summary>
            Gets the High Contrast Brush for the given brush name
            </summary>
            <param name="brushName">brush name to retrieve the brush from</param>
            <returns>The High Contrast Brush for the given brush name</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.SetHighContrastBrushes(Microsoft.Windows.PowerShell.Gui.Internal.MainWindow)">
            <summary>
            Called when high contrast changes to set the proper brushes
            </summary>
            <param name="window">main window</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.Command_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Returns true if we are currently debugging
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.OpenMruFile_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Opens a file from the MRU list
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleShowOutlining_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Toggles showing outlining
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleEmbeddedCommands_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Toggles showing embedded commands
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleEmbeddedCommands_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if it will be possible to toggle the embedded commands
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleShowLineNumbers_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Toggles the display of line numbers
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleOutliningExpandCollapseAll_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Toggles expanding outlining
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleOutliningExpandCollapseAll_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if it will be possible to toggle outlining expansion
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.StartIntellisense_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute if it will be possible to start intellisense
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.StartIntellisense_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Starts intellisense
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowSnippet_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if it will be possible to insert a snippet 
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowSnippet_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Inserts a snippet
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GoToEditor(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            sets the focus in the Script Editor
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GoToConsole(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            sets the focus in the console
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.CanGoToEditor(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there is at least one script in the current runspace tab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GoToLine_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Goes to a line in the script editor.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GoToLine_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Returns true if the "GoToLine" command can be executed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationCanSaveOrCloseScript(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there is at least one script in the current runspace tab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.CanExecuteSave(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if the "Save" command can be executed
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationSaveScript(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Saves the current script
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.CanExecuteSaveAs(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if the "Save As" command can be executed
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationSaveAsScript(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Saves the current script with the Save dialog
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationCloseScript(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Closes a Script file tab
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleToolBar_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Sets the ToolBar visibility to true/false
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleScriptingPane(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Sets the scripting pane visibility to true/false
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowScriptPaneTop(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Shows the script pane on the top
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowScriptPaneRight_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to false if the scripts are already on right
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowScriptPaneTop_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to false if the scripts are already on top
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowScriptPaneMaximized_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to false if the scripts are already maximized
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowScriptPaneRight(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Shows the script pane on the right
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowScriptPaneMaximized(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Shows the script pane maximized
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationCanSelectAll(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to false if the focus is not in any editor
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationSelectAll(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Selects all text in the editor
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationCanUndo(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to false if the focus is not in the script editor
            or input controller or if there is nothing to undo
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationUndo(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Undos the last action on input or script editor
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationCanRedo(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to false if the focus is not in the script editor
            or input controller or if there is nothing to redo
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationRedo(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Redo the last action on input or script editor
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationCanCut(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to false if the focus is not in the script editor
            or input controller, or if no text is selected
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationCut(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Cut text from focused window
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationCanCopy(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to false if the focus is not in the script editor
            or input controller or output window, or if no text is selected
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationCopy(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Copy text from focused window
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationCanPaste(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to false if the focus is not in the script editor
            or input controller, or if there is nothing in the clipboard
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationPaste(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Paste text into focused window
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationOpenScript(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Opens a new script
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.Find_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Finds text in script
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.Find_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there is a script with text to be found
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.Replace_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Finds text in script
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.FindNext_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Finds the next match in the script editor
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.FindNext_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there is a script with text to be found
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.FindPrevious_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Finds the previous match in the script editor
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.FindPrevious_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there is a script with text to be found
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationNewScript(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Creates a new script tab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ClearOutput(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Clears the output
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.RunScript_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Runs the current script
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.RunScript_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there is a script to run
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.RunSelection_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Runs the current selection
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.RunSelection_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there is a selection to run
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.Stop_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            stops command execution
            </summary>
            <param name="target">event target</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.Stop_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if can stop execution
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.NewRunspace_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to false when we already have the maximum number of runspaces
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.NewRunspace_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Creates a new runspace tab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.NewRemotePowerShellTab_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Creates a new remote runspace tab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.CloseRunspace_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if this is not the last runspace 
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.CloseRunspace_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Closes the current runspace
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowRunspace_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Shows the requested runspace
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowScript_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Shows the requested script
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.CustomScript_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Shows the requested script
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.CustomScript_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there the pipeline is free
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.OpenOptionsDialog_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Opens the options dialog
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.StartPowerShell_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Starts PowerShell
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationHelp(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invokes the help file
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.UpdateHelp_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invokes the update-help command
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.AboutAddOnTools_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Follows the link to online AddOn information
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowPopupCommand_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Invokes the show-command
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ApplicationExit(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles ApplicationExit command
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.StepInto_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the "step into" debugger command
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.StepOver_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the "step over" debugger command
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.StepOut_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the "step out" debugger command
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ResumeDebugger_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if Run/Continue can be executed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ResumeDebugger_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Resumes execution of the debugger
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.BreakAllDebugger_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if Break All can be executed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.BreakAllDebugger_Execute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Breaks running script into debugger
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.StopDebugger_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Stops the debugger
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.DebuggerCommand_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Returns true if we are currently debugging
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleBreakpoint_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Toggles the breakpoint on the current line
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleBreakpoint_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Returns true if the "toggle breakpoint" command can be executed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.EnableBreakpoint_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Enables the breakpoint on the current line
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.EnableBreakpoint_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Returns true if the "enable breakpoint" command can be executed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.DisableBreakpoint_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Disables the breakpoint on the current line
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.DisableBreakpoint_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Returns true if the "disable breakpoint" command can be executed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.RemoveAllBreakpoints_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Deletes all the breakpoints on the current runspace
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.RemoveAllBreakpoints_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Returns true if the "remove all breakpoints" command can be executed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.EnableAllBreakpoints_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Enables all the breakpoints on the current runspace
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.EnableAllBreakpoints_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Returns true if the "enable all breakpoints" command can be executed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.DisableAllBreakpoints_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Disables all the breakpoints on the current runspace
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GoToMatch_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Returns true if it is possible to go to a matching character
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GoToMatch_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Goes to a matching character
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.DisableAllBreakpoints_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Returns true if the "disbale all breakpoints" command can be executed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GetCallStack_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the "get callstack" command 
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ListBreakpoints_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the "list breakpoints" command 
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ListBreakpoints_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if can execute the command
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ZoomOut_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            decreases the font.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ZoomOut_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if we can decrease the font.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ZoomIn_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Increases the font.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ZoomIn_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if we can increase the font.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MoveVerticalAddOnToolToHorizontal_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to move a vertical tool to horizontal
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MoveHorizontalAddOnToolToVertical_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to move a horizontal tool to vertical
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GoToSelectedVerticalAddOnTool_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to tab into the vertical addon tool
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.GoToSelectedHorizontalAddOnTool_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to tab into the horizontal addon tool
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ShowAndSelectAddOnTool_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to show and select an AddOn tool
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.HideVerticalAddOnTool_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to hide a vertical AddOn tool
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.HideHorizontalAddOnTool_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to hide a horizontal AddOn tool
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.HorizontalAddOnTool_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there is a horizontal tool to hide
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.VerticalAddOnTool_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true if there is a vertical tool to hide
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleHorizontalAddOnPane_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to toggle the horizontal AddOn tool pane visibility
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleVerticalAddOnPane_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to toggle the vertical AddOn tool pane visibility
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleHorizontalAddOnPane_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true when it is possible to toggle the horizontal AddOn tool pane visibility
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ToggleVerticalAddOnPane_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true when it is possible to toggle the vertical AddOn tool pane visibility
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ExploreScriptBrowserAddOnTool_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to open webpage for Script Browser Add-On
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ExploreScriptBrowserAddOnTool_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true when the command can be executed
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ExploreModuleBrowserAddOnTool_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to open webpage for Module Browser Add-On
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ExploreModuleBrowserAddOnTool_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true when the command can be executed
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ExploreScriptAnalyzerAddOnTool_Executed(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Handles the command to open webpage for Script Analyzer Add-On
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ExploreScriptAnalyzerAddOnTool_CanExecute(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Sets e.CanExecute to true when the command can be executed
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MainWindow_StateChanged(System.Object,System.EventArgs)">
            <summary>
            Called to set UserSettings.Default.MainWindowMaximized
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MainWindow_LocationChanged(System.Object,System.EventArgs)">
            <summary>
            Called to set UserSettings.Default.MainWindowTop and UserSettings.Default.MainWindowLeft
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MainWindow_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called to set UserSettings.Default.MainWindowWidthSetting and UserSettings.Default.MainWindowHeightSetting
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MainWindow_Closing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when closing the window to prompt for saving files
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles Theme and High Contrast switches and end session caused by restart manager or logoff
            </summary>
            <param name="hwnd">window handle</param>
            <param name="msg">message received</param>
            <param name="paramW">part of message parameters</param>
            <param name="paramL">other part of message parameters</param>
            <param name="handled">to be set to true if we want to be the only handlers of messages</param>
            <returns>returns IntPtr.Zero</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.ComponentDispatcher_ThreadPreprocessMessage(System.Windows.Interop.MSG@,System.Boolean@)">
            <summary>
            At the moment, this is used to catch Alt related messages.
            There 2 current uses for this:
               1) Routing Alt+Shift messages so that they reach the keyboard processor of the editors to allow for box selection.
               2) Handling Alt+Enter to stop it from executing the default buttons for AddOn tools
            </summary>
            <param name="msg">Message to process</param>
            <param name="handled">set to true if the message was handled</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.MainWindow_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to update the Runspace visibility
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.SetStartingPositionAndSize">
            <summary>
            Restore the values from the settings to the actual window position, size and state.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.PowerShellTabs_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called to update visual states
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor">
            <summary>
            Process Editor Keys before the editor DefaultKeyProcessor.
            This class has 2 purposes:
            1) Allowing us to call BeforeDefaultKeyProcessor.InternalKeyDown for custom key handling/interception in 
            the rest of the application
            2) "Unhardcode" most shortcuts hardcoded in Nautilus DefaultKeyProcessor. Unhardcode means that those
            shortcuts should be localizable.
            In order for the default key processor shortcuts be localizable we have to repeat here what the 
            default key processor does, but use the shortcuts from the resources. this is done with 
            BeforeDefaultKeyProcessor.shortcutMethods.
            We also have to prevent the default key processor to handle the shortcuts we localize. This is done with
            BeforeDefaultKeyProcessor.defaultKeyProcessorHardcodedShortcuts
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.shortcutMethods">
            <summary>
            Table of shortcuts to the methods that implement them
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.textView">
            <summary>
            The IWpfTextView this processor is for
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.editorOperations">
            <summary>
            editor operations
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.undoHistoryRegistry">
            <summary>
            editor undo registry
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.#ctor(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Operations.IEditorOperations,Microsoft.VisualStudio.Text.Operations.ITextBufferUndoManager)">
            <summary>
            Initializes a new instance of the BeforeDefaultKeyProcessor class
            </summary>
            <param name="textView">The IWpfTextView this processor is for</param>
            <param name="editorOperations">Editor operations</param>
            <param name="undoHistoryRegistry">Editor undo registry</param>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.InternalKeyDown">
            <summary>
            KeyDown Event. Renamed not to colide with the KeyDown class member.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.ShortcutMethods">
            <summary>
            Gets the table of shortcuts to the methods that implement them
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.KeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            This is the main entry point of the key processor.
            </summary>
            <param name="args">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.AddShortcutEntry(System.String,System.Threading.SendOrPostCallback)">
            <summary>
            Adds the shortcut to BeforeDefaultKeyProcessor.shortcutMethods if shortcut is not null.
            </summary>
            <param name="shortcut">shortcut to be added</param>
            <param name="method">method to be added</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.TryGetShortcutMethod(System.String,System.Threading.SendOrPostCallback@)">
            <summary>
            Tries to get a shortcut method for the given shortcut
            </summary>
            <param name="shortcut">shortcut to get a method from</param>
            <param name="method">method to be retrieved</param>
            <returns>true if it was possible to get a method</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.TryGetShortcutMethod(System.Windows.Input.KeyGesture,System.Threading.SendOrPostCallback@)">
            <summary>
            Tries to get a shortcut method for the given gesture
            </summary>
            <param name="gesture">gesture to get a method from</param>
            <param name="method">method to be retrieved</param>
            <returns>true if it was possible to get a method</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.AddShortcutEntryCopy(System.String,System.String)">
            <summary>
            Adds an entry for shortcut that is the same as the entry fr shortcutToCopy, if shortcut
            and shortcutToCopy are not null
            </summary>
            <param name="shortcut">shortcut to be added</param>
            <param name="shortcutToCopy">shortcut with method to be copied, previouslly added to the table</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessor.PopulateShortcutMethods">
            <summary>
            Populates BeforeDefaultKeyProcessor.shortcutMethods. The implementation of each shortcut seen here has been taken from
            Nautilus DefaultKeyProcessor.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessorProvider">
            <summary>
            Factory for BeforeDefaultKeyProcessor
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.BeforeDefaultKeyProcessorProvider.GetAssociatedProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Creates a new key processor provider for the given WPF text view host
            </summary>
            <param name="wpfTextView">Wpf-based text view host to create key processor for</param>
            <returns>A valid key processor</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports">
            <summary>
            Exposes all the editor factories and other services
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.value">
            <summary>
            Singleton value for this class
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.textEditorFactoryService">
            <summary>
            Text Editor Factory
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.classifierAggregator">
            <summary>
            The aggregator used to enumerate classifications for tests
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.tagAggregatorFactoryService">
            <summary>
            The aggregator used to get tags
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.textSearchService">
            <summary>
            The service used for searching text
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.textBufferFactoryService">
            <summary>
            The TextBuffer Factory
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.textMarkerProvider">
            <summary>
            The provider responsible for the breakpoint marker
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.contentTypeRegistryService">
            <summary>
            Retrieves an IContentType necessary for creating a text buffer
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.classificationTypeRegistry">
            <summary>
            Used in the classifier to retrieve Exported ClassificationTypeDefinition's
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.classificationFormatMapService">
            <summary>
            Used to retrieve the Exported EditorFormatDefinition assossiated with a ClassificationTypeDefinition and its
            corresponding TextFormattingRunProperties used to set classification text properties like colors
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.undoManagerProvider">
            <summary>
            Retrieves the ITextBufferUndoManager for a buffer
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.editorOperationsFactory">
            <summary>
            Retrieves the IEditorOperations for a TextView
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.navigatorProvider">
            <summary>
            Retrieves the ITextStructureNavigatorProvider for a TextView
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.textDocumentFactoryService">
            <summary>
            The factory to create ITextDocument
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.editorFormatMapService">
            <summary>
            factory used to retrieve IEditorFormatMap
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.editorOptionsFactoryService">
            <summary>
            factory used to create editor options
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.completionBroker">
            <summary>
            Allows the creation and dismissal of intellisense
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.undoHistoryRegistry">
            <summary>
            factory used to get an undo history
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.outliningManagerService">
            <summary>
            Allows outlining expand/collapse
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.UndoHistoryRegistry">
            <summary>
            Gets the factory used to get an undo history
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.TextSearchService">
            <summary>
            Gets the service used for searching text
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.TextMarkerProvider">
            <summary>
            Gets the provider responsible for the breakpoint marker
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.ClassifierAggregator">
            <summary>
            Gets the aggregator used to enumerate classifications for tests
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.TagAggregatorFactoryService">
            <summary>
            Gets the aggregator used to enumerate error tags
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.UndoManagerProvider">
            <summary>
            Gets the Undo provider
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.NavigatorProvider">
            <summary>
            Gets the ITextStructureNavigatorProvider for a TextView
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.EditorOperationsFactory">
            <summary>
            Gets the IEditorOperations for a TextView
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.ClassificationTypeRegistry">
            <summary>
            Gets the service used in the classifier to retrieve Exported ClassificationTypeDefinition's
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.ClassificationFormatMapService">
            <summary>
            Gets the service used to retrieve the Exported EditorFormatDefinition assossiated with a ClassificationTypeDefinition and its
            corresponding TextFormattingRunProperties used to set classification text properties like colors
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.ContentTypeRegistryService">
            <summary>
            Gets the IContentType necessary for creating a text buffer
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.TextBufferFactoryService">
            <summary>
            Gets the TextBuffer Factory
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.TextEditorFactoryService">
            <summary>
            Gets the Text Editor Factory
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.TextDocumentFactoryService">
            <summary>
            Gets the factory to create ITextDocument
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.EditorFormatMapService">
            <summary>
            Gets the factory used to retrieve IEditorFormatMap
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.EditorOptionsFactoryService">
            <summary>
            Gets the factory used to create editor options
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.CompletionBroker">
            <summary>
            Gets an object that allows the creation and dismissal of intellisense
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.OutliningManagerService">
            <summary>
            Gets an object that allows outlining expand/collapse
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.Value">
            <summary>
            Gets the object with all editor imports, performing MEF composition
            on the first time
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.EditorImports.Compose">
            <summary>
            calls into MEF in order to initialize editor imports and exports
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion">
            <summary>
            Wraps a basic completion from the basic System.Management.Automation implementation with extra information required by the ISE
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.classImageSource">
            <summary>
            image source for types
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.namespaceImageSource">
            <summary>
            image source for namespaces
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.commandImageSource">
            <summary>
            image source for commands
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.providerContainerImageSource">
            <summary>
            image source for provider containers
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.providerItemImageSource">
            <summary>
            image source for provider items
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.historyImageSource">
            <summary>
            image source for history items
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.methodImageSource">
            <summary>
            image source for methods
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.parameterNameImageSource">
            <summary>
            image source for parameter names
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.parameterValueImageSource">
            <summary>
            image source for parameter values
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.propertyImageSource">
            <summary>
            image source for properties
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.variableImageSource">
            <summary>
            Image source for variables
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.textImageSource">
            <summary>
            Image source for text information
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.dynamicKeywordImageSource">
            <summary>
            image source for dynamic keyword
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.#ctor">
            <summary>
            Prevents a default instance of the ISECompletion class from being created
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.Create(System.Management.Automation.CompletionResult)">
            <summary>
            Creates a new instance of the ISECompletion class.
            </summary>
            <param name="result">the basic System.Management.Automation completion</param>
            <returns>the newly created instance</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.GetImageSource(System.Windows.Media.ImageSource@,System.String)">
            <summary>
            Retrieves the ImageSource corresponding to the <paramref name="imagePath"/> from the cached
            <paramref name="source"/> or constructs a new one and stores it in <paramref name="source"/>
            for the next retrieval.
            </summary>
            <param name="source">the cached ImageSource, or null if it has not been retrieved yet.</param>
            <param name="imagePath">the ImageSource path</param>
            <returns>
            the ImageSource corresponding to the <paramref name="imagePath"/> from the cached
            <paramref name="source"/> or constructs a new one and stores it in <paramref name="source"/>
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion.GetImageFromResult(System.Management.Automation.CompletionResult)">
            <summary>
            Gets the ImageSource corresponding to <paramref name="result"/>.
            </summary>
            <param name="result">The basic CompletionResult from System.Management.Automation</param>
            <returns>the ImageSource corresponding to <paramref name="result"/>.</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet">
            <summary>
            Class used to override filtering and selection behavior for ISE Intellisense
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.completions">
            <summary>
            Completions of this set
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.filterSpan">
            <summary>
            The span used for filtering
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.lineStartToApplicableTo">
            <summary>
            span from the beginning of the line up to the beginning of applicableTo
            used for transition to tab completion
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.initialApplicableTo">
            <summary>
            initial text of lineStartToApplicableTo
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.selectOnEmptyFilter">
            <summary>
            True to select an item even if the filter text is empty
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.ITrackingSpan,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion},Microsoft.VisualStudio.Text.ITrackingSpan,Microsoft.VisualStudio.Text.ITrackingSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the ISECompletionSet class.
            </summary>
            <param name="moniker">The unique, non-localized identifier for the completion set.</param>
            <param name="displayName">The localized name of the completion set.</param>
            <param name="applicableTo">The tracking span to which the completions apply.</param>
            <param name="completions">The list of completions.</param>
            <param name="completionBuilders">The list of completion builders.</param>
            <param name="filterSpan">The span to be used for filtering</param>
            <param name="lineStartToApplicableTo">span from the beginning of the line up to the beginning of applicableTo</param>
            <param name="selectOnEmptyFilter">True to select an item even if the filter text is empty</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.Completions">
            <summary>
            Gets the completions of this set
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.FilterSpan">
            <summary>
            Gets the span used for filtering
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.LineStartToApplicableTo">
            <summary>
            Gets the span from the beginning of the line up to the beginning of applicableTo
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.InitialApplicableTo">
            <summary>
            Gets the initial text of LineStartToApplicableTo
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.Filter">
            <summary>
            Filters the results in the list to the ones whose DisplayText match this.filterSpan
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet.SelectBestMatch">
            <summary>
            Selects the best match that will be the one whose displayText contains the filter closest
            to the beginning of DisplayText
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSource">
            <summary>
            Starter for an intellisense session.
            The AugmentCompletionSession is the only useful method of this class.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSource.disposed">
            <summary>
            Used un Dispose()
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSource.textBuffer">
            <summary>
            textBuffer where intellisense is starting
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSource.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the ISECompletionSource class.
            </summary>
            <param name="textBuffer">the buffer needing the ICompletionSource</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSource.AugmentCompletionSession(Microsoft.VisualStudio.Language.Intellisense.ICompletionSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.CompletionSet})">
            <summary>
            Adds an ISECompletionSet to <paramref name="completionSets"/>.
            </summary>
            <param name="session">The ICompletionSession which is ignored</param>
            <param name="completionSets">The collection to add the ISECompletionSet</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSource.Dispose">
            <summary>
            Disposes of this class
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSourceProvider">
            <summary>
            Provider for the ICompletionSource used to start intellisense
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSourceProvider.TryCreateCompletionSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            returns a new ICompletionSource for the given <paramref name="textBuffer"/>.
            </summary>
            <param name="textBuffer">the buffer in need of an ICompletionSource</param>
            <returns>a new ICompletionSource for the given <paramref name="textBuffer"/></returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISEIntellisenseCompletionPresenterStyle">
            <summary>
            Establishes the FontSize for intellisense as a proportion of FontSize and Zoom
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEIntellisenseCompletionPresenterStyle.DefaultCompletionTextBackground">
            <summary>
            This is the default background color for completion text, used
            when high contrast mode is not active to ensure the proper contrast
            ratio.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEIntellisenseCompletionPresenterStyle.FontSizeScale">
            <summary>
            This is the number we multiply the font size by so that it is possible to read the text at the default font size and default zoom
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEIntellisenseCompletionPresenterStyle.typeface">
            <summary>
            The current intellisense typeface
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEIntellisenseCompletionPresenterStyle.CompletionTextRunProperties">
            <summary>
            Gets the font for the non selected completions
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEIntellisenseCompletionPresenterStyle.SelectionBackgroundBrush">
            <summary>
            Gets the selection background brush that should contrast with SelectionTextRunProperties 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEIntellisenseCompletionPresenterStyle.SelectionTextRunProperties">
            <summary>
            Gets the font for the selected completions
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEIntellisenseCompletionPresenterStyle.TooltipTextRunProperties">
            <summary>
            Gets the font for intellisense tooltips
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEIntellisenseCompletionPresenterStyle.Size">
            <summary>
            Gets the font size returned for all fonts
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEIntellisenseCompletionPresenterStyle.FontTypeface">
            <summary>
            Gets the TypeFace for all fonts
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier">
            <summary>
            Basic class for all classifier that will always add the classifier as a property to the buffer
            and that will expose a mechanism to force reclassification
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.EditorCategories">
            <summary>
            The two categories for script editors used to set classification type font colors in those categories
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.scriptGapsTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.ps1HighContrastDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.scriptGaps">
            <summary>
            Contains the IClassificationType added above to be used for unknown tokens and for gaps between tokens.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.ps1HighContrast">
            <summary>
            Contains the IClassificationType added above used for high contrast.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.buffer">
            <summary>
            The editor buffer
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the ISEClassifier class
            </summary>
            <param name="buffer">editor buffer</param>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.ClassificationChanged">
            <summary>
            Event used to force reclassification
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.ScriptGaps">
            <summary>
            Gets the IClassificationType used for unknown tokens and for parts of the span
            with no corresponding token.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.PS1HighContrast">
            <summary>
            Gets the IClassificationType used for high contrast
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.Buffer">
            <summary>
            Gets the editor buffer
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.GetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Called to update the buffer classifier property and then to call the virtual GetClassificationSpans
            </summary>
            <param name="span">span to get classifications from</param>
            <returns>The return from VirtualGetClassificationSpans</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.SetScriptGapTextFontColor(System.Windows.Media.Color)">
            <summary>
            Sets the font color for gaps in the editor
            </summary>
            <param name="color">Color to set the gap classification foreground color to</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.SetHighContrastAndGapTextFontColor">
            <summary>
            Called when toggling to high contrast or loading the editor to set the color for
            the high contrast classification and the gap classification
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.SetClassificationTypeColors``1(System.Collections.Generic.IDictionary{``0,System.Windows.Media.Color},System.Collections.Generic.IDictionary{``0,System.Windows.Media.Color},System.String,System.String)">
            <summary>
            Called to set the colors for the tokens according to the tokencolors passed.
            </summary>
            <param name="tokenColors">Collection of token colors.</param>
            <param name="defaultTokenColors">Collection of all default colors used to clear the brushes not specified in <paramref name="tokenColors"/></param>
            <param name="prefix">classification prefix</param>
            <param name="sufix">classification sufix</param>
            <typeparam name="T">Enumeration to be used as the dictionary key</typeparam>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.SetFontColor(System.Windows.Media.Color,Microsoft.VisualStudio.Text.Classification.IClassificationType,System.String)">
            <summary>
            Called to set the Text font color.
            </summary>
            <param name="color">text color to set</param>
            <param name="classificationType">classification type to set the font color to</param>
            <param name="category">category in which to set the font color</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.GetTextProperties(Microsoft.VisualStudio.Text.Classification.IClassificationType,System.String)">
            <summary>
            Returns the text properties for the given classification
            </summary>
            <param name="type">classification type</param>
            <param name="category">The category to get tje text properties from</param>
            <returns>the text properties for the given classification</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.OnClassificationChanged(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Callled  to trigger ClassificationChanged
            </summary>
            <param name="notificationSpan">span to reclasify</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.VirtualGetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Gets the classifications for the span
            </summary>
            <param name="span">span to get classifications from</param>
            <returns>the classifications for the span</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEClassifier.UpdateClassifierBufferProperty">
            <summary>
            Updates the buffer classifier property used by ISEEditor's reclassification
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISEZoomMouseProvider">
            <summary>
            Mouse processor for Zoom
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEZoomMouseProvider.GetAssociatedProcessor(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Gets a new processor for the text view
            </summary>
            <param name="wpfTextView">the view we need a mouse processor for</param>
            <returns>the new processor for the text view</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISEZoomMouseProcessor">
            <summary>
            Mouse processor for Zoom and for console clicking going to input region
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEZoomMouseProcessor.wpfTextView">
            <summary>
            Text view this processor is for
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEZoomMouseProcessor.#ctor(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Initializes a new instance of the ISEZoomMouseProcessor class
            </summary>
            <param name="wpfTextView">view for this mouse processor</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEZoomMouseProcessor.PreprocessMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Responds to a click to set the caret to input region of console if click came from outside the console
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEZoomMouseProcessor.PreprocessMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Processes the mouse wheel to zoom in/out
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.LineTransformSource">
            <summary>
            Works arround an issue with the editor displaying the first line of picels for characters like f in some font sizes
            in the Lucida Console font name by adding one extra pixel to the first line
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.LineTransformSource.nonTransform">
            <summary>
            This is the equivalent of a non-transform, no line on top or bottom and 1:1 scale
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.LineTransformSource.oneLineOnTopTransform">
            <summary>
            Transform with one line on top
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.LineTransformSource.#ctor">
            <summary>
            Initializes a new instance of the LineTransformSource class
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.LineTransformSource.GetLineTransform(Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
            <summary>
            Works arround an issue with the editor displaying the first line of picels for characters like f in some font sizes
            in the Lucida Console font name by adding one extra pixel to the first line
            </summary>
            <param name="line">The line to apply the transform to</param>
            <param name="yPosition">Current canvas position</param>
            <param name="placement">The relative position of the transform</param>
            <returns>A 1 line on top transform for the first line and no transform for other lines</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.LineTransformSourceProvider">
            <summary>
            Provider for the LineTransformSource used in all editors, hence the base text contentType
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.LineTransformSourceProvider.Create(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Gets the LineTransformSource used in all editors
            </summary>
            <param name="textView">the editor's TextView</param>
            <returns>returns the LineTransformSource used in all editors</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NonScriptClassifier">
            <summary>
            Classifies non script text in the ScriptPane.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NonScriptClassifier.getContentTypeExtension">
            <summary>
            Declares a new content type called TextOutput, derived from text and used for the classifications
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NonScriptClassifier.nonScriptExtension">
            <summary> classification type </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NonScriptClassifier.nonScript">
            <summary>
            contains the IClassificationType added above.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NonScriptClassifier.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the NonScriptClassifier class.
            </summary>
            <param name="textBuffer">text buffer corresponding to the classifier</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.NonScriptClassifier.NonScript">
            <summary>
            Gets the IClassificationType returned in all classifications of this classifier
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NonScriptClassifier.VirtualGetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Given a SnapshotSpan, this method returns a list of ClassificationSpans that we want
            to classify in the given SnapshotSpan 
            </summary>
            <param name="span">span to classify</param>
            <returns>classification (ClassificationSpans)</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NonScriptClassifierProvider">
            <summary>
            Provides the IClassifier for non script text in the ScriptPane
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NonScriptClassifierProvider.GetClassifier(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Provides the IClassifier for the output editor
            </summary>
            <param name="textBuffer">text buffer we're classifying</param>
            <returns>the IClassifier for PowerShell syntax highlighting</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.OutputColorSpan">
            <summary>
            Span and its background/foreground colors
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OutputColorSpan.span">
            <summary>
            span containing the color
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OutputColorSpan.classificationType">
            <summary>
            The classification type to be used for the span.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OutputColorSpan.#ctor(Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Initializes a new instance of the OutputColorSpan class.
            </summary>
            <param name="span">span the colors correspond to</param>
            <param name="classificationType">The classification type to be used.</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.OutputColorSpan.Span">
            <summary>
            Gets the span.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.OutputColorSpan.ClassificationType">
            <summary>
            Gets the classification type to be used for the span.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifier">
            <summary>
            Classifies output text
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifier.getContentTypeExtension">
            <summary>
            Declares a new content type called TextOutput, derived from text and used for the classifications
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifier.ps1ConsoleGapsDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifier.consoleGaps">
            <summary>
            the classification type used in the output to fill gaps between classifications
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifier.outputClassificationTypes">
            <summary>
            Map of all cached classification types used in the output
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifier.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the OutputClassifier class.
            </summary>
            <param name="textBuffer">text buffer corresponding to the classifier</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifier.ConsoleGaps">
            <summary>
            Gets the classification type used in the output to fill gaps between classifications
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifier.GetColorClassificationType(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Gets a cached classification type for given colors or adds one to the cache and returns it if not cached yet
            </summary>
            <param name="foreground">foreground color</param>
            <param name="background">background color</param>
            <param name="hostBackground">output background color</param>
            <returns>a cached classification type for given colors or adds one to the cache and returns it if not cached yet</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifier.SetConsoleGapTextFontColor(System.Windows.Media.Color)">
            <summary>
            Sets the font color for gaps in the output
            </summary>
            <param name="color">Color to set the gap classification foreground color to</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifier.VirtualGetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Given a SnapshotSpan, this method returns a list of ClassificationSpans that we want
            to classify in the given SnapshotSpan 
            </summary>
            <param name="span">span to classify</param>
            <returns>classification (ClassificationSpans)</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifierProvider">
            <summary>
            Provides the IClassifier for the output editor
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OutputClassifierProvider.GetClassifier(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Provides the IClassifier for the output editor
            </summary>
            <param name="textBuffer">text buffer we're classifying</param>
            <returns>the IClassifier for PowerShell syntax highlighting</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger">
            <summary>
            Tags matching braces/quotes and other paired characters
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the PowerShellBraceMatchingTagger class
            </summary>
            <param name="view">the editor view</param>
            <param name="sourceBuffer">the editor buffer</param>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.TagsChanged">
            <summary>
            Event that will force retagging a span
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.View">
            <summary>
            Gets or sets the editor view
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.Buffer">
            <summary>
            Gets or sets the editor buffer
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.CurrentChar">
            <summary>
            Gets or sets the current caret character
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns the brace matching tags for the giving span
            </summary>
            <param name="spans">span to retrieve tags for</param>
            <returns>the brace matching tags for the giving span</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.OnTagsChanged(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Triggers the event that will force retagging a span
            </summary>
            <param name="span">span to tag</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.GetSpanForPosition(System.Int32)">
            <summary>
            Gets a span starting at position with length 1
            </summary>
            <param name="position">span start position</param>
            <returns>a span starting at position with length 1</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.ViewLayoutChanged(System.Object,Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs)">
            <summary>
            Called when the caret moves from a PageDn/PgUp, for instance to update the caret position
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.CaretPositionChanged(System.Object,Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs)">
            <summary>
            Called when the caret position changes to update the caret position
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.UpdateAtCaretPosition(Microsoft.VisualStudio.Text.Editor.CaretPosition)">
            <summary>
            Called when the caret position changes to set this.CurrentChar and
            to force the retagging for brace matches
            </summary>
            <param name="caretPosition">new caret position</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.Buffer_ContentTypeChanged(System.Object,Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs)">
            <summary>
            Removes the instance of this object added in the constructor in case the content changes
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.BraceHighlightMarkerDefinition">
            <summary>
            Class used to define the color for brace matching so that it is visible in both dark and light backgrounds
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTagger.BraceHighlightMarkerDefinition.#ctor">
            <summary>
            Initializes a new instance of the BraceHighlightMarkerDefinition class
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTaggerProvider">
            <summary>
            Provides the PowerShellBraceMatchingTagger for the "powershell" content
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellBraceMatchingTaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates the PowerShellBraceMatchingTagger for the "powershell" content
            </summary>
            <typeparam name="T">type of tagger</typeparam>
            <param name="textView">editor TextView</param>
            <param name="buffer">editor Buffer</param>
            <returns>the PowerShellBraceMatchingTagger for the "powershell" content</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier">
            <summary>
            PowerShellClassifier provides the bridge between PowerShell's Tokenize() API
            and the text editor's text coloring system.
            It is given the buffer it will classify as a constructor parameter; thereafter,
            each time the buffer is changed, this classifier will tokenize the contents, and
            map the appropriate classifier (see Productions and Consumptions region) to the
            spans being updated by the editor.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.FromPointsToPixelsMultiplyer">
            <summary>
            the rendering size is in device independent pixels, we need to convert it from points
            pt = 1 / 72 inch
            dip = 1 / 96 inch
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.characterWidth">
            <summary>
            Character Width in the current font
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.ps1TypeDefinition">
            <summary>
            Declares a new content type called powershell, derived from text and used for the classification
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.attributeTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.commandFormatTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.commandArgumentTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.commandParameterTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.commentTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.groupEndTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.groupStartTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.keywordTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.lineContinuationTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.loopLabelTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.memberTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.newLineTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.numberTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.operatorTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.positionTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.statementSeparatorTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.stringTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.typeTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.variableTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.attributeTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.commandFormatTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.commandArgumentTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.commandParameterTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.commentTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.groupEndTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.groupStartTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.keywordTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.lineContinuationTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.loopLabelTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.memberTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.newLineTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.numberTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.operatorTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.positionTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.statementSeparatorTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.stringTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.typeTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.variableTypeDefinitionConsole">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.tokenInBreakpoinTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.tokenClassificationTypeMap">
            <summary>
            map of tokens into classification types for the script
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.consoleTokenClassificationTypeMap">
            <summary>
            map of tokens into classification types for the console
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.tokenInBreakpointClassification">
            <summary>
            classification for tokens within a breakpoint
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.#cctor">
            <summary>
            Initializes static members of the PowerShellClassifier class
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the PowerShellClassifier class.
            </summary>
            <param name="bufferToClassify">buffer to classify</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.ClassifyTokenInBreakpointDelegate">
            <summary>
            Delegate that classifies the given token if it is within a breakpoint span
            </summary>
            <param name="snapshot">snapshot being classified</param>
            <param name="tokenInBreakpointClassification">classification for breakpoints</param>
            <param name="classifications">Classifications for the token are added to this list</param>
            <param name="breakpointSpans">Spans for current breakpoints</param>
            <param name="classification">The token classification</param>
            <returns>True if the token was classified, or false if the token is not within a breakpoint span</returns>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.CharacterWidth">
            <summary>
            Gets the Character Width in the current font
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.FillClassificationGap(System.Collections.Generic.List{Microsoft.VisualStudio.Text.Classification.ClassificationSpan},System.Nullable{Microsoft.VisualStudio.Text.Span},Microsoft.VisualStudio.Text.Span,Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Fills the gaps between classifications
            </summary>
            <param name="classifications">The list of all classifications where we will be adding the filler</param>
            <param name="lastClassificationSpan">The span of the last ClassificationSpan added to classifications</param>
            <param name="newClassificationSpan">The new classification span about to be added</param>
            <param name="currentSnapshot">The buffer snapshot</param>
            <param name="classificationType">The classification type used to fill the gap</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.FillBeginningAndEnd(Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Generic.List{Microsoft.VisualStudio.Text.Classification.ClassificationSpan},Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Fills the gaps before the first classification and after the last
            </summary>
            <param name="span">The complete span being classified</param>
            <param name="classifications">The list of all classifications</param>
            <param name="currentSnapshot">The buffer snapshot</param>
            <param name="classificationType">The classification type used to fill the gap ant beginning and end</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.SetTokenColors(System.Collections.Generic.IDictionary{System.Management.Automation.PSTokenType,System.Windows.Media.Color},System.Collections.Generic.IDictionary{System.Management.Automation.PSTokenType,System.Windows.Media.Color},System.String)">
            <summary>
            Called to set the colors for the tokens according to the tokencolors passed.
            </summary>
            <param name="tokenColors">Collection of token colors.</param>
            <param name="defaultTokenColors">Collection of all default colors used to clear the brushes not specified in <paramref name="tokenColors"/></param>
            <param name="suffix">siffix for the classification type</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.UpdateEditorColors(System.Boolean)">
            <summary>
            Updates editor colors based on whether the user has activated a high contrast theme,
            </summary>
            <param name="isHighContrast">If true, indicates that high contrast colors should be used.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.SetMarkerColors(Microsoft.VisualStudio.Text.Classification.IEditorFormatMap,System.String,System.Windows.Media.Color,System.Windows.Media.Color,System.Double,System.Windows.Media.DashStyle)">
            <summary>
            Sets the background and border styles for a given marker in the editor.
            </summary>
            <param name="editorFormatMap">The IEditorFormatMap where marker definitions can be found.</param>
            <param name="markerName">The name of the marker to change.</param>
            <param name="backgroundColor">The marker's new background color.</param>
            <param name="borderColor">The marker's new border color.</param>
            <param name="borderThickness">The marker's new border thickness.</param>
            <param name="dashStyle">The marker broder's new dash style.</param>    
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.UpdateCharacterWidth(Microsoft.VisualStudio.Text.Formatting.TextFormattingRunProperties)">
            <summary>
            Update the character width based on M of the current font.
            </summary>
            <param name="textProperties">Object containing font information.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.GetClassificationType(System.Management.Automation.PSTokenType,System.Boolean)">
            <summary>
            Gets the classification type corresponding to <paramref name="tokenType"/>
            </summary>
            <param name="tokenType">token we want the classification from</param>
            <param name="useConsoleTokens">true if we should use console classifications</param>
            <returns>he classification type corresponding to <paramref name="tokenType"/></returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.AddTokenClassifications(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.SnapshotSpan,System.Collections.Generic.List{Microsoft.VisualStudio.Text.Classification.ClassificationSpan},System.Nullable{Microsoft.VisualStudio.Text.Span},Microsoft.VisualStudio.Text.Classification.IClassificationType,Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.ClassifyTokenInBreakpointDelegate,Microsoft.VisualStudio.Text.Classification.IClassificationType,System.Collections.Generic.List{Microsoft.VisualStudio.Text.Span})">
            <summary>
            Adds the classifications corresponding to the PSTokenSpans
            </summary>
            <param name="buffer">text buffer</param>
            <param name="span">span being classified</param>
            <param name="classifications">list to add classifications to</param>
            <param name="lastClassificationSpan">
            Last classification added. Thishelps filling the space gaps between tokens with a classification
            so that the script editors are not affected by a change in the "Text" classification 
            type font name
            </param>
            <param name="gapType">
            Classification type for gaps
            </param>
            <param name="classifyTokenInBreakpointDelegate">
            Delegate used to deal with adding classifications in breakpoints.
            The OutptClassifier will pass null for this parameter
            </param>
            <param name="tokenInBreakpointClassification">
            classification used in <paramref name="classifyTokenInBreakpointDelegate"/> for breakpoints
            The OutptClassifier will pass null for this parameter
            </param>
            <param name="breakpointSpans">
            List of breakpoints used in <paramref name="classifyTokenInBreakpointDelegate"/>
            The OutptClassifier will pass null for this parameter
            </param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.VirtualGetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Given a SnapshotSpan, this method returns a list of ClassificationSpans that we want
            to classify in the given SnapshotSpan 
            </summary>
            <param name="span">span to classify</param>
            <returns>classification (ClassificationSpans)</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.ClassifyTokenInBreakpoint(Microsoft.VisualStudio.Text.ITextSnapshot,Microsoft.VisualStudio.Text.Classification.IClassificationType,System.Collections.Generic.List{Microsoft.VisualStudio.Text.Classification.ClassificationSpan},System.Collections.Generic.List{Microsoft.VisualStudio.Text.Span},Microsoft.VisualStudio.Text.Classification.ClassificationSpan)">
            <summary>
            Classifies the given token if it is within a breakpoint span
            </summary>
            <param name="snapshot">snapshot being classified</param>
            <param name="tokenInBreakpointClassification">classification for breakpoints</param>
            <param name="classifications">Classifications for the token are added to this list</param>
            <param name="breakpointSpans">Spans for current breakpoints</param>
            <param name="classification">The token classification</param>
            <returns>True if the token was classified, or false if the token is not within a breakpoint span</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.GetBreakpointSpans(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Returns the breakpoints within the given span
            </summary>
            <param name="span">the span to check</param>
            <returns>spans for the breakpoints</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.BreakpointMarkerDefinition">
            <summary>
            Used to define the color for a breakpoint line
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifier.BreakpointMarkerDefinition.#ctor">
            <summary>
            Initializes a new instance of the BreakpointMarkerDefinition class
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifierProvider">
            <summary>
            Provides the IClassifier for PowerShell syntax highlighting
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellClassifierProvider.GetClassifier(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Provides the IClassifier for PowerShell syntax highlighting
            </summary>
            <param name="textBuffer">text buffer we're classifying</param>
            <returns>the IClassifier for PowerShell syntax highlighting</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellErrorTagger">
            <summary>
            Provides the error tags for the "powershell" content
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellErrorTagger.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the PowerShellErrorTagger class
            </summary>
            <param name="view">the editor view</param>
            <param name="sourceBuffer">the editor buffer</param>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellErrorTagger.TagsChanged">
            <summary>
            Event that will force retagging a span
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellErrorTagger.View">
            <summary>
            Gets or sets the editor view
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellErrorTagger.Buffer">
            <summary>
            Gets or sets the editor buffer
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellErrorTagger.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns the error tags for the giving span
            </summary>
            <param name="spans">span to retrieve tags for</param>
            <returns>the error tags for the giving span</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellErrorTagger.OnTagsChanged(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Triggers the event that will force retagging a span
            </summary>
            <param name="span">span to tag</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellErrorTagger.Buffer_ContentTypeChanged(System.Object,Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs)">
            <summary>
            Removes the instance of this object added in the constructor in case the content changes
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellErrorTaggerProvider">
            <summary>
            Provides the PowerShellErrorTagger for the "powershell" content
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellErrorTaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates the PowerShellErrorTagger for the "powershell" content
            </summary>
            <typeparam name="T">type of tagger</typeparam>
            <param name="textView">editor TextView</param>
            <param name="buffer">editor Buffer</param>
            <returns>the PowerShellErrorTagger for the "powershell" content</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellOutliningTagger">
            <summary>
            Provides the outline tags for the "powershell" content
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellOutliningTagger.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the PowerShellOutliningTagger class
            </summary>
            <param name="sourceBuffer">the editor buffer</param>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellOutliningTagger.TagsChanged">
            <summary>
            Event that will force retagging a span
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellOutliningTagger.Buffer">
            <summary>
            Gets or sets the editor buffer
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellOutliningTagger.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns the outline tags for the giving span
            </summary>
            <param name="spans">span to retrieve tags for</param>
            <returns>the outline tags for the giving span</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellOutliningTagger.GetCachedTags(Microsoft.VisualStudio.Text.ITextBuffer,System.String,System.String)">
            <summary>
            Helper to GetTags that allows the tagger to return the previous set of tags untill they change.
            All of the other taggers work something like this with the help of the tokenization service:
              1 - When the tokenization is starting, all tags are removed (for instance, there will be no colors)
              2 - When the tokenization is done, the OnTagsChanged method is called causing the GetTags to be called again
              3 - GetTags will then retrieve the tokenization information and return the latest tags
            For regions, the steps below don't work. The outlining manager keeps track of collapsed regions and step #1
            , which removes all regions, causes the following trouble in the tokenizer: An assertion is triggered informing
            the "tagger has bisbehaved" and pottentially, collapsed regions are expanded and loose their plus/minus sign control
            that allows them to be collapsed.
            Becausae of this tracking for collapsed regions we need a different approach:
              1 - When the tokenization starts, GetTags will still return the previous outlining regions.
              2 - Once the tokenization is done, OnTagsChanged is called to return the new set of regions.
            The way this is achieved is for the method below to cache the returned tags in a buffer property 
            named <paramref name="tagPropertyName"/>. When the tokenization is done, the new tag information is placed in
            <paramref name="tagInformationPropertyName"/> and <paramref name="tagPropertyName"/> is deleted so that when this
            method is called again (when OnTagsChanged is called), the cache is refreshed.
            </summary>
            <param name="buffer">the editor buffer</param>
            <param name="tagInformationPropertyName">name of the property with tag information</param>
            <param name="tagPropertyName">name of the property with the last tags returned from this method</param>
            <returns>
            The tags corresponding to the tokenized tag information
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellOutliningTagger.OnTagsChanged(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Triggers the event that will force retagging a span
            </summary>
            <param name="span">span to tag</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellOutliningTagger.Buffer_ContentTypeChanged(System.Object,Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs)">
            <summary>
            Removes the instance of this object added in the constructor in case the content changes
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellOutliningTaggerProvider">
            <summary>
            Provides the PowerShellOutliningTagger for the "powershell" content
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellOutliningTaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates the PowerShellOutliningTagger for the "powershell" content
            </summary>
            <typeparam name="T">type of tagger</typeparam>
            <param name="buffer">editor Buffer</param>
            <returns>the PowerShellOutliningTagger for the "powershell" content</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.SmartIndent">
            <summary>
            Provides an indentation provider with the same number of spaces as the previous line
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.SmartIndent.view">
            <summary>
            view associated with this object
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.SmartIndent.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Initializes a new instance of the SmartIndent class.
            </summary>
            <param name="view">view associated with this object</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.SmartIndent.GetDesiredIndentation(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Returns the same number of spaces from the previous line, if there is a previous line
            </summary>
            <param name="line">current line</param>
            <returns>the same number of spaces from the previous line, if there is a previous line</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.SmartIndent.Dispose">
            <summary>
            Part of the public interface, but there is nothing to dispose specifically in this implementation
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.SmartIndentProvider">
            <summary>
            Provides an ISmartIndent implementation for all files in powershell ISE (ContentType("text"))
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.SmartIndentProvider.CreateSmartIndent(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Provides an ISmartIndent implementation for all files in powershell ISE (ContentType("text"))
            </summary>
            <param name="textView">The view associated with the ISmartIndent</param>
            <returns>An ISmartIndent implementation for all files in powershell ISE (ContentType("text"))</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetCompletionSource">
            <summary>
            One instance of this serves the entire app, as the display of snippets is not dependent
            on context. This is created (once) and served to the editor through the ISESnippetCompletionSourceProvider.
            The editor calls AugmentCompletionSession in this class for each session to get the completions populated.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetCompletionSource.completionComparer">
            <summary>
            Comparer for completions to get them sorted by display name
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetCompletionSource.AugmentCompletionSession(Microsoft.VisualStudio.Language.Intellisense.ICompletionSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.CompletionSet})">
            <summary>
            This will be called from within the editor for each completion session, and gives
            us the opportunity to populate the list of completion sets with ours. We should 
            populate only if the session is a Snippets session and not an intellisense session,
            and we determine that by looking for the "SessionOrigin" property
            </summary>
            <param name="session">The completion session to be augmented</param>
            <param name="completionSets">The target list to add completion sets into</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetCompletionSource.Dispose">
            <summary>
            This will be called just before GC. Nothing we need to do, as we do not maintain any system handles.
            There is nothing at class level that needs careful disposal
            The lists of Snippet Completions are just a reference to memory we do not need anymore
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetCompletionSource.CompletionComparer">
            <summary>
            This comparer is used to sort the completion itemsas per their display names 
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetCompletionSource.CompletionComparer.Compare(Microsoft.VisualStudio.Language.Intellisense.Completion,Microsoft.VisualStudio.Language.Intellisense.Completion)">
            <summary>
            Comparer to sort snippets by display name
            </summary>
            <param name="leftCompletion">the first completion</param>
            <param name="rightCompletion">the completion to compare against</param>
            <returns>0/-/+ value depending on which completion is greater</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetCompletionSourceProvider">
            <summary>
            This is a MEF exported class that is imported by the editor to provide completion functionality.
            The editor will call the TryCreateCompletionSource method and register the completion source object
            provided by it. For each completion session, the editor will give all registered sources a chance to
            add to the CompletionSet List by calling their AugmentCompletionSession(..)
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetCompletionSourceProvider.iseSnippetCompletionSource">
            <summary>
            This is the only snippet completion source in the system. We show the same snippet source object
            through the app though the actual completions shown are stored in the tab's SnippetCollection.
            Snippets are not context dependent, so there is no reason to tie the CompletionSource to the 
            textBuffer.. it is the same one across all text buffers
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetCompletionSourceProvider.TryCreateCompletionSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Will be called from editor
            </summary>
            <param name="textBuffer">the text buffer from the editor</param>
            <returns>The completion source</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets">
            <summary>
            Contains default harcoded snippets that are always available unless the .options.ShowDefaultSnippets is set to $false.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForIfSnippet">
            <summary>
            Code for harcoded snippet for if Condition
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForIf">
            <summary>
            A harcoded snippet for if Condition
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForIfElseSnippet">
            <summary>
            Code for harcoded snippet for if..else Condition
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForIfElse">
            <summary>
            A harcoded snippet for if else
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForForLoopSnippet">
            <summary>
            Code for harcoded snippet for a for loop
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForForLoop">
            <summary>
            A harcoded snippet for a for loop
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForForEachSnippet">
            <summary>
            Code for harcoded snippet for a foreach loop
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForForeach">
            <summary>
            A harcoded snippet for a foreach loop
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForFunction2ParamSnippet">
            <summary>
            Code for harcoded snippet for a function with 2 parameters
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForFunction2Param">
            <summary>
            A harcoded snippet for a function with 2 params
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForFunctionAdvancedSnippet">
            <summary>
            Code for harcoded snippet for an advanced function
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForFunctionAdvanced">
            <summary>
            A harcoded snippet for a advanced function (ScriptCmdlet) with some attributes and, inline help fields and Begin,Process,End blocks
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForFunctionAdvancedBigSnippet">
            <summary>
            Code for harcoded snippet for an advanced and big function with all bells and whistles
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForFunctionAdvancedBig">
            <summary>
            A harcoded snippet for a advanced function (ScriptCmdlet) with all attributes and all inline help fields
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForSwitchSnippet">
            <summary>
            Code for harcoded snippet for a switch statement
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForSwitch">
            <summary>
            A harcoded snippet for a switch statement
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForWhileSnippet">
            <summary>
            Code for harcoded snippet for a while statement
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForWhile">
            <summary>
            A harcoded snippet for a while loop
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForDoWhileSnippet">
            <summary>
            Code for harcoded snippet for a do-while loop
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForDoWhile">
            <summary>
            A harcoded snippet for a do-while loop
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForDoUntilSnippet">
            <summary>
            Code for harcoded snippet for a do-until loop
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForDoUntil">
            <summary>
            A harcoded snippet for a do-until loop
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForTryCatchFinallySnippet">
            <summary>
            Code for harcoded snippet for a try-catch-finally block
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForTryCatchFinally">
            <summary>
            A harcoded snippet for a try-catch-finally block
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForTryFinallySnippet">
            <summary>
            Code for harcoded snippet for a try-finally block
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForTryFinally">
            <summary>
            A harcoded snippet for try-finally exception handling
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CommentBlockSnippet">
            <summary>
            Code for harcoded snippet for a comment block
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForComment">
            <summary>
            A harcoded snippet for a comment block
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.WorkflowInlineScriptSnippetCode">
            <summary>
            The code segment for workflow inline script
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.workflowInlineScriptSnippet">
            <summary>
            A harcoded snippet for a workflow inline script
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.WorkflowParallelSnippetCode">
            <summary>
            The code for parallel workflow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.workflowParallelSnippet">
            <summary>
            A hardcoded snippet for parallel workflow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.WorkflowSequenceSnippetCode">
            <summary>
            The code for sequence workflow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.workflowSequenceSnippet">
            <summary>
            A hardcoded snippet for sequence workflow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.WorkflowForEachParallelSnippetCode">
            <summary>
            The code for sequence workflow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.workflowForEachParallelSnippet">
            <summary>
            A hardcoded snippet for sequence workflow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.WorkflowSimpleCode">
            <summary>
            code for simple workflow snippet
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.workflowSimpleCodeSnippet">
            <summary>
            snippet for simple workflow snippet
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.WorkflowAdvancedCode">
            <summary>
            code for advanced workflow snippet
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.workflowAdvancedCodeSnippet">
            <summary>
            snippet for advanced workflow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForDSCResourceProvider">
            <summary>
            A harcoded snippet for a DSC Resource Provider (Simple)
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForDSCResourceProviderSnippet">
            <summary>
            Code for harcoded snippet for DSC Resource Provider (Simple)
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForDSCConfiguration">
            <summary>
            A harcoded snippet for a DSC Configuration (Simple)
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForDSCConfigurationSnippet">
            <summary>
            Code for harcoded snippet for DSC Configuration (Simple)
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForDSCConfigurationWithConfigurationData">
            <summary>
            A harcoded snippet for a DSC Configuration (w/ConfigurationData)
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForDSCConfigurationWithConfigurationDataSnippet">
            <summary>
            Code for harcoded snippet for DSC Configuration (Simple)
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForDSCConfigurationData">
            <summary>
            A harcoded snippet for a DSC Configuration Data
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.CodeForDSCConfigurationDataSnippet">
            <summary>
            Code for harcoded snippet for DSC Configuration (Simple)
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForDSCResourceWithClass">
            <summary>
            A hardcoded snippet for a DSC resource with class
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippetForClass">
            <summary>
            A hardcoded snippet for a class
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.defaultSnippets">
            <summary>
            Default snippets hardcoded below
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.Snippets">
            <summary>
            Gets default snippets
            This is the only method called by the completion source to get the available default snippets
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.GetFromDisplayName(System.String)">
            <summary>
            Provided largely to facilitate unit tests
            </summary>
            <param name="displayName">Display name</param>
            <returns>the snippet with this name</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.InitializeDefaultSnippets">
            <summary>
            This is called on application load to assemble the strings into a list.
            Not expected to be time consuming because they are harcoded strings in the code,
            not on external disk files.
            </summary>
            <returns>The default snippets as strings containing full XML</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetDefaultSnippets.ReplaceResourceMarkers(System.String)">
            <summary>
            Replaces resource markers in <paramref name="src"/> with the corresponding resource string
            </summary>
            <param name="src">the string to replace resource markers</param>
            <returns>the string with resource markers replaced</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager">
            <summary>
            Manages Snippet operations.
            It is currently a thin static wrapper over the functionality provided by the Completion broker,
            in addition to keeping track of the active session and selected completion.
            It can be static today because we never have more than one snippet session at a point in time
            in the whole app. If that were to change, we would make this non-static and have one instance
            of this for every snippet session
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.activeSession">
            <summary>
            The current active session, if any
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.canFilter">
            <summary>
            True if the current active session is not being committed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.selectedSnippet">
            <summary>
            Selected snippet
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.insertSpan">
            <summary>
            Tracking span for the insertion from the currently selected snippet 
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.eventHandlerSessionCommitted">
            <summary>
            Session Committed Event Handler hooked to all sessions
            The handler objects are created once and used throughout 
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.eventHandlerSessionDismissed">
            <summary>
            Session Dismissed Event Handler hooked to all sessions
            The handler objects are created once and used throughout 
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.eventHandlerSelectionChanged">
            <summary>
            Selection Changed Event Handler hooked to all Completion sets in all sessions
            The handler objects are created once and used throughout 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.ActiveSession">
            <summary>
            Gets the Active session
            Exposing it as an internal to be able to unit test easily
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.ShowCompletion(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            This initiates a completion session and shows a completion drop-down visually.
            It is called from the menu as well as from the keyboard shortcut.
            In both cases, it is invoked from ISEEditor.
            </summary>
            <param name="view">The text view in which completion is triggered</param>
            <returns>
            true if the Snippet drop-down has been shown and the key event, if any, may be deemed handled.
            false if the snippets were not shown for any reason and the key event, if any should be relayed to other handlers.
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.CommitCompletion">
            <summary>
            Commits the current completion
            </summary>
            <returns>true if the key (Tab/ Enter) may be deemed handled</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.Filter">
            <summary>
            This gets called when user types chars after bringing up the snippets pane
            to filter the result. The activeSession.Filter() in turn causes the editor to
            call the .Filter() of each completion set on display at that time
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.GetIndentationPrependText(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Calculates and returns the blank string of required length
            to produce indentation based on the current caret position
            </summary>
            <param name="startPoint">Current caret position where the completion session is started</param>
            <returns>A blank string to be prepended to each line</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.OnActiveSessionCommitted(System.Object,System.EventArgs)">
            <summary>
            Handler hooked when the session is initiated.
            This is called when the session is committed by TAB or ENTER
            </summary>
            <param name="sender">The event sender, normally the Session</param>
            <param name="e">Event argument that can be used to find how the session was committed</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.OnActiveSessionDismissed(System.Object,System.EventArgs)">
            <summary>
            Handler hooked when the session is initiated.
            This is called when the session is dismissed by ESC or other typing, or change of focus.. or any other way
            </summary>
            <param name="sender">The event sender, normally the Session</param>
            <param name="e">Event argument that can be used to find how the session was committed</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISESnippetSessionManager.SelectedCompletionSet_SelectionStatusChanged(System.Object,Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs{Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus})">
            <summary>
            Handler hooked just after the session is initiated.
            This is called when the selected completion changes, and we use it to keep track of the selected snippet to
            position the caret accordingly if it the session ended with this selection
            </summary>
            <param name="sender">The event sender, normally the CompletionSet</param>
            <param name="e">Event argument</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.OutputControl">
            <summary>
            Interaction logic for OutputControl.xaml
            </summary>
            <summary>
            OutputControl
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OutputControl.ContentProperty">
            <summary>
            Content associated with this control
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OutputControl.#ctor">
            <summary>
            Initializes a new instance of the OutputControl class.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.OutputControl.Content">
            <summary>
            Gets or sets the control content
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OutputControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl">
            <summary>
            Contents of a Runsapce Tab containing the InputAndOutputControl and an EditorTabControl
            </summary>
            <summary>
            RunspaceControl
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl.#ctor">
            <summary>
            Initializes a new instance of the RunspaceControl class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl.SelectionChanged(Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection,Microsoft.PowerShell.Host.ISE.ISEAddOnTool)">
            <summary>
            Called when the selection changes in the GUI to set the corresponding property in the object model
            </summary>
            <param name="collection">collection containing the new selected tool</param>
            <param name="newSelection">new selected tool</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl.RowOrColumn_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the editor or console change sizes to store 
            the widths and heights of rows and columns. The sizes are stored as a proportion
            to the height for their use in UpdateRowAndColumnSizes.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl.RunspaceControl_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            For High Contrast mode, new RunspaceControl's are being created for some reason.
            We want the new control to display the PowerShellTab object correctly, if it is expanded,
            side by side, etc. 
            Just after creation, the RunspaceControl will appear as if the ScriptEditor is expanded
            which is fine for when the application starts but not fine when the application is up
            and the ScriptEditor is expanded and we switch to high contrast.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl.HorizontalAddOnTools_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the selection changes in the horizontal AddOnTools tab control to set the corresponding object model property
            </summary>
            <param name="sender">the tab control where the selection changed</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl.VerticalAddOnTools_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the selection changes in the vertical AddOnTools tab control to set the corresponding object model property
            </summary>
            <param name="sender">the tab control where the selection changed</param>
            <param name="e">ignored event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceTabControl">
            <summary>
            TabControl with Runspaces (RotatedRunspaceControl).
            </summary>
            <summary>
            RunspaceTabControl
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceTabControl.#ctor">
            <summary>
            Initializes a new instance of the RunspaceTabControl class.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceTabControl.SelectedRunspaceControl">
            <summary>
            Gets the selected RunspaceControl
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceTabControl.CloseTabButton_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Set the CloseTabButton automation id to filename.btnCloseTab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceTabControl.RunspaceTabControl_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the runspace is loaded
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceTabControl.PowerShellTabCollection_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the PowerShellTab collection is changed to select the new runspace
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceTabControl.RunspaceTabControl_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called to start listening to the Layout update.
            </summary>
            <param name="sender">event senders</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceTabControl.Presenter_LayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Called to ensure the presenter is going to be able to find the runspaceControl
            before changing PSGHostInternal.Current.PSGData.PowerShellTabs.SelectedPowerShellTab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RunspaceTabControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ScriptExpander">
            <summary>
            Interaction logic for ScriptExpander.xaml
            </summary>
            <summary>
            ScriptExpander
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptExpander.#ctor">
            <summary>
            Initializes a new instance of the ScriptExpander class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptExpander.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl">
            <summary>
            Interaction logic for ShowCommandAddOnControl.xaml
            </summary>
            <summary>
            ShowCommandAddOnControl
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.allModulesViewModel">
            <summary>
            ViewModel used for the controls
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.hostObject">
            <summary>
            root of the ISE object model
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.#ctor">
            <summary>
            Initializes a new instance of the ShowCommandAddOnControl class.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.HostObject">
            <summary>
            Gets or sets the root of the ISE object model
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.Initialize(System.Management.Automation.PSDataCollection{System.Management.Automation.PSObject})">
            <summary>
            Initializes this controls with its data
            </summary>
            <param name="rawCommands">the data used in the control</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.CurrentPowerShellTab_ZoomLevelChanged(System.Object,System.Double)">
            <summary>
            Event to handle the ZoomLevelChange Event
            </summary>
            <param name="sender"> sender which is mostly in this case is PowerShellTab</param>
            <param name="zoomLevel">Zoom level </param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.SetupViewModel">
            <summary>
            Sets up the listening of events in the ViewModel and the DataContexts
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.FocusRelevantControl">
            <summary>
            Focuses the relevant control based on the state of the ViewModel.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.CurrentPowerShellTab_AddOnToolAddedOrRemoved(System.Object,Microsoft.PowerShell.Host.ISE.ISEAddOnToolAddedOrRemovedEventArgs)">
            <summary>
            Monitors this tool being added or removed to update this.hostObject.CurrentPowerShellTab.ShowCommands
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.CurrentPowerShellTab_AddOnToolVisibilityChanged(System.Object,Microsoft.PowerShell.Host.ISE.ISEAddOnToolEventArgs)">
            <summary>
            Monitors this tool changing visibility to update this.hostObject.CurrentPowerShellTab.ShowCommands
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.CurrentPowerShellTab_AddOnToolPaneOpenedOrClosed(System.Object,Microsoft.PowerShell.Host.ISE.ISEAddOnToolPaneOpenOrClosedEventArgs)">
            <summary>
            Monitors this tool pane being opened/closed to update this.hostObject.CurrentPowerShellTab.ShowCommands
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.AllModulesViewModel_Refresh(System.Object,System.EventArgs)">
            <summary>
            Called when the Refresh button is pressed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.AllModulesViewModel_SelectedCommandInSelectedModuleNeedsImportModule(System.Object,Microsoft.PowerShell.Commands.ShowCommandInternal.ImportModuleEventArgs)">
            <summary>
            Called when the import-module button is pressed
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.RefreshViewModel(System.String,System.String,System.String,Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Refreshes the ViewModel and reposition the selected module/command if those parameters are not null
            </summary>
            <param name="commandName">command selected when the refresh was requested</param>
            <param name="parentModuleName">name of the selected command parent module when the refresh was requested</param>
            <param name="selectedModuleName">module selected when the refresh was requested</param>
            <param name="currentTab">tab where this tool is</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.GetShowCommandRefreshErrorMessage(System.String,System.String,System.String)">
            <summary>
            Creates an appropriate error message string if refresh fails for ShowCommand control
            </summary>
            <param name="commandName">The name of command if it was selected</param>
            <param name="parentModuleName">Parent module name of the selected command</param>
            <param name="addedMessage">Custom message to add to the Failure string resource</param>
            <returns>The formatted error message</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.AllModulesViewModel_SelectedCommandInSelectedModuleNeedsHelp(System.Object,Microsoft.PowerShell.Commands.ShowCommandInternal.HelpNeededEventArgs)">
            <summary>
            Called when help is needed for the selected command
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.Copy_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Copies the script into the clipboard
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.Run_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Runs the selected command
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.AllModulesViewModel_RunSelectedCommandInSelectedModule(System.Object,Microsoft.PowerShell.Commands.ShowCommandInternal.CommandEventArgs)">
            <summary>
            Called when the selected command needs to be run
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.RunScript">
            <summary>
            Runs the current script
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.Insert_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Inserts the command text in the console pane
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ShowCommandAddOnControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.StatusAndSizingBar">
            <summary>
            Interaction logic for StatusAndSizingBar.xaml
            </summary>
            <summary>
            StatusAndSizingBar
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StatusAndSizingBar.#ctor">
            <summary>
            Initializes a new instance of the StatusAndSizingBar class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StatusAndSizingBar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ZoomSlider">
            <summary>
            Defines a custom Slider class to return the ZoomSliderAutomationPeer.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ZoomSlider.OnCreateAutomationPeer">
            <summary>
            Creates an AutomationPeer for this control.
            </summary>
            <returns>An AutomationPeer instance.</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper">
            <summary>
            Helper classes for WPF functionality
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetMaxLinesMaxLines">
            <summary>
            Maximum number of lines in GetMaxLines
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetFirstNonEmptyLineMaxCharacters">
            <summary>
            Maximum number of characters in GetFirstNonEmptyLine
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.ZeroZero">
            <summary>
            Auxiliar in finding topmost-leftmost controls
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.slashRSlashNArray">
            <summary>
            String Array Constant used in Sting.split
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.slasNArray">
            <summary>
            Char Array Constant used in Sting.split
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.canSendToUIThread">
            <summary>
            Value indicating whether the SendToUIThread can dispatch to the UI thread.
            This flag is set in SendToUIThreadAndBlock to avoid locking on the UI thread.
            In the watch window example, that makes use of InvokeSynchronous, this will
            prevent watching "write-debug 'abc' -debug" or "write-debug" to cause an
            application hang.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.canSendToUIThreadLock">
            <summary>
            Lock ensuring only one thread at a time verifies canSendToUIThread
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.IsRightChild">
            <summary>
            Auxiliar delegate for FindFirst
            </summary>
            <param name="child">child to be checked</param>
            <returns>true if the child satisfies some criteria</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.Examine`2">
            <summary>
            Delegate used in BinarySearch that is supposed to return 0 if key matches item's key
            a negative value if the key is smaller than item's key and a positive value if the key
            is larger then item's key
            </summary>
            <typeparam name="T">Type for a List in Binary search</typeparam>
            <typeparam name="K">Type for a key compared against all items</typeparam>
            <param name="item">item being searched</param>
            <param name="key">key compared to all items</param>
            <returns>
            0 if key matches item, a negative value if the key is smaller than item and
            a positive value if the key is larget than item's key
            </returns>
            <example>see BinarySearch</example>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.IsHighContrast">
            <summary>
            Returns true if the current mode is high contrast
            </summary>
            <returns>true if the current mode is high contrast</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetColor(System.Int32)">
            <summary>
            Gets the Color specified in the native color constant
            </summary>
            <param name="colorConstant">constant used to retrieve a color</param>
            <returns>The Color specified in the native color constant</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetSimpleKeyGesture(System.String)">
            <summary>
            Retrieves a KeyGesture with no display name
            </summary>
            <param name="gestureString">key gesture string</param>
            <returns>A KeyGesture for the given gestureString or null if one could not be produced</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.BinarySearch``2(System.Collections.Generic.IList{``0},``1,Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.Examine{``0,``1})">
            <summary>
            Searches for K in T, considering T is sorted
            </summary>
            <typeparam name="T">Type for a List in Binary search</typeparam>
            <typeparam name="K">Type for a key compared against all items</typeparam>
            <param name="items">items being searched</param>
            <param name="key">key compared to all items</param>
            <param name="examine">delegate that actually performs the comparison of items against the keys</param>
            <returns>the item matching the key or -1 if it has not been found</returns>
            <example>
            <![CDATA[
               // tokens is a Collection of PSToken
               tokens.BinarySearch<PSToken, int>(30, delegate(PSToken token, int position)
               {
                   // a position of 48 looking for a token ending at position 30
                   // would return 18 below which would cause the binary search to search in the second half
                   return position - (token.Start + token.Length);
               });
            ]]>
            </example>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetKeyGesture(System.String)">
            <summary>
            Returns a KeyGesture for the given gestureString or null if one could not be produced
            </summary>
            <param name="gestureString">key gesture string</param>
            <returns>A KeyGesture for the given gestureString or null if one could not be produced</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetGestureDisplayName(System.String)">
            <summary>
            Given the gestureString looks for the propper display string by looking up resources
            ending up with KeyboardDisplayName
            </summary>
            <param name="gestureString">The gesture string we are trying to get the display string for</param>
            <returns>the propper display string evaluated by looking up resources ending up with KeyboardDisplayName</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetKeyGesture(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)">
            <summary>
            Returns a KeyGesture for the given modifier and key or null if one could not be produced
            </summary>
            <param name="key">key to be passed to the KeyGesture constructor</param>
            <param name="modifiers">modifier to be passed to the keygesture constructor</param>
            <returns>A KeyGesture for the given modifier and key or null if one could not be produced</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.NormalizeString(System.String)">
            <summary>
            Removes \r and \n from source
            </summary>
            <param name="source">string to normalize</param>
            <returns>source with no \r or \n</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.StartProcess(System.String)">
            <summary>
            Starts the process and puts up a message box if any exceptions have been found.
            </summary>
            <param name="process">process to start</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.MessageBoxException(System.Exception)">
            <summary>
            Shows an "Ok" MessageBox for the Exception
            </summary>
            <param name="e">Exception to show the message box for</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.MessageBoxError(System.String)">
            <summary>
            Shows an "Ok" MessageBox for the Exception
            </summary>
            <param name="message">Message to show the message box for</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.ShowSaveFileDialog(System.String,System.String,System.String)">
            <summary>
            Invokes SaveFileDialog
            </summary>
            <param name="extension">SaveFileDialog's file extension</param>
            <param name="filter">SaveFileDialog's filter</param>
            <param name="fileName">SaveFileDialog's file name</param>
            <returns>the saved file name or null if the dialog was cancelled</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.ShowOpenFileDialog(System.String,System.String,System.String)">
            <summary>
            Invokes OpenFileDialog
            </summary>
            <param name="extension">OpenFileDialog's file extension</param>
            <param name="filter">OpenFileDialog's filter</param>
            <param name="initialDirectory">OpenFileDialog's initial directory</param>
            <returns>the file name or null if the dialog was cancelled</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.FindFirstChild(System.Windows.DependencyObject,Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.IsRightChild)">
            <summary>
            Returns the first child of <paramref name="root"/> that satisfies the criteria in <paramref name="isrightChild"/>
            or null if no child satisfies the criteria.
            </summary>
            <param name="root">The parent of children we are searching for</param>
            <param name="isrightChild">delegate that provides search criteria</param>
            <returns>
            the first child of <paramref name="root"/> that satisfies the criteria in <paramref name="isrightChild"/>
            or null if no child satisfies the criteria.
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.FindSelectedContentPresenter(System.Windows.DependencyObject)">
            <summary>
            Searchs the logical tree for a ContentPresenter with "SelectedContent" as its source.
            Typically used to find the content of a TabControl. The header is easily found with...
            </summary>
            <param name="root">parent control to search for</param>
            <returns>the ContentPresenter for the Selected Content or null if there is none</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.IsChildFocused(System.Windows.Controls.Control)">
            <summary>
            Returns true if a child of <paramref name="parentControl"/> is focused
            </summary>
            <param name="parentControl">the parent control we want to if it is focused</param>
            <returns>true if a child of <paramref name="parentControl"/> is focused</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.FocusOnFirst(System.Windows.Controls.Control)">
            <summary>
            Sets the ficus in a subcontrol of <paramref name="addOnControl"/> with the lowest tab index or,
            if tab indexes have not been set, to the topmost leftmost control
            </summary>
            <param name="addOnControl">parent control we want to set the focus to</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.SendToUIThreadAndBlock(System.Windows.Threading.DispatcherOperationCallback)">
            <summary>
            Calls dispatcherMethod in the UI thread, blocking future calls to
            SendToUIThread requiring SynchronizationContext.Send
            </summary>
            <param name="dispatcherMethod">dispatcher method to call</param>
            <returns>dispatcherMethod 's return value</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">if the method throws an exception</exception>
            <exception cref="T:System.InvalidOperationException">If there is a pending call to this method.</exception>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.TryFileDelete(System.String)">
            <summary>
            Tries deleting the file corresponding to fullPath
            </summary>
            <param name="fullPath">full path to delete</param>
            <returns>true if it was able to delete the file</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.SendToUIThread(System.Threading.SendOrPostCallback)">
            <summary>
            Calls sendMethod in the UI thread
            </summary>
            <param name="sendMethod">method to call</param>
            <exception cref="T:System.Reflection.TargetInvocationException">if the method throws an exception</exception>
            <exception cref="T:System.InvalidOperationException">If there is a pending call to SendToUIThreadAndBlock and it is necessary to use SynchronizationContext.Send</exception>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.SendToUIThread(System.Windows.Threading.DispatcherOperationCallback)">
            <summary>
            Calls dispatcherMethod in the UI thread
            </summary>
            <param name="dispatcherMethod">dispatcher method to call</param>
            <returns>dispatcherMethod 's return value</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">if the method throws an exception</exception>
            <exception cref="T:System.InvalidOperationException">If there is a pending call to SendToUIThreadAndBlock and it is necessary to use SynchronizationContext.Send</exception>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetFirstNonEmptyLine(System.String)">
            <summary>
            Gets the first non empty line and limits it to WPFHelper.GetFirstNonEmptyLineMaxCharacters
            </summary>
            <param name="source">the string to the first line from</param>
            <returns>the first non empty line limitted to WPFHelper.GetFirstNonEmptyLineMaxCharacters</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetFirstNonEmptyLine(System.String,System.Int32)">
            <summary>
            Gets the first non empty line and limits it to WPFHelper.GetFirstNonEmptyLineMaxCharacters
            </summary>
            <param name="source">the string to the first line from</param>
            <param name="maxCharactersInLine">maximum number of characters in line, -1 for no restriction</param>
            <returns>the first non empty line limitted to WPFHelper.GetFirstNonEmptyLineMaxCharacters</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.LimitString(System.String,System.Int32)">
            <summary>
            Limits a string to limit charachters
            </summary>
            <param name="source">the string to be limited</param>
            <param name="limit">the limit of characters in the return (not considering ellipsis or localized continuation)</param>
            <returns>the limited string</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetMaxLines(System.String)">
            <summary>
            Gets the first lines of <paramref name="source"/>.
            </summary>
            <param name="source">string we want to limit the number of lines</param>
            <returns>The first lines of <paramref name="source"/>.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.ReadIfRunnable(System.String,System.Management.Automation.AuthorizationManager)">
            <summary>
            Verifies if a file can be executed in the authorization manager, and returns its contents
            if it can be executed
            </summary>
            <param name="filePath">path to the file being verified and read</param>
            <param name="manager">Authorization Manager</param>
            <returns>contents as a string if the file can be executed, otherwise null</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.ReadIfRunnable(System.String,System.Management.Automation.AuthorizationManager,System.Boolean)">
            <summary>
            Verifies if a file can be executed in the authorization manager, and returns its contents
            if it can be executed
            </summary>
            <param name="filePath">path to the file being verified and read</param>
            <param name="manager">Authorization Manager</param>
            <param name="shouldThrow">true if this method should throw exceptions</param>
            <returns>contents as a string if the file can be executed, otherwise null</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetLocalMachineValue(System.String,System.String)">
            <summary>
            Tries to get a registry value in HKLM
            </summary>
            <param name="keyName">key in  HKLM containing the value</param>
            <param name="valueName">name of the value to get</param>
            <returns>
            A value in HKLM or null if it could not be retrieved
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.GetColorFromUint(System.UInt32)">
            <summary>
            Retrieves the Color from a native colorConstant
            </summary>
            <param name="colorConstant">Color constant retrieved from GetColor</param>
            <returns>The Color from a native colorConstant</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.WPFHelper.SendToUIThread(System.Threading.SendOrPostCallback,System.Windows.Threading.DispatcherOperationCallback,System.Boolean)">
            <summary>
            Calls dispatcherMethod or sendMethod in the UI thread, blocking future calls to
            SendToUIThread requiring SynchronizationContext.Send
            </summary>
            <param name="sendMethod">sendMethod method to call</param>
            <param name="dispatcherMethod">dispatcher method to call</param>
            <param name="checkCanSendToUIThread">true if WPFHelper.canSendToUIThread should be checked</param>
            <returns>The return of dispatcherMethod or nothing if sendMethod was used</returns>
            <exception cref="T:System.Reflection.TargetInvocationException">if the method throws an exception</exception>
            <exception cref="T:System.InvalidOperationException">If there is a pending call to this method.</exception>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ContextMenuOnlyCustomCommands">
            <summary>
            Custom Commands used by GPowerShell that do not show up in the main menu
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ContextMenuOnlyCustomCommands.enableBreakpoint">
            <summary> Custom command to enable the breakpoint on the current line</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ContextMenuOnlyCustomCommands.disableBreakpoint">
            <summary> Custom command to disable the breakpoint on the current line</summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ContextMenuOnlyCustomCommands.EnableBreakpoint">
            <summary>
            Gets a command used to enable the breakpoint on the current line
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ContextMenuOnlyCustomCommands.DisableBreakpoint">
            <summary>
            Gets a command used to disable the breakpoint on the current line
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.CommonUtilities">
            <summary>
            Common functionality meant to be shared between powershell_ise.exe and Microsoft.PowerShell.GPowerShell.dll
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommonUtilities.SafeWaitMutex(System.Threading.Mutex,System.String)">
            <summary>
            If a mutex is abandoned, in our case, it is ok to proceed
            </summary>
            <param name="mutex">The mutex to wait on. If it is null, a new one will be created</param>
            <param name="mutexName">The mutex name.</param>
            <returns>A working mutex. If the mutex was abandoned, a new one is created to replace it</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands">
            <summary>
            Custom Commands used by GPowerShell
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.newRemotePowerShellTab">
            <summary>
            Custom command used to add a new remote powershell tab
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.openOptionsDialog">
            <summary>
            Custom command used to open the options dialog
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.findNext">
            <summary>
            Custom command used to find the next text in the script pane
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.findPrevious">
            <summary>
            Custom command used to find the previous text in the script pane
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.startPowerShell">
            <summary> Custom command to start powershell</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.goToLine">
            <summary> Custom command to go to a script line</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.toggleScriptingPane">
            <summary> Custom command to toggle the scripting pane visibility</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.toggleHorizontalAddOnPane">
            <summary> Custom command used to toggle the horizontal tool pane visibility</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.toggleVerticalAddOnPane">
            <summary> Custom command used to toggle the vertical tool pane visibility</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.hideHorizontalAddOnTool">
            <summary> Custom command used to hide the selected horizontal tool</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.hideVerticalAddOnTool">
            <summary> Custom command used to hide the selected vertical tool</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.moveHorizontalAddOnToolToVertical">
            <summary> Custom command used to move the selected horizontal tool to vertical</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.moveVerticalAddOnToolToHorizontal">
            <summary> Custom command used to move the selected vertical tool to horizontal</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.goToSelectedVerticalAddOnTool">
            <summary> Custom command used to go to the selected vertical tool</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.goToSelectedHorizontalAddOnTool">
            <summary> Custom command used to go to the selected horizontal tool</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.showAndSelectAddOnTool">
            <summary> Custom command used to show and select an AddOn tool</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.toggleToolBar">
            <summary> Custom command used to toggle the ToolBar visibility </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.showScriptPaneRight">
            <summary> Custom command used to display scripts on the right </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.showScriptPaneTop">
            <summary> Custom command used to display scripts on the top </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.showScriptPaneMaximized">
            <summary> Custom command used to display scripts maximized </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.applicationExit">
            <summary> Custom command to exit the application</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.replaceAllCmd">
            <summary> Custom command to replace all text </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.runScript">
            <summary> Custom command to run a script </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.runSelection">
            <summary> Custom command to run the selection</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.stopExecution">
            <summary> Custom command to stop a script </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.closeRunspaceCmd">
            <summary> Custom command to close a runspace tab </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.newRunspaceCmd">
            <summary> Custom command to get a new runspace tab </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.showRunspaceCmd">
            <summary> Custom command to show a runspace tab </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.showScriptCmd">
            <summary> Custom command to show a Script tab </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.customScriptCmd">
            <summary> Custom command to run a custom script </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.moveScriptToTopOrRightCmd">
            <summary> Custom command to move script to the top or right.</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.clearOutput">
            <summary> Custom command to clear the output </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.goToConsolePane">
            <summary>
            Custom command used to go to the console pane
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.goToEditor">
            <summary> Custom command to go to the script editor </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.stepInto">
            <summary> Custom command to execute "step into" in the debugger</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.stepOver">
            <summary> Custom command to execute "step over" in the debugger</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.stepOut">
            <summary> Custom command to execute "step out" in the debugger</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.resumeDebugger">
            <summary> Custom command to resume execution of the debugger</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.breakAllDebugger">
            <summary> Custom command to break into running script into the debugger</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.stopDebugger">
            <summary> Custom command to stop the debugger</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.toggleBreakpoint">
            <summary> Custom command to toggle (add/remove) the breakpoint on the current line</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.removeAllBreakpoints">
            <summary> Custom command to remove all breakpoints</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.enableAllBreakpoints">
            <summary> Custom command to enable all breakpoints</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.disableAllBreakpoints">
            <summary> Custom command to disable all breakpoints</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.getCallStack">
            <summary> Custom command to get the callstack</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.listBreakpoints">
            <summary> Custom command to list all breakpoints</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.zoomIn">
            <summary> Custom command to zoom in.</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.zoomOut">
            <summary> Custom command to zoom out.</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.find">
            <summary> Command used to find text in any editor </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.replace">
            <summary> Command used to replace text in any editor </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.newScript">
            <summary> Command used to create a new script </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.openScript">
            <summary> Command used to open a new script </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.saveScript">
            <summary> Command used to save a script </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.saveScriptAs">
            <summary> Command used to save a script as another file name </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.closeScript">
            <summary> Command used to close a script </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.undo">
            <summary> Command used to undo the last action </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.redo">
            <summary> Command used to redo the last action </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.cut">
            <summary> Command used to cut text from input or from scripts </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.copy">
            <summary> Command used to copy text from any editor </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.paste">
            <summary> Command used to paste text in the input or in scripts </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.help">
            <summary> Command used to get help </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.selectAll">
            <summary> Command used to select all text in any editor </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.goToMatch">
            <summary> Custom command to go to the the matching character </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.startIntellisense">
            <summary> Custom command to start intellisense </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.showSnippet">
            <summary> Custom command to insert a snippet </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.openMruFile">
            <summary> Custom command used to open a file from the MRU list</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.toggleShowOutlining">
            <summary> Custom command used to toggle outlining</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.toggleEmbeddedCommands">
            <summary> Custom command used to show the embedded show-command window</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.toggleShowLineNumbers">
            <summary> Custom command used to toggle line numbers</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.toggleOutliningExpandCollapseAll">
            <summary> Custom command used to toggle Outlining</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.updateHelp">
            <summary> Custom command used to run update-help</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.aboutAddOnTools">
            <summary> Custom command used to display AddOn information</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.showPopupCommand">
            <summary> Custom command used to display the show-command popup window</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.scriptBrowserAddOnCommand">
            <summary> Custom command used to open the webpage for Script Browser add-on</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.moduleBrowserAddOnCommand">
            <summary> Custom command used to open the webpage for Module Browser add-on</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.scriptAnalyzerAddOnCommand">
            <summary> Custom command used to open the webpage for Script Analyzer add-on</summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.OpenMruFile">
            <summary>
            Gets a command used to open a file from the MRU list
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.GoToMatch">
            <summary>
            Gets a command used to go to the the matching character
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.Find">
            <summary>
            Gets a command used to find text in any editor
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.Replace">
            <summary>
            Gets a command used to replace text in any editor
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.NewScript">
            <summary>
            Gets a command used to create a new script
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.OpenScript">
            <summary>
            Gets a command used to open a new script
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.SaveScript">
            <summary>
            Gets a command used to save a script
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.SaveScriptAs">
            <summary>
            Gets a command used to save a script as another file name
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.CloseScript">
            <summary>
            Gets a command used to close a script
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.Undo">
            <summary>
            Gets a command used to undo the last action
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.Redo">
            <summary>
            Gets a command used to redo the last action
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.Cut">
            <summary>
            Gets a command used to cut text from input or from scripts
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.Copy">
            <summary>
            Gets a command used to copy text from any editor
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.Paste">
            <summary>
            Gets a command used to paste text in the input or in scripts
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.Help">
            <summary>
            Gets a command used to get help
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.SelectAll">
            <summary>
            Gets a command used to select all text in any editor
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ZoomIn">
            <summary>
            Gets a command used to increase the font.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ZoomOut">
            <summary>
            Gets a command used to decrease the font.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.GoToLine">
            <summary>
            Gets a command used to start powershell
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.StartPowerShell">
            <summary>
            Gets a command used to start powershell
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ToggleToolBar">
            <summary>
            Gets a command used to toggle the ToolBar visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ToggleScriptingPane">
            <summary>
            Gets a command used to toggle the scripting pane visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ToggleHorizontalAddOnPane">
            <summary>
            Gets a command used to toggle the horizontal tool pane visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ToggleVerticalAddOnPane">
            <summary>
            Gets a command used to toggle the vertical tool pane visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.MoveHorizontalAddOnToolToVertical">
            <summary>
            Gets a command used to move the selected horizontal tool to vertical
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.MoveVerticalAddOnToolToHorizontal">
            <summary>
            Gets a command used to move the selected vertical tool to horizontal 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.GoToSelectedVerticalAddOnTool">
            <summary>
            Gets a command used to go to the selected vertical tool
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.GoToSelectedHorizontalAddOnTool">
            <summary>
            Gets a command used to go to the selected horizontal tool
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ShowAndSelectAddOnTool">
            <summary>
            Gets a command used to show and select an AddOn tool
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.HideHorizontalAddOnTool">
            <summary>
            Gets a command used to hide the selected horizontal tool
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.HideVerticalAddOnTool">
            <summary>
            Gets a command used to hide the selected vertical tool
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ShowScriptPaneMaximized">
            <summary>
            Gets a command used to show scripts maximized
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ShowScriptPaneTop">
            <summary>
            Gets a command used to show scripts on the top
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ShowScriptPaneRight">
            <summary>
            Gets a command used to show scripts on the right
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.GoToConsolePane">
            <summary>
            Gets a command used to go to the console pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ApplicationExit">
            <summary>
            Gets a command used to exit the application
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.GoToEditor">
            <summary>
            Gets a command used to go to the script editor
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.NewRemotePowerShellTab">
            <summary>
            Gets a custom command used to add a new remote powershell tab
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.OpenOptionsDialog">
            <summary>
            Gets a custom command used to open the options dialog
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.FindNext">
            <summary>
            Gets a command used to find the next text in the script pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.FindPrevious">
            <summary>
            Gets a command used to find the previous text in the script pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ReplaceAllCmd">
            <summary>
            Gets a command used to replace all text
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ClearOutput">
            <summary>
            Gets a command used to clear the output
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.MoveScriptToTopOrRightCmd">
            <summary>
            Gets a command used to move script to the top or right
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.RunScript">
            <summary>
            Gets a command used to run a script
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.RunSelection">
            <summary>
            Gets a command used to run the selection
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.StopExecution">
            <summary>
            Gets a command used to stop a script 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.NewRunspaceCmd">
            <summary>
            Gets a command used to add a new runspace
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.CloseRunspaceCmd">
            <summary>
            Gets a command used to close a runspace
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ShowRunspaceCmd">
            <summary>
            Gets a command used to show a runspace
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.CustomScriptCmd">
            <summary>
            Gets a command to run a custom script.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ShowScriptCmd">
            <summary>
            Gets a command used to show a script
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.StepInto">
            <summary>
            Gets a command used to execute "step into" in the debugger
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.StepOver">
            <summary>
            Gets a command used to execute "step over" in the debugger
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.StepOut">
            <summary>
            Gets a command used to execute "step out" in the debugger
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ResumeDebugger">
            <summary>
            Gets a command used to resume the debugger
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.BreakAllDebugger">
            <summary>
            Gets a command used to break running script into the debugger
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.StopDebugger">
            <summary>
            Gets a command used to stop the debugger
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ToggleBreakpoint">
            <summary>
            Gets a command used to toggle (add/remove) the breakpoint on the current line
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.RemoveAllBreakpoints">
            <summary>
            Gets a command used to remove all the breakpoints
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.EnableAllBreakpoints">
            <summary>
            Gets a command used to enable all the breakpoints
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.DisableAllBreakpoints">
            <summary>
            Gets a command used to disable all the breakpoints
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.GetCallStack">
            <summary>
            Gets a command used to get the callstack
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ListBreakpoints">
            <summary>
            Gets a command used to get the callstack
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.StartIntellisense">
            <summary>
            Gets a command used to start intellisense
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ToggleShowOutlining">
            <summary>
            Gets a command used to toggle outlining
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ToggleEmbeddedCommands">
            <summary>
            Gets a command used to toggle the embedded show-command
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ToggleShowLineNumbers">
            <summary>
            Gets a command used to toggle line numbers
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ToggleOutliningExpandCollapseAll">
            <summary>
            Gets a command used to toggle outlining expansion
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.UpdateHelp">
            <summary>
            Gets a command used to run update-help
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ShowSnippet">
            <summary>
            Gets a command used to insert a snippet
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.AboutAddOnTools">
            <summary>
            Gets a command used to display AddOn information
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ShowPopupCommand">
            <summary>
            Gets a command used to call show-command
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ScriptBrowserAddOnCommand">
            <summary>
            Gets a command used to open the Script Browser Add-on webpage
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ModuleBrowserAddOnCommand">
            <summary>
            Gets a command used to open the Module Browser Add-on webpage
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.ScriptAnalyzerAddOnCommand">
            <summary>
            Gets a command used to open the Script Analyzer Add-on webpage
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CustomCommands.AddGesture(System.Windows.Input.RoutedUICommand,System.String)">
            <summary>
            Adds the KeyGesture corresponding to <paramref name="gestureString"/> to the <paramref name="command"/>'s
            InputBindings if <paramref name="gestureString"/>  can be converted to a KeyGesture.
            </summary>
            <param name="command">command whose InputBindings we'll add the gesture.</param>
            <param name="gestureString">string rpresentation of a gesture to be added</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface">
            <summary>
            GPowerShell PSHostRawUserInterface imlpementation
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.ConsoleColors">
            <summary>
            Maps ConsoleColors to colors
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.DefaultWidth">
            <summary>
            Default width return by BufferSize when no width has been set.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.MinimumWidth">
            <summary>
            Minimum width return by BufferSize.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.cursorPosition">
            <summary>
            Cursor position. This is not actually internally used, 
            but instead of throwing in the CursoPosition property setter
            and getter we just return the last position set so that
            a default cls function works. The default cls function is used in remoting.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.runspace">
            <summary>
            The PowerShellTab associated with this host
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.size">
            <summary>
            initial host Size
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.#ctor(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Initializes a new instance of the GPSHostRawUserInterface class.
            </summary>
            <param name="runspace">the PowerShellTab associated with this host</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.BackgroundColor">
            <summary>
            Gets and sets the background color used to render characters on the screen buffer. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.ForegroundColor">
            <summary>
            Gets and sets the foreground color used to render characters on the screen buffer. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.BufferSize">
            <summary>
            Gets or sets the current size of the screen buffer. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.CursorPosition">
            <summary>
            Cursor position. This is not actually internally used, 
            but instead of throwing in the CursoPosition property setter
            and getter we just return the last position set so that
            a default cls function works. The default cls function is used in remoting.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.CursorSize">
            <summary>
            Gets and sets the cursor size as a percentage of a buffer cell. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.KeyAvailable">
            <summary>
            Gets a value indicating whether a key press is available in the input stream.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.MaxPhysicalWindowSize">
            <summary>
            Gets the largest window possible for the current font and display hardware, ignoring the current buffer dimensions 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.MaxWindowSize">
            <summary>
            Gets the size of the largest window possible for the current buffer, current font, and current display hardware. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.WindowPosition">
            <summary>
            Gets and sets the position, in characters, of the view window relative to the screen buffer. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.WindowSize">
            <summary>
            Gets and sets the current size of the view window. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.WindowTitle">
            <summary>
            Gets and sets the title bar text of the current view window. 
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.IsValidConsoleColor(System.ConsoleColor)">
            <summary>
            Returns true if color is a valid ConsoleColor
            </summary>
            <param name="color">color to check</param>
            <returns>true if color is a valid ConsoleColor</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.ReadKey(System.Management.Automation.Host.ReadKeyOptions)">
            <summary>
            Reads a pressed, released, or pressed and released keystroke from the keyboard device, blocking processing until a keystroke is typed that matches the specified keystroke options.
            </summary>
            <param name="options">A bit mask of the options to be used when reading from the keyboard. Either IncludeKeyDown, IncludeKeyUp or both must be specified.</param>
            <returns>A KeyInfo object that describes the key. The object is returned when a keystroke is made that matches the specified keystroke options.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.FlushInputBuffer">
            <summary>
            Flushes the input buffer of all input records. 
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.GetBufferContents(System.Management.Automation.Host.Rectangle)">
            <summary>
            Gets a rectangular region of the screen buffer. 
            </summary>
            <param name="rectangle">A Rectangle object that identifies the sides of the rectangle.</param>
            <returns>An array of BufferCell objects extracted from the rectangle region. The returned array is organized in row-major order for performance even though the screen buffer is organized in column-major order. For example, a character originally appearing at position [X=10,Y=2] (column 10, row 2) will appear in the resulting array at position [2,10] (row 2, column 10).</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.ScrollBufferContents(System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.BufferCell)">
            <summary>
            Crops a region of the screen buffer. 
            </summary>
            <param name="source">A Rectangle structure that identifies the region of the screen to be scrolled.</param>
            <param name="destination">A Coordinates structure that identifies the upper-left coordinates of the region of the screen to receive the source region contents.</param>
            <param name="clip">A Rectangle structure that identifies the region of the screen to include in the operation. If a cell does not fall within the clip region, it will be unchanged.</param>
            <param name="fill">A BufferCell structure that identifies the character and attributes to be used to fill all cells within the intersection of the source rectangle and clip rectangle that are left "empty" by the move. </param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.SetBufferContents(System.Management.Automation.Host.Rectangle,System.Management.Automation.Host.BufferCell)">
            <summary>
            Copies a given character, foreground color, and background color to a region of the screen buffer. 
            This is not implemented here, but we do clear the screen when called so that
            the default cls implementation (used in remoting) works.
            </summary>
            <param name="rectangle">A Rectangle structure that defines the area to be filled. If the structure specifies a top, bottom, left , or right side of -1, the entire screen buffer is filled.</param>
            <param name="fill">A BufferCell structure that defines the fill character.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.SetBufferContents(System.Management.Automation.Host.Coordinates,System.Management.Automation.Host.BufferCell[0:,0:])">
            <summary>
            Copies an array of buffer cells into the screen buffer at a specified location. 
            </summary>
            <param name="origin">A Coordinates structure that identifies the top-left corner region to be filled.</param>
            <param name="contents">A BufferCell array that describes a region of cells.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.LengthInBufferCells(System.String)">
            <summary>
            Returns the length of <paramref name="source"/> in buffer cells.
            </summary>
            <param name="source">String we want to know the length of.</param>
            <returns>The length of <paramref name="source"/> in buffer cells.</returns>
            <remarks>
            same as the implementation in the base class; included here to make it easier
            to keep the other overload in sync: LengthInBufferCells(string, int)
            </remarks>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostRawUserInterface.LengthInBufferCells(System.String,System.Int32)">
            <summary>
            Returns the length of <paramref name="source"/> in buffer cells starting at <paramref name="offset"/>.
            </summary>
            <param name="source">String we want to know the length of.</param>
            <param name="offset">Offset within <paramref name="source"/>.</param>
            <returns>The length of <paramref name="source"/> in buffer cells starting at <paramref name="offset"/>.</returns>
            <remarks>
            This is an alternative to the default implementation provided by PSHostRawUserInterface that is more performant.
            </remarks>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface">
            <summary>
            GPowerShell PSHostUserInterface imlpementation
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.hostGUI">
            <summary>
            implementation of ReadLineDialog and PromptForCredential
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.rawUI">
            <summary>
            value of the RawUI property
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.runspace">
            <summary>
            The PowerShellTab associated with this host
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.#ctor(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Initializes a new instance of the GPSHostUserInterface class.
            </summary>
            <param name="runspace">the PowerShellTab associated with this host</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.DoSomethingWithString">
            <summary>
            Delegate to be called for each segment out of WrapString
            </summary>
            <param name="segment">segment out of WrapString</param>
            <param name="shouldAddNewLine">true if a new line should be added after adding the element</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.RawUI">
            <summary>
            Gets the hosting application implementation of the PSHostRawUserInterface interface.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.HostGUI">
            <summary>
            Gets or sets the implementation of ReadLineDialog and PromptForCredential
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.Prompt(System.String,System.String,System.Collections.ObjectModel.Collection{System.Management.Automation.Host.FieldDescription})">
            <summary>
            Prompts the user for input.
            </summary>
            <param name="caption">The caption or title of the prompt.</param>
            <param name="message">The description of the prompt.</param>
            <param name="descriptions">A collection of FieldDescription objects that describe each field to prompt for.</param>
            <returns>A dictionary object with results of the user prompts. The keys of the dictionary are the field names from the FieldDescription objects. The dictionary values are objects that represent the values of the corresponding fields as collected from the user.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.PromptForChoice(System.String,System.String,System.Collections.ObjectModel.Collection{System.Management.Automation.Host.ChoiceDescription},System.Int32)">
            <summary>
            Presents a dialog that enables the user to choose an option, a choice, from a set of options.
            </summary>
            <param name="caption">The caption or title of the prompt.</param>
            <param name="message">The message that describes the choice.</param>
            <param name="choices">A collection of ChoiceDescription objects that describe each choice.</param>
            <param name="defaultChoice">The index of the label in the ChoiceDescription collection that represents the choice presented to the user as the default choice. Always choose the most secure default choice. To indicate no default, set to -1.</param>
            <returns>The index of the ChoiceDescription object that corresponds to the option selected by the user.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.PromptForCredential(System.String,System.String,System.String,System.String,System.Management.Automation.PSCredentialTypes,System.Management.Automation.PSCredentialUIOptions)">
            <summary>
            Prompts the user for credentials using a specified prompt window caption, prompt message, user and target name, credential types allowed to be returned, and UI behavior options.
            </summary>
            <param name="caption">The caption for the message window.</param>
            <param name="message">The text of the message.</param>
            <param name="userName">The name of the user whose credential is to be prompted for. If this parameter set to null or an empty string, the function will prompt for the user name first.</param>
            <param name="targetName">The name of the target for which the credential is collected.</param>
            <param name="allowedCredentialTypes">An PSCredentialTypes enumeration constant that identifies the type of credentials that can be returned.</param>
            <param name="options">An PSCredentialUIOptions enumeration constant that identifies the UI behavior when it gathers the credentials.</param>
            <returns>A PSCredential object that contains the credentials for the target. </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.PromptForCredential(System.String,System.String,System.String,System.String)">
            <summary>
            Prompts the user for credentials with a specified prompt window caption, prompt message, user name, and target name.
            </summary>
            <param name="caption">The caption for the message window.</param>
            <param name="message">The text of the message.</param>
            <param name="userName">The name of the user whose credential is to be prompted for. If this parameter set to null or an empty string, the function will prompt for the user name first.</param>
            <param name="targetName">The name of the target for which the credential is collected.</param>
            <returns>A PSCredential object that contains the credentials for the target. </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.ReadLine">
            <summary>
            Reads characters entered by user until a newline (carriage return) is encountered.
            </summary>
            <returns>The characters entered by the user.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.ReadLineAsSecureString">
            <summary>
            Reads characters entered by the user until a newline (carriage return) is encountered and returns the characters as a secure string.
            </summary>
            <returns>A SecureString object that contains the characters entered by the user. </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.Write(System.ConsoleColor,System.ConsoleColor,System.String)">
            <summary>
            Writes characters to the output display of the host with possible foreground and background colors.
            </summary>
            <param name="foregroundColor">The foreground color of the display.</param>
            <param name="backgroundColor">The background color of the display.</param>
            <param name="value">The characters to be written.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.Write(System.String)">
            <summary>
            Writes characters to the output display of the host.
            </summary>
            <param name="value">The characters to be written.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.WriteDebugLine(System.String)">
            <summary>
            Displays a debug message to the user.
            </summary>
            <param name="message">Debug message supplied by the cmdlet.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.WriteErrorLine(System.String)">
            <summary>
            Writes a line to the error display of the host.
            </summary>
            <param name="value">The characters to be written.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.WriteLine(System.String)">
            <summary>
            Writes a line of characters to the output display of the host and appends a carriage return.
            </summary>
            <param name="value">The characters to be written.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.WriteProgress(System.Int64,System.Management.Automation.ProgressRecord)">
            <summary>
            Writes a progress report for display to the user.
            </summary>
            <param name="sourceId">Unique identifier of the source of the record. An int64 is used because the 'this' pointer of the command where the record originated from is used, and that may be from a remote runspace on a 64-bit computer.</param>
            <param name="record">A ProgressRecord object that contains the progress record to be displayed.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.WriteVerboseLine(System.String)">
            <summary>
            Writes a verbose line for display to the user.
            </summary>
            <param name="message">The verbose message to be displayed.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.WriteWarningLine(System.String)">
            <summary>
            Writes a warning line to be displayed the user.
            </summary>
            <param name="message">The warning message to be displayed.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.GetStringResultObject(System.String,System.Type,System.Boolean,System.Boolean,System.Object@,System.Exception@)">
            <summary>
            Converts <paramref name="str"/> to <paramref name="targetType"/> considering <paramref name="flagIsSecure"/> and
            <paramref name="isFromRemoteHost"/> and placing the result in <paramref name="resultObject"/>
            </summary>
            <param name="str">string to convert</param>
            <param name="targetType">type to convert the string to</param>
            <param name="flagIsSecure">true if targetType is SecureString</param>
            <param name="isFromRemoteHost">true if this conversion is being attempted in a remote host</param>
            <param name="resultObject">result from conversion</param>
            <param name="conversionException">conversion exception, if any</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.WrapString(System.String,System.Int32,System.Int32,System.Boolean,Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.DoSomethingWithString,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Wraps a string performing an action with each segment
            </summary>
            <param name="source">string to wrap</param>
            <param name="wrapLength">wrap segment size</param>
            <param name="previousLastLineLength">
            last line length currently being displayed to be subtracted from wrapLength for the first line
            </param>
            <param name="addNewLineOnLast">
            true if we should add a new line after the last segment
            </param>
            <param name="action">action to perform on each segment</param>
            <param name="foreground">foreground color</param>
            <param name="background">background color</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.GetOutputBackgroundColor(System.Windows.Media.Color)">
            <summary>
            If <paramref name="backGroundColor"/> is transparent returns PSGInternalHost.Current.Options.ConsolePaneBackgroundColor
            otherwise returns <paramref name="backGroundColor"/>.
            </summary>
            <param name="backGroundColor">Background color to return the resulting color from</param>
            <returns>The propper background color considering transparency</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.WriteToOutputWrapping(System.String,System.Boolean,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Writes source to the output wrapping, if needed
            </summary>
            <param name="source">string to be written to the output</param>
            <param name="addExtraLine">true if we should add a new line after adding source</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.GetValueConsideringCommands(System.String,System.Type,System.Boolean)">
            <summary>
            Retrieves the corresponding value to <paramref name="value"/> considering prompt commands
            </summary>
            <param name="value">The value we want to get the corresponding value from</param>
            <param name="targetType">the value's targetType</param>
            <param name="flagIsSecure">true if <paramref name="targetType"/> is SecureString</param>
            <returns>the corresponding value to <paramref name="value"/> considering prompt commands</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.Act(System.Int32@,Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.DoSomethingWithString,System.Text.StringBuilder,System.Boolean,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Called from WrapString to perform the action on each segment and do some bookkeeping
            </summary>
            <param name="firstLineLength">firstLineLength to be set to 0</param>
            <param name="action">action delegate to be performed</param>
            <param name="line">segment to perform action on and clean</param>
            <param name="shouldAddNewLine">repassed as is to the action delegate</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.AddAndFlush(System.String,System.Boolean,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Adds a line to the output
            </summary>
            <param name="line">line to br added</param>
            <param name="shouldAddNewLine">true if a new line should be added after adding the element</param>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.PromptInOutput(System.String,System.Boolean@,System.String@)">
            <summary>
            Prompts in the console
            </summary>
            <param name="promptMessage">overall prompt message</param>
            <param name="inputCanceled">set to true if the prompt has been canceled</param>
            <param name="readInput">input read from the console</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHostUserInterface.PromptInDialogOrOutput(System.String,System.String,System.Boolean,System.String,System.Management.Automation.Host.FieldDescription,System.Type,System.Object@,System.String@)">
            <summary>
            Prompts with a dialog or in the console
            </summary>
            <param name="caption">The caption or title of the prompt.</param>
            <param name="message">The description of the prompt.</param>
            <param name="flagIsSecure">true if retrieving a SecureString</param>
            <param name="promptMessage">overall prompt message</param>
            <param name="description">One of the values passed to prompt</param>
            <param name="descriptionType">The description type</param>
            <param name="resultValue">the result converted from string</param>
            <param name="resultString">the result as a string</param>
            <returns>faklse if the prompt has been canceled, true otherwise</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost">
            <summary>
            GPowerShell PSHost implementation
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.privateData">
            <summary>
            The host private data. This is static since it points to the static options.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.currentCulture">
            <summary>
            Value saved for the CurrentCulture property
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.currentUICulture">
            <summary>
            Value saved for the CurrentUICulture property
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.cultureLock">
            <summary>
            culture evaluation lock
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.instanceId">
            <summary>
            InstanceId of this host
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.ver">
            <summary>
            Host Version
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.runspace">
            <summary>
            The PowerShellTab associated with this host
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.hostUI">
            <summary>
            Host UI that actually performs the GUI functionality
            </summary>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.RunspaceStackChanged">
            <summary>
            An event signaling that the state of the runspace stack has changed
            The argument is true if the stack has grown, false if it has shrunk
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.#ctor(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Initializes a new instance of the GPSHost class.
            </summary>
            <param name="runspace">the PowerShellTab associated with this host</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.PrivateData">
            <summary>
            Gets the host private data that corresponds to the options.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.CurrentCulture">
            <summary>
            Gets the culture that the runspace will use to set the current culture on new threads. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.CurrentUICulture">
            <summary>
            Gets the UI culture that the runspace and cmdlets will use to do resource loading. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.InstanceId">
            <summary>
            Gets the identifier that uniquely identifies this instance of the host. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.Name">
            <summary>
            Gets the user-friendly name of the hosting application. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.UI">
            <summary>
            Gets the hosting application's implementation of the PSHostUserInterface base class. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.Version">
            <summary>
            Gets the version number of the hosting application. 
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.IsRunspacePushed">
            <summary>
            Gets a value indicating whether a runspace is pushed
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.Runspace">
            <summary>
            Gets the current runspace associated with this host.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.EnterNestedPrompt">
            <summary>
            Instructs the host to interrupt the currently running pipeline and start a new nested input loop. An input loop is the cycle of prompt, input, and execute. 
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.ExitNestedPrompt">
            <summary>
            Instructs the host to the currently running input loop. 
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.NotifyBeginApplication">
            <summary>
            Notifies the host that the Windows PowerShell runtime is about to execute a legacy command-line application. A legacy application is defined as a console-mode executable that may perform any of the following operations: read from stdin, write to stdout, write to stderr, or use any of the win32 console APIs. 
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.NotifyEndApplication">
            <summary>
            Notifies the host that the Windows PowerShell engine has completed the execution of a legacy command. A legacy application is defined as a console-mode executable that may perform any of the following operations: read from stdin, write to stdout, write to stderr, or use any of the Windows console APIs. 
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.SetShouldExit(System.Int32)">
            <summary>
            Request to end the current runspace. The Windows PowerShell runtime calls this method to request that the host application shut down and terminate the host root runspace. 
            </summary>
            <param name="exitCode">returns the exit code for the host</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.PushRunspace(System.Management.Automation.Runspaces.Runspace)">
            <summary>
            See base class.
            </summary>
            <param name="newRunspace">new runspace to push</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.PopRunspace">
            <summary>
            See base class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GPSHost.HandleRemoteRunspaceStateChanged(System.Object,System.Management.Automation.Runspaces.RunspaceStateEventArgs)">
            <summary>
            Handles state changed event of the remote runspace. If the remote runspace
            gets into a broken or closed state, writes a message and pops out the
            runspace
            </summary>
            <param name="sender">event sender</param>
            <param name="eventArgs">arguments describing this event</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames">
            <summary>
            Localizable AutomationNames
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.TextInput">
            <summary> "text input" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.PasswordInput">
            <summary> "password input" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OkName">
            <summary> "Resource String: OK" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.InputDescription">
            <summary> "input description" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.InputHelpMessage">
            <summary> "input help message" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.CancelName">
            <summary> "Resource String: Cancel" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.ManageThemesButtonAutomationName">
            <summary> "Resource String: Manage Themes Button" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowFontSizeComboBoxAutomationName">
            <summary> "Resource String: Options Window Font Size ComboBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowCancelButtonAutomationName">
            <summary> "Resource String: Options Window Cancel Button" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowEnterSelectsIntellisenseCheckBox2AutomationName">
            <summary> "Resource String: Options Window Enter Selects Intellisense CheckBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowAutoSaveTextBoxAutomationName">
            <summary> "Resource String: Options Window AutoSave Text Box" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowUseDefaultSnippetsCheckBoxAutomationName">
            <summary> "Resource String: Options Window Use Default Snippets CheckBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowShowInTheConsolePaneCheckBoxAutomationName">
            <summary> "Resource String: Options Window Show in the Console Pane CheckBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowShowLineNumbersCheckBoxAutomationName">
            <summary> "Resource String: Options Window Show Line Numbers Check Box" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowFontFamilyComboBoxAutomationName">
            <summary> "Resource String: Options Window Font Family Combo Box" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowApplyButtonAutomationName">
            <summary> "Resource String: Options Window Apply Button" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowPromptToSaveBeforeRunCheckBoxAutomationName">
            <summary> "Resource String: Options Window Prompt to Save Before Run CheckBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowSampleRichTextBoxAutomationName">
            <summary> "Resource String: Options Window Sample Rich Text Box" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowTimeoutInSecondsComboBoxAutomationName">
            <summary> "Resource String: Options Window Timeout In Seconds Combo Box" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowRecentFilesTextBoxAutomationName">
            <summary> "Resource String: Options Window Recent Files Text Box" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowRestoreButtonAutomationName">
            <summary> "Resource String: Options Window Restore Button" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowUseLocalHelpCheckBoxAutomationName">
            <summary> "Resource String: Options Window Use Local Help CheckBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowPositionComboBoxAutomationName">
            <summary> "Resource String: Options Window Position Combo Box" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowWarnAboutDuplicateFilesCheckBoxAutomationName">
            <summary> "Resource String: Options Window Warn About Duplicate Files CheckBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowShowOutliningCheckBoxAutomationName">
            <summary> "Resource String: Options Window Show Outlining CheckBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowShowToolBarCheckBoxAutomationName">
            <summary> "Resource String: Options Window Show ToolBar CheckBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowShowInTheScriptPaneCheckBoxAutomationName">
            <summary> "Resource String: Options Window Show in the Script Pane CheckBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowEnterSelectsIntellisenseCheckBoxAutomationName">
            <summary> "Resource String: Options Window Enter Selects Intellisense CheckBox" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.OptionsWindowOkButtonAutomationName">
            <summary> "Resource String: Options Window OK Button" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiAutomationNames.FixedWidthCheckBoxAutomationName">
            <summary> "Resource String: Fixed Width Checkbox" </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiNLStrings">
            <summary>
            Strings used in host GUI
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiNLStrings.HostName">
            <summary>Windows PowerShell ISE Host</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiNLStrings.BangBang">
            <summary> prompt command = "!!"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiNLStrings.BangHelp">
            <summary> prompt command = "!?"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiNLStrings.BangDollarNull">
            <summary>prompt command = "!$null"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiNLStrings.BangQuotes">
            <summary>prompt command = "!\"\""</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiNLStrings.DollarNull">
            <summary>prompt command = "$null"</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings">
            <summary>
            Host GUI implementation strings
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.CloseButtonTitle">
            <summary> "Resource String: _Stop" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.ProgressRecordFullDescription">
            <summary> "Resource String: {0}.\r\n    {1}, {2} remaining, {3}." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.ProgressRecordNoTime">
            <summary> "Resource String: {0}.\r\n    {1}, {2}." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.ProgressRecordNoOperation">
            <summary>  "Resource String: {0}.\r\n    {1}, {2} remaining."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.ProgressRecordNoTimeAndNoOperation">
            <summary> "Resource String: {0}.\r\n    {1}." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.Ok">
            <summary> "Resource String: _OK" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.Cancel">
            <summary> "Resource String: _Cancel" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.Input">
            <summary> "Windows PowerShell ISE - Input" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.CaptionDashMessage">
            <summary> "Resource String: {0} - {1}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.IntegerRequired">
            <summary> "Invalid Number. A number between 1 and {0} is expected." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.DebugFormat">
            <summary> "DEBUG: {0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.WarningFormat">
            <summary> "WARNING: {0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.VerboseFormat">
            <summary> "VERBOSE: {0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.CredentialTitle">
            <summary> "Windows PowerShell ISE Credential Request" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.PromptCommandsToolTip">
            <summary> "You can choose an empty string with !"", $null with !$null and exclamation point with !!." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.PromptToolTipFormat">
            <summary> "You can choose an empty string with {0}, {1} with {2} and exclamation point with {3}." </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.HostGuiStrings.#cctor">
            <summary>
            Initializes static members of the HostGuiStrings class.
            This ensures the proper sequence when initializing these fields
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.HostTextWriter">
            <summary>
            HostTextWriter bridges System.Console to the Host
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostTextWriter.hostOnThread">
            <summary>
            The host used in the Erite calls.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.HostTextWriter.previousOut">
            <summary>
            Previous out used, for instance, in tests where hostOnThread might be null.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.HostTextWriter.#cctor">
            <summary>
            Initializes static members of the HostTextWriter class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.HostTextWriter.#ctor">
            <summary>
            Prevents a default instance of the HostTextWriter class from being created.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.HostTextWriter.Encoding">
            <summary>
            Use the Consoles encoding
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.HostTextWriter.RegisterHost(System.Management.Automation.Host.PSHostUserInterface)">
            <summary>
            Called inside a runspace to register it
            </summary>
            <param name="host">The runspace host exposed in $host.UI</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.HostTextWriter.Write(System.String)">
            <summary>
            Write to host output
            </summary>
            <param name="value">message to be written</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.HostTextWriter.WriteLine(System.String)">
            <summary>
            Write line to host output
            </summary>
            <param name="value">message to be written</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.IHostGUI">
            <summary>
            Test helper interface that allows the replacement of a host modal dialog with a non interactive alternative
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.IHostGUI.ReadLineDialog(System.Boolean,System.Boolean,System.Type,System.String,System.String,System.String,System.String,System.Object@,System.String@)">
            <summary>
            Prompts a dialog to read a line
            </summary>
            <param name="flagIsSecure">true if retrieving a SecureString</param>
            <param name="isFromRemoteHost">true if prompt request came from a remote host</param>
            <param name="targetType">type of the result object</param>
            <param name="caption">dialog title</param>
            <param name="message">overall prompt message</param>
            <param name="elementName">element label</param>
            <param name="elementMessage">element help message</param>
            <param name="resultObject">resulting object</param>
            <param name="resultString">resulting string</param>
            <returns>false if the dialog has been canceled </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.IHostGUI.PromptForCredential(System.String,System.String,System.String,System.String,System.Management.Automation.PSCredentialTypes,System.Management.Automation.PSCredentialUIOptions)">
            <summary>
            Prompts the user for credentials using a specified prompt window caption, prompt message, user and target name, credential types allowed to be returned, and UI behavior options. 
            </summary>
            <param name="caption">The caption for the message window.</param>
            <param name="message">The overall prompt message.</param>
            <param name="userName">The name of the user whose credential is to be prompted for. If this parameter set to null or an empty string, the function will prompt for the user name first.</param>
            <param name="targetName">The name of the target for which the credential is collected.</param>
            <param name="allowedCredentialTypes">An PSCredentialTypes enumeration constant that identifies the type of credentials that can be returned.</param>
            <param name="options">An PSCredentialUIOptions enumeration constant that identifies the UI behavior when it gathers the credentials.</param>
            <returns>A PSCredential object that contains the credentials for the target. </returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.HostGUI">
            <summary>
            Implementation of IHostGUI that actually promts modal dialogs
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.HostGUI.ReadLineDialog(System.Boolean,System.Boolean,System.Type,System.String,System.String,System.String,System.String,System.Object@,System.String@)">
            <summary>
            Prompts a dialog to read a line
            </summary>
            <param name="flagIsSecure">true if retrieving a SecureString</param>
            <param name="isFromRemoteHost">true if prompt request came from a remote host</param>
            <param name="targetType">type of the result object</param>
            <param name="caption">dialog title</param>
            <param name="message">overall prompt message</param>
            <param name="elementName">element label</param>
            <param name="elementMessage">element help message</param>
            <param name="resultObject">resulting object</param>
            <param name="resultString">resulting string</param>
            <returns>false if the dialog has been canceled </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.HostGUI.PromptForCredential(System.String,System.String,System.String,System.String,System.Management.Automation.PSCredentialTypes,System.Management.Automation.PSCredentialUIOptions)">
            <summary>
            Prompts the user for credentials using a specified prompt window caption, prompt message, user and target name, credential types allowed to be returned, and UI behavior options. 
            </summary>
            <param name="caption">The caption for the message window.</param>
            <param name="message">The text of the message.</param>
            <param name="userName">The name of the user whose credential is to be prompted for. If this parameter set to null or an empty string, the function will prompt for the user name first.</param>
            <param name="targetName">The name of the target for which the credential is collected.</param>
            <param name="allowedCredentialTypes">An PSCredentialTypes enumeration constant that identifies the type of credentials that can be returned.</param>
            <param name="options">An PSCredentialUIOptions enumeration constant that identifies the UI behavior when it gathers the credentials.</param>
            <returns>A PSCredential object that contains the credentials for the target. </returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PromptForChoiceDialog">
            <summary>
            Implements the dialog used in PromptForChoice
            </summary>
            <summary>
            PromptForChoiceDialog
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PromptForChoiceDialog.result">
            <summary>
            Dialog result. -1 the dialog has been cancelled
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PromptForChoiceDialog.#ctor(System.String,System.String,System.Collections.ObjectModel.Collection{System.Management.Automation.Host.ChoiceDescription},System.Int32)">
            <summary>
            Initializes a new instance of the PromptForChoiceDialog class.
            </summary>
            <param name="caption">dialog title</param>
            <param name="message">dialog message/question</param>
            <param name="choices">choices to be presented</param>
            <param name="defaultChoice">indicates the default choice</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PromptForChoiceDialog.Result">
            <summary>
            Gets the dialog result. -1 the dialog has been cancelled
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PromptForChoiceDialog.PromptForChoiceDialog_PreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Used to handle Esc to set the result and close the dialog
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameters</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PromptForChoiceDialog.PromprForChoiceDialog_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to make the width of all buttons uniform.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PromptForChoiceDialog.Button_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when any button has been clicked to set the result and close the dialog.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PromptForChoiceDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog">
            <summary>
            Interaction logic for ReadLineDialog.xaml
            </summary>
            <summary>
            ReadLineDialog
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.targetType">
            <summary>
            type of object we are reading
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.resultingObject">
            <summary>
            the resulting object that should have the type targetType
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.flagIsSecure">
            <summary>
            True to use PasswordBox instead of TextBox
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.isFromRemoteHost">
            <summary>
            True to not do type conversions
            (bug Windows 7: #381643) + its bad to have potential side effects from casting on the client (think casting to a FileStream)
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.digitOnly">
            <summary>
            True if only digits should be allowed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.notANumberMessage">
            <summary>
            Message to display if digitOnly is true and could not convert to type
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.#ctor(System.Boolean,System.Boolean,System.Type,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the ReadLineDialog class.
            </summary>
            <param name="flagIsSecure">true if retrieving a SecureString</param>
            <param name="isFromRemoteHost">true if prompt request came from a remote host</param>
            <param name="targetType">type of the result object</param>
            <param name="caption">dialog title</param>
            <param name="message">overall prompt message</param>
            <param name="defaultText">Original text to populate the text box control</param>
            <param name="elementName">element label</param>
            <param name="elementMessage">element help message</param>
            <param name="digitOnly">true if only digits should be allowed</param>
            <param name="notANumberMessage">Message to display if digitOnly is true and could not convert to type</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.#ctor(System.Boolean,System.Boolean,System.Type,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Windows.Window)">
            <summary>
            Initializes a new instance of the ReadLineDialog class.
            </summary>
            <param name="flagIsSecure">true if retrieving a SecureString</param>
            <param name="isFromRemoteHost">true if prompt request came from a remote host</param>
            <param name="targetType">type of the result object</param>
            <param name="caption">dialog title</param>
            <param name="message">overall prompt message</param>
            <param name="defaultText">Original text to populate the text box control</param>
            <param name="elementName">element label</param>
            <param name="elementMessage">element help message</param>
            <param name="digitOnly">true if only digits should be allowed</param>
            <param name="notANumberMessage">Message to display if digitOnly is true and could not convert to type</param>
            <param name="owner">An alternative owner window</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.IsSecure">
            <summary>
            Gets a value indicating whether we use PasswordBox instead of TextBox
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.ResultObject">
            <summary>
            Gets the resulting object that should have the type targetType
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.TargetType">
            <summary>
            Gets the type of object we are reading
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.IsDataValid(System.Windows.IDataObject)">
            <summary>
            Returns true if <paramref name="data"/> is text
            that can be turned into a positive integer.
            </summary>
            <param name="data">This can come from drag and drop or paste operations.</param>
            <returns>true if <paramref name="data"/> is text that can be turbned into a positive integer.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.PreviewTextInputHandler(System.Object,System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Receives each character as it is typed to filter out non digits.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.Text_Drop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Called when dropping to cancel an invalid data drop.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.Text_DragOver(System.Object,System.Windows.DragEventArgs)">
            <summary>
            Called when dragging over to set the effect for valid data.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.PastingHandler(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Previews paste to  validate text changes.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.ReadLineDialog_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the dialog is loaded to set the minumum width of the dialog
            </summary>
            <param name="sender">event sender</param>
            <param name="args">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.CanEvaluateResultingObject">
            <summary>
            Returns a value indicating the resulting object has been correctly set
            </summary>
            <returns>a value indicating the resulting object has been correctly set</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.Ok_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            sets the result and closes the dialog
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ReadLineDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation">
            <summary>
            Information we keep regarding a ProgressRecord, ready to be displayed if bound to GUI.
            This can be considered a Tree Node class. The tree itself is ProgressSource
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.MarginStart">
            <summary>
            The Margin arround each progress bar that is not affected by its level
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.MarginStep">
            <summary>
            Number multiplied by the level to determine the total margin of a progress bar
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.progressRecord">
            <summary>
            The underlying ProgressRecord encapsulated by this ProgressBarInformation
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.parentProgress">
            <summary>
            The parent ProgressBarInformation idntified by the ProgressRecord's ParentActivityId. 
            This is null if the ProgressRecord's ParentActivityId is -1.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.subProgresses">
            <summary>
            Subprogresses of this progress
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.level">
            <summary>
            Nesting depth of this progress on its parent progresses.
            This is 0 if the ProgressRecord's ParentActivityId is -1.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.sourceId">
            <summary>
            The progress' Source Id
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.#ctor(System.Int64,System.Management.Automation.ProgressRecord)">
            <summary>
            Initializes a new instance of the ProgressBarInformation class.
            </summary>
            <param name="sourceId">the progress' Source Id</param>
            <param name="progressRecord">the underlying ProgressRecord encapsulated by this class</param>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.PropertyChanged">
            <summary>
            Notifies callers of property changes.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.FontSize">
            <summary>
            Gets the font size for progress text
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.PercentComplete">
            <summary>
            Gets the underlying ProgressRecord's PercentComplete
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.Description">
            <summary>
            Gets the text representation of this progress
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.ProgressRecord">
            <summary>
            Gets The underlying ProgressRecord encapsulated by this ProgressBarInformation
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.ProgressMargin">
            <summary>
            Gets the margin that could be used for a ProgressBar considering the nesting depth.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.TextMargin">
            <summary>
            Gets the margin that could be used for a text inside a ProgressBar considering the nesting depth.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.Level">
            <summary>
            Gets or sets the Nesting depth of this progress on its parent progresses.
            This is 0 if the ProgressRecord's ParentActivityId is -1.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.ParentProgress">
            <summary>
            Gets or sets the parent ProgressBarInformation idntified by the ProgressRecord's ParentActivityId. 
            This is null if the ProgressRecord's ParentActivityId is -1.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.SubProgresses">
            <summary>
            Gets the subprogresses of this progress
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.SourceId">
            <summary>
            Gets the progress' Source Id
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation.CopyProgressProperties(System.Management.Automation.ProgressRecord)">
            <summary>
            Copies the source progress to the ProgressRecord properly notifying of changes.
            This is called when a new ProgressRecord with the same ActivityId as 
            this.ProgressRecord.ActivityId is written.
            </summary>
            <param name="newRecord">new progress record</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource">
            <summary>
            Tree of current ProgressBarInformations
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.allProgresses">
            <summary>
            Dictionary of activity id into corresponding progress information
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.rootProgresses">
            <summary>
            Progresses with no parent progresses
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.flatenedProgresses">
            <summary>
            Flatenned view of the tree of progresses
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.owningTab">
            <summary>
            The tab that owns this progress source
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.updateTimer">
            <summary>
            Timer used to send messages to the UI thread
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.progressesHaveBeenAdded">
            <summary>
            flag indicating AddOrUpdate has been called and the updates have not yet been sent to the UI thread
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.#ctor(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Initializes a new instance of the ProgressSource class
            </summary>
            <param name="owningTab">tab that owns this object</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.ActionForNode">
            <summary>
            Delegate used in VisitAllNodes and VisitNode to perform node actions
            </summary>
            <param name="node">node to perform the action on</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.FlatenedProgresses">
            <summary>
            Gets the flatenned view of the tree of progresses
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.Clear">
            <summary>
            Clear the whole tree of ProcessBarInformations
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.AddOrUpdate(System.Int64,System.Management.Automation.ProgressRecord)">
            <summary>
            Called for each new progress entry to evaluate the need to Add a new ProgressBarInformation
            or updating an existing one.
            </summary>
            <param name="sourceId">source id for newProgress</param>
            <param name="newProgress">new progress</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.UpdateFlattenedProgresses">
            <summary>
            Rebuilds this.flattenedProgresses reflecting the tree in this.rootProgresses
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.AddNodeToProgress(Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation)">
            <summary>
            Used in UpdateFlattenedProgresses to add each node to this.flattenedProgresses
            </summary>
            <param name="node">node to be added to this.flattenedProgresses</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.SetNodeAndSubnodesLevel(Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation)">
            <summary>
            Sets the level of the node and all subnodes
            </summary>
            <param name="node">node to set the level for</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.SetNodeLevel(Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation)">
            <summary>
            Used in SetNodeAndSubnodesLevel to set the level of each node
            </summary>
            <param name="node">node to set the level for</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.VisitAllNodes(Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.ActionForNode)">
            <summary>
            Visit all nodes performing the given action on each node
            </summary>
            <param name="actionForNode">action to be taken for each node</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.VisitNode(Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.ActionForNode,Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation)">
            <summary>
            Called from VisitAllNodes() for each of the root progresses to perform actionforNode
            </summary>
            <param name="actionForNode">action to be taken for each node</param>
            <param name="rootProgress">one of the root progresses</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.Add(Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation)">
            <summary>
            1) Sets progressToBeAdded Parent
            2) Sets progressToBeAdded and subProgresses Level's
            3) Adds progressToBeAdded to (A) this.rootProgresses or (B) its parent suprogresses.
            4) Adds progressToBeAdded to this.allProgresses
            5) Calls this.UpdateFlattenedProgresses()
            </summary>
            <param name="progressToBeAdded">progress to be added</param>
            <exception cref="T:System.InvalidOperationException">
            If progressToBeAdded.ProgressRecord.ParentActivityId is not -1 and is not in this.allProcesses.
            If progressToBeAdded.ProgressRecord.ParentActivityId would cause progressToBeAdded to be added under itself
            </exception>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.Update(Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation,System.Management.Automation.ProgressRecord)">
            <summary>
            Called when a new progress matches an existing and its parent has not changed to copy the properties
            from the new progress to the existing one
            </summary>
            <param name="currentProgress">existing progress</param>
            <param name="newProgress">new progress</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.RemoveNode(Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation)">
            <summary>
            Removes the node when it is marked as completed
            </summary>
            <param name="currentProgress">node to remove</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.RemoveFromAllProgresses(Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation)">
            <summary>
            Removes <paramref name="currentProgress"/> from this.allProgresses
            </summary>
            <param name="currentProgress">progress to be removed</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.MoveFromOneParentToAnother(Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation,System.Management.Automation.ProgressRecord)">
            <summary>
            Called when a new progress matches an existing one and its parent has changed to move the 
            progress to the new parent and copy the properties of the new progress to the existing one
            </summary>
            <param name="currentProgress">existing progress</param>
            <param name="newProgress">new progress</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressSource.RemoveNodeFromItsParent(Microsoft.Windows.PowerShell.Gui.Internal.ProgressBarInformation)">
            <summary>
            Removes the node from either this.rootProgresses or its parent progress
            </summary>
            <param name="currentProgress">node to be removed from its parent</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ProgressControl">
            <summary>
            Control used to indicate progress
            </summary>
            <summary>
            ProgressControl
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressControl.#ctor">
            <summary>
            Initializes a new instance of the ProgressControl class
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProgressControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper">
            <summary>
            Adds some functionality to the underlying AllModulesViewModel that is specific to the ISE
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.canInsert">
            <summary>
            value indicating whether the Insert button should be enabled
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.canRun">
            <summary>
            value indicating whether the Copy button should be enabled
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.canRefresh">
            <summary>
            value indicating whether can run and not in remote session
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.viewModel">
            <summary>
            The viewModel we are wrapping
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.powerShellTab">
            <summary>
            The PowerShellTab containing this tool
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.runspaceStackSizeChanged">
            <summary>
            Whether the runspace stack has changed size (and thus we require a refresh)
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.#ctor(Microsoft.PowerShell.Commands.ShowCommandInternal.AllModulesViewModel,Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Initializes a new instance of the AllModulesViewModelWrapper class.
            </summary>
            <param name="viewModel">The viewModel to be wrapped</param>
            <param name="powerShellTab">The powershelltab containing the ShowCommand AddOn tool</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.Unregister">
            <summary>
            Unhooks all events from their sources in preparation for garbage collection
            </summary>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.PropertyChanged">
            <summary>
            Notifies of property changes
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.CanInsert">
            <summary>
            Gets a value indicating whether the Insert button should be enabled
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.CanCopy">
            <summary>
            Gets a value indicating whether the Copy button should be enabled
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.CanRun">
            <summary>
            Gets a value indicating whether the Run button should be enabled
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.CanRefresh">
            <summary>
            Gets a value indicating whether can run and not in remote session
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.SetCanRun">
            <summary>
            Called from the constructor, when CanRun changes or when CanInvoke changes
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.SetCanRefresh">
            <summary>
            Called from the constructor or when CanInvoke changes
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.SetCanInsert">
            <summary>
            Called from the constructor, when CanCopy changes or when CanInvoke changes
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.PowerShellTab_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Monitors changes in CanInvoke for the PowerShellTab, since it will affect CanRun and CanInsert
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.Host_RunspaceStackChanged(Microsoft.Windows.PowerShell.Gui.Internal.GPSHost,System.Boolean)">
            <summary>
            Responds to changes in the runspace stack
            </summary>
            <param name="host">The sending interactive host (should always be a GPSHost)</param>
            <param name="stackIncreased">Whether the stack increased or decreased in size</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.ViewModel_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Monitors changes to CanRun and CanCopy in the wrapped ViewModel since they affect this.CanRun, this.CanInsert and this.CanCopy
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AllModulesViewModelWrapper.OnNotifyPropertyChanged(System.String)">
            <summary>
            Used internaly to notify of a property change
            </summary>
            <param name="propertyName">name of the property that changed</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager">
            <summary>
            Manages setting the backgrounds and carets for editors.
            The background has to be set in each editor. The carets have to
            be set by editor category (Output, Command, Script).
            The 3 categories have been created because there are 3 background colors in
            the object model.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.DifferentColorLimit">
            <summary>
            Value used in AreColorsDifferentEnough as a threshold for when two collors are different
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.outputBackgroundBursh">
            <summary>
            Brush for the output background
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.scriptBackgroundBursh">
            <summary>
            Brush for the script background
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.highContrastBackgroundBursh">
            <summary>
            Brush for the output, command and script background when in high contrast
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.outputNormalCaretBursh">
            <summary>
            Brush for the output normal caret
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.scriptNormalCaretBursh">
            <summary>
            Brush for the script normal caret
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.highContrastNormalCaretBursh">
            <summary>
            Brush for the output, command and script normal caret when in high contrast
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.outputOverwriteCaretBursh">
            <summary>
            Brush for the output overwrite caret
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.scriptOverwriteCaretBursh">
            <summary>
            Brush for the script overwrite caret
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.highContrastOverwriteCaretBursh">
            <summary>
            Brush for the output, command and script overwrite caret when in high contrast
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.OutputBackgroundBursh">
            <summary>
            Gets the brush for the output background
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.OutputNormalCaretBursh">
            <summary>
            Gets the brush for the output normal caret
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.OutputOverwriteCaretBursh">
            <summary>
            Gets the brush for the output overwrite caret
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.ScriptBackgroundBursh">
            <summary>
            Gets the brush for the script background
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.ScriptNormalCaretBursh">
            <summary>
            Gets the brush for the script normal caret
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.ScriptOverwriteCaretBursh">
            <summary>
            Gets the brush for the script overwrite caret
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.HighContrastBackgroundBursh">
            <summary>
            Gets the brush for output, command and script background when in high cnontrast
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.HighContrastNormalCaretBursh">
            <summary>
            Gets the brush for output, command and script normal caret when in high cnontrast
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.HighContrastOverwriteCaretBursh">
            <summary>
            Gets the brush for output, command and script overwrite caret when in high cnontrast
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.SetBackgroundForAllScriptEditors">
            <summary>
            Called when the script background changes to change the background and caret of all scripts
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.SetBackgroundForAllOutputs">
            <summary>
            Called when the output background changes to change the background and caret of all outputs
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.SetEditorBackground(Microsoft.PowerShell.Host.ISE.ISEEditor)">
            <summary>
            Called when a new editor is created to set the background of the editor
            </summary>
            <param name="editor">editor to change the background</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.AreColorsDifferentEnough(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Verifies if two colors are different enough
            </summary>
            <param name="first">first color to compare</param>
            <param name="second">second color to compare</param>
            <returns>true if the two colors are different enough</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.EnsureContrastingColor(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Returns first if it is different enough from second or the complement of first if they are not
            </summary>
            <param name="backgroundColor">background color that comes from an editor background</param>
            <param name="selectionSystemColor">selection color that comes from a SystemColor</param>
            <returns>first if it is different enough from second or the complement of first if they are not</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.GetCorrespondingBrush(System.Windows.Media.Color,System.Windows.Media.SolidColorBrush@)">
            <summary>
            If currentBrush is null or of the wrong color, refresh it
            </summary>
            <param name="color">desired color</param>
            <param name="currentBrush">current brush field reference</param>
            <returns>returns currentBrush</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.GetCorrespondingBrush(System.Windows.Media.Color,System.Windows.Media.SolidColorBrush@,System.Double)">
            <summary>
            If currentBrush is null or of the wrong color, refresh it
            </summary>
            <param name="color">desired color</param>
            <param name="currentBrush">current brush field reference</param>
            <param name="opacity">desired opacity</param>
            <returns>returns currentBrush</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.GetCorrespondingSemiTransparentBrush(System.Windows.Media.Color,System.Windows.Media.SolidColorBrush@)">
            <summary>
            If currentBrush is null or of the wrong color, refresh it with a semi transparent brush by that color
            </summary>
            <param name="color">desired color</param>
            <param name="currentBrush">current brush field reference</param>
            <returns>returns currentBrush</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.GetCorrespondingComplementaryBrush(System.Windows.Media.Color,System.Windows.Media.SolidColorBrush@)">
            <summary>
            If currentBrush is null or of the wrong color, refresh it with a brush with the complementary color
            </summary>
            <param name="color">complement of desired color</param>
            <param name="currentBrush">current brush field reference</param>
            <returns>returns currentBrush</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.GetCorrespondingSemiTransparentComplementaryBrush(System.Windows.Media.Color,System.Windows.Media.SolidColorBrush@)">
            <summary>
            If currentBrush is null or of the wrong color, refresh it with a brush with the complementary color
            and semi transparent
            </summary>
            <param name="color">complement of desired color</param>
            <param name="currentBrush">current brush field reference</param>
            <returns>returns currentBrush</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.GetComplementaryColor(System.Windows.Media.Color)">
            <summary>
            Returns the complement of the given color
            </summary>
            <param name="color">color to get the complement of</param>
            <returns>The complement of the given color</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.SetBackgroundBrush(Microsoft.PowerShell.Host.ISE.ISEEditor,System.Windows.Media.SolidColorBrush)">
            <summary>
            Sets the background of the editor with nonHighContrastBrush if outside of high contrast or with
            ISEEditorBackgroundManager.HighContrastBackgroundBursh if in high contrast
            </summary>
            <param name="editor">editor to set the background of</param>
            <param name="nonHighContrastBrush">brush to be used outside of high contrast</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ISEEditorBackgroundManager.SetCaretBrushes(System.String,System.Windows.Media.SolidColorBrush,System.Windows.Media.SolidColorBrush)">
            <summary>
            Sets the caret brushes for the given categories to either caretNormalBrush and caretOverwriteBrush if outside of
            hish contrast or, in high contrast, to ISEEditorBackgroundManager.HighContrastNormalCaretBursh and 
            ISEEditorBackgroundManager.HighContrastOverwriteCaretBursh
            </summary>
            <param name="category">category to set the caret brushes to</param>
            <param name="caretNormalBrush">brush for the normal caret when outside of high contrast</param>
            <param name="caretOverwriteBrush">brush for the overwrite caret when outside of high contrast</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.Layout">
            <summary>
            Manages the layout of controls in the GUI
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.dot">
            <summary>
            Used in FindNameSplit
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.RunspaceControlPrefix">
            <summary>
            Used in SetBindings to indicate the runspaceControl
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.MainWindowPrefix">
            <summary>
            Used in SetBindings to indicate the mainWindow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.controlPropertyInformation">
            <summary>
            stores the information set in SetBindings and used in SetControlProperties regarding
            setting property values
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.gridColumnMaintenanceInformation">
            <summary>
            stores the information set in SetBindings and used in SetControlProperties regarding
            adding and removing columns to a grid
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.gridRowMaintenanceInformation">
            <summary>
            stores the information set in SetBindings and used in SetControlProperties regarding
            adding and removing rows to a grid
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.showEmbeddedCommands">
            <summary>
            value indicating whether embedded commands are being displayed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.progressControlVisibility">
            <summary>
            Visibility of the progress control
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.scriptExpanderVisibility">
            <summary>
            ScriptExpander Visibility
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.editorTabControlVisibility">
            <summary>
            EditorTabControl Visibility
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.outputVisibility">
            <summary>
            Output Visibility
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.topScriptHorizontalSplitterVisibility">
            <summary>
            Visibility of splitter betwwen Script Pane (when it is on top) and the input/output to the bottom
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.rightScriptVerticalSplitterVisibility">
            <summary>
            Visibility of splitter betwwen Script Pane (when it is on the right) and the input/output to the left
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.toolBarVisibility">
            <summary>
            ToolBar Visibility
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.showToolBar">
            <summary>
            true if the toobar is displayed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.showOutlining">
            <summary>
            true if the outlining is shown
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.showLineNumbers">
            <summary>
            true if the line numbers are shown
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.editorTabControlColumn">
            <summary>
            EditorTabControl's Column
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.editorTabControlRowSpan">
            <summary>
            editorTabControl's RowSpan
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.editorTabControlColumnSpan">
            <summary>
            EditorTabControl's ColumnSpan
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.horizontalToolAndSplitterColumnSpan">
            <summary>
            horizontalTool and splitter's ColumnSpan
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.verticalToolSplitterColumn">
            <summary>
            verticalToolSplitter's Column
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.verticalToolColumn">
            <summary>
            verticalTool's Column
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.horizontalToolRow">
            <summary>
            row for the horizontal tool
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.horizontalToolSplitterRow">
            <summary>
            row for the horizontal tool splitter
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.isScriptPaneExpanded">
            <summary>
            True when ScriptPane is expanded
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.isScriptMaximized">
            <summary>
            True when ScriptPane is Maximized
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.isScriptRight">
            <summary>
            True when ScriptPane is to the right
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.isScriptTop">
            <summary>
            True when ScriptPane is on top
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.editorRowHeight">
            <summary>
            editor's Row Height
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.outputInitialRowHeight">
            <summary>
            outputRow's Height
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.horizontalToolRowHeight">
            <summary>
            horizontalToolRow's Height
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.potentialScriptColumnWidth">
            <summary>
            potentialScriptColumn's Width
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.inputAndOutputColumnWidth">
            <summary>
            inputAndOutputColumn's Width
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.verticalToolColumnWidth">
            <summary>
            verticalToolColumnWidth's Width
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.verticalToolsPaneAndSplitterVisibility">
            <summary>
            vertical tools pane and splitter visibility
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Layout.horizontalToolsPaneAndSplitterVisibility">
            <summary>
            horizontal tools pane and splitter visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.ScriptExpanderVisibility">
            <summary>
            Gets a value indicating ScriptExpander Visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.ProgressControlVisibility">
            <summary>
            Gets the visibility for the progress control
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.EditorTabControlVisibility">
            <summary>
            Gets a value indicating EditorTabControl Visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.OutputVisibility">
            <summary>
            Gets a value indicating Output Visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.TopScriptHorizontalSplitterVisibility">
            <summary>
            Gets a value indicating Visibility of splitter betwwen Script Pane (when it is on top) and the input/output to the bottom
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.RightScriptVerticalSplitterVisibility">
            <summary>
            Gets a value indicating Visibility of splitter betwwen Script Pane (when it is on the right) and the input/output to the left
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.ToolBarVisibility">
            <summary>
            Gets a value indicating ToolBar Visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.ShowToolBar">
            <summary>
            Gets a value indicating whether the toolbar is displayed
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.ShowOutlining">
            <summary>
            Gets a value indicating whether outlinings are displayed
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.ShowLineNumbers">
            <summary>
            Gets a value indicating whether line numbers are displayed
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.EditorTabControlColumn">
            <summary>
            Gets a value indicating EditorTabControl's Column
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.EditorTabControlRowSpan">
            <summary>
            Gets a value indicating editorTabControl's RowSpan
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.EditorTabControlColumnSpan">
            <summary>
            Gets a value indicating EditorTabControl's ColumnSpan
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.HorizontalToolAndSplitterColumnSpan">
            <summary>
            Gets a value indicating horizontalTool and its splitter's ColumnSpan
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.VerticalToolSplitterColumn">
            <summary>
            Gets a value indicating verticalToolSplitter's Column
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.VerticalToolColumn">
            <summary>
            Gets a value indicating verticalTool's Column
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.HorizontalToolRow">
            <summary>
            Gets the row for the horizontal tool
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.HorizontalToolSplitterRow">
            <summary>
            Gets the row for the horizontal tool splitter
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.IsScriptPaneExpanded">
            <summary>
            Gets a value indicating whether the ScriptPane is expanded
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.ShowEmbeddedCommands">
            <summary>
            Gets a value indicating whether the embedded commands are displayed
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.IsScriptMaximized">
            <summary>
            Gets a value indicating whether the ScriptPane is Maximized
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.IsScriptRight">
            <summary>
            Gets a value indicating whether the ScriptPane is to the right
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.IsScriptTop">
            <summary>
            Gets a value indicating whether the ScriptPane is on top
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.EditorRowHeight">
            <summary>
            Gets a value indicating editor's Row Height
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.OutputInitialRowHeight">
            <summary>
            Gets a value indicating outputRow's Height
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.HorizontalToolRowHeight">
            <summary>
            Gets a value indicating horizontalTool's Height
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.PotentialScriptColumnWidth">
            <summary>
            Gets a value indicating potentialScriptColumn's Width
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.InputAndOutputColumnWidth">
            <summary>
            Gets a value indicating inputAndOutputColumn's Width
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.VerticalToolColumnWidth">
            <summary>
            Gets a value indicating verticalToolColumnWidth's Width
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.VerticalToolsPaneAndSplitterVisibility">
            <summary>
            Gets a value indicating the vertical tools pane and splitter visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.HorizontalToolsPaneAndSplitterVisibility">
            <summary>
            Gets a value indicating whether the horizontal tools pane and splitter visibility
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.ControlPropertyInformation">
            <summary>
            Gets a value with the information set in SetBindings and used in SetControlProperties
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.GridColumnMaintenanceInformation">
            <summary>
            Gets a value with the information set in SetBindings and used in SetControlProperties regarding
            adding and removing columns to a grid
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Layout.GridRowMaintenanceInformation">
            <summary>
            Gets a value with the information set in SetBindings and used in SetControlProperties regarding
            adding and removing rows to a grid
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.SetBindings(Microsoft.Windows.PowerShell.Gui.Internal.MainWindow,Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl)">
            <summary>
            Layout is an internal property in PowerShellTab, so regular DataBinding doesn't work. There are two workarrounds
            in the current code for the issue of Binding to internal properties:
                 - InternalPropertyBindingConverter, which was not used for 2 reasons:
                             1) It doesn't update controls when properties change. We could use explicit update, 
                     but we would need code similar to the code below to fetch individual BindingExpressions and manually
                     update the targety.
                             2) DataBinding for Grid's rows and columns doesn't work well without TwoWay, but TwoWay doesn't
            work without setting a Path in the Binding, which breaks the InternalPropertyBindingConverter.
                 - Wrapping objects in InternalObject, which is not used because wrapping the PowerShellTab causes too many side effects.
            </summary>
            <param name="mainWindow">mainWindow control for some of the bindings</param>
            <param name="runspaceControl">runspaceControl for some other bindings</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpdateLayout">
            <summary>
            Considers the Side By Side and script editor Expanded states to layout the controls correctly.
            Setting the visibility to collapsed as opposed to row heights and column widths to 0 
            is an accesibility requirement since narrator reads zero sized controls.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpdateLayoutGridLengths(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Called when the editor or console pane change sizes to store 
            the widths and heights of rows and columns. The sizes are stored as a proportion
            to the height for their use in UpdateRowAndColumnSizes.
            </summary>
            <param name="editorRowActualHeight">editorRow's ActualHeight</param>
            <param name="outputActualHeight">output's ActualHeight</param>
            <param name="potentialScriptColumnActualWidth">potentialScriptColumn's ActualWidth</param>
            <param name="inputAndOutputColumnActualWidth">inputAndOutputColumn's ActualWidth</param>
            <param name="horizontalToolHeight">horizontalTool's ActualHeight</param>
            <param name="verticalToolWidth">verticalTool's ActualWidth</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.PopulateGridColumnMaintenanceInformation(Microsoft.Windows.PowerShell.Gui.Internal.MainWindow,Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl)">
            <summary>
            Populate Layout.gridColumnMaintenanceInformation with the columns that have to be removed/added according to visibility properties
            </summary>
            <param name="mainWindow">main window dfor the application</param>
            <param name="runspaceControl">control for the current PowerShellTab</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.PopulateGridRowMaintenanceInformation(Microsoft.Windows.PowerShell.Gui.Internal.MainWindow,Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl)">
            <summary>
            Populate Layout.gridRowMaintenanceInformation with the rows that have to be removed/added according to visibility properties
            </summary>
            <param name="mainWindow">main window dfor the application</param>
            <param name="runspaceControl">control for the current PowerShellTab</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.GetBoundControl(Microsoft.Windows.PowerShell.Gui.Internal.MainWindow,Microsoft.Windows.PowerShell.Gui.Internal.RunspaceControl,System.String)">
            <summary>
            Gets the control corresponding to the control name in either mainWindow or runspacecontrol
            </summary>
            <param name="mainWindow">the main window</param>
            <param name="runspaceControl">the runspaceCon trol</param>
            <param name="controlName">control name</param>
            <returns>the control corresponding to the control name in either mainWindow or runspacecontrol</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.GetLayoutProperty(System.String)">
            <summary>
            Gets the PropertyInfo from this class for the given property name
            </summary>
            <param name="layoutPropertyName">property name to get the PropertyInfo from</param>
            <returns>The PropertyInfo from this class for the given property name</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.FindNameSplit(System.Windows.FrameworkElement,System.String)">
            <summary>
            Returns the element starting at <paramref name="rootElement"/> and following the control names in <paramref name="path"/>.
            </summary>
            <param name="rootElement">Root element to search</param>
            <param name="path">control path to seach</param>
            <returns>The element starting at <paramref name="rootElement"/> and following the control names in <paramref name="path"/>.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.GetValidSize(System.Double)">
            <summary>
            Gets a valid column or width corresponding to size.
            </summary>
            <param name="size">the original size</param>
            <returns>the valid version of size</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpdateGridLengthRowsHorizontalTools(System.Double,System.Double,System.Double)">
            <summary>
            Called from UpdateLayoutGridLengths to update the settings for rows when the horizontal tools is present
            </summary>
            <param name="editorRowActualHeight">editorRow's ActualHeight</param>
            <param name="outputActualHeight">output's ActualHeight</param>
            <param name="horizontalToolHeight">horizontal tools pane's ActualWidth</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpdateGridLengthRowsNoHorizontalTools(System.Double,System.Double)">
            <summary>
            Called from UpdateLayoutGridLengths to update the settings for rows when the horizontal tools is not present
            </summary>
            <param name="editorRowActualHeight">editorRow's ActualHeight</param>
            <param name="outputActualHeight">output's ActualHeight</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpgradeGridLengthColumnNoVerticalTools(System.Double,System.Double)">
            <summary>
            Called from UpdateLayoutGridLengths to update the settings for columns when the horizontal tools pane is *not* opened
            </summary>
            <param name="potentialScriptColumnActualWidth">potentialScriptColumn's ActualWidth</param>
            <param name="inputAndOutputColumnActualWidth">inputAndOutputColumn's ActualWidth</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpgradeGridLengthColumnVerticalTools(System.Double,System.Double,System.Double)">
            <summary>
            Called from UpdateLayoutGridLengths to update the settings for columns when the horizontal tools pane is *not* opened
            </summary>
            <param name="potentialScriptColumnActualWidth">potentialScriptColumn's ActualWidth</param>
            <param name="inputAndOutputColumnActualWidth">inputAndOutputColumn's ActualWidth</param>
            <param name="verticalToolWidth">vertical tool's pane ActualWidth</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpdateVisibilitiesRowsAndColumns">
            <summary>
            Updates Visibilities, Rows, Columns and ColumnSpans
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.SetControlProperties">
            <summary>
            Sets the values of all properties in this.controlPropertyInformation
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpdateRowAndColumnSizes">
            <summary>
            Reads user setting widths and heights into property values.
            Uses the stored values of columns and widths to properly size the internal grids.
            The proportional sizes and the use of GridUnitType.Star here are essential since 
            SridsSplitters will push items away from the screen (including the splitter themselves!) 
            if GridUnitType.Star is not used for both columns/rows surrounding the splitter.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpdateRowSizesHorizontalTool">
            <summary>
            Reads user settings into row heights when the horizontal tool pane is visible
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpdateRowSizesNoHorizontalTool">
            <summary>
            Reads user settings into row heights when the horizontal tool pane is *not* visible
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpdateColumnSizesNoVerticalTool">
            <summary>
            Reads user settings into column widths when the vertical tool pane is *not* visible
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Layout.UpdateColumnSizesVerticalTool">
            <summary>
            Reads user settings into column widths when the vertical tool pane is visible
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService">
            <summary>
            Tokenizes ITextBuffer for powershell scripts in a separate thread.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.PoundRegion">
            <summary>
            Name for the start region comment
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.PoundEndRegion">
            <summary>
            Name for the end region comment
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.openChars">
            <summary>
            Used to map {([ to })]
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.emptyTokens">
            <summary>
            Empty collection of PSTokens used as an initial result
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.emptyDictionary">
            <summary>
            Empty dictionary to be used as an initial value for the brace matching results
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.emptyRegions">
            <summary>
            Empty region list used as an initial result
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.emptyTokenSpans">
            <summary>
            Empty classifications
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.emptyErrorTags">
            <summary>
            Empty error tags
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.workflowLoaded">
            <summary>
            Flag to let us know what we can skip trying to load the workflow module
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.generatedTokens">
            <summary>
            Tokenization tokens
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.generatedAst">
            <summary>
            Tokenization ast
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.startBraces">
            <summary>
            Dictionary of start braces to end braces
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.endBraces">
            <summary>
            Dictionary of end braces to start braces
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.regions">
            <summary>
            Regions found when parsing
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.errorTags">
            <summary>
            The error tags retrieved
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.useConsoleTokens">
            <summary>
            true to return classifications for the console
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.tokenSpans">
            <summary>
            classifications retrieved
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.#ctor(Microsoft.VisualStudio.Text.ITextBuffer,System.Boolean)">
            <summary>
            Initializes a new instance of the PowerShellTokenizationService class
            </summary>
            <param name="buffer">editor buffer</param>
            <param name="useConsoleTokens">true to use the console classifications</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.OpenChars">
            <summary>
            Gets the array used to map {([ to })]
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.GetRegionsAndBraceMatchingInformation(System.String,System.Int32,System.Management.Automation.Language.Token[],System.Collections.Generic.Dictionary{System.Int32,System.Int32}@,System.Collections.Generic.Dictionary{System.Int32,System.Int32}@,System.Collections.Generic.List{Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation{Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag}}@)">
            <summary>
            Called after the tokenization is done to figure out which brace matchings should be present
            </summary>
            <param name="spanText">The text we want spans from</param>
            <param name="spanStart">the position where the text starts in the buffer</param>
            <param name="generatedTokens">tokenization result</param>
            <param name="startBraces">dicitionary of end brace positions into start brace positions</param>
            <param name="endBraces">dicitionary of start brace positions into end brace positions</param>
            <param name="regions">list of regions</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.SetEmptyTokenizationProperties">
            <summary>
            Called to set initial empty tokenization results
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.Tokenize(Microsoft.VisualStudio.Text.ITrackingSpan,System.String)">
            <summary>
            Called from a separate thread to do the tokenization
            </summary>
            <param name="spanToTokenize">span to tokenize</param>
            <param name="spanText">text to tokenize</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.SetTokenizationProperties">
            <summary>
            Called when the buffer tokenization is accurate for the last buffer version
            To set the results of tokenization as buffer properties
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.RemoveCachedTokenizationProperties">
            <summary>
            Removes properties used as a tag cache
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.AddOutlinesForComment(System.Int32,System.Collections.Generic.List{Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation{Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag}},System.String,System.Collections.Generic.Stack{System.Management.Automation.Language.Token},System.Management.Automation.Language.Token)">
            <summary>
            Called from GetRegionsAndBraceMatchingInformation to deal with comment tokens
            </summary>
            <param name="spanStart">The position where the text starts in the buffer</param>
            <param name="regions">outline regions</param>
            <param name="text">text being tokenized</param>
            <param name="poundRegionStart">stach of #region commentsd already found</param>
            <param name="commentToken">token with comment</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.AddBraceMatchingAndOutlinesForString(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.List{Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation{Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag}},System.String,System.Management.Automation.Language.StringToken)">
            <summary>
            Called from GetRegionsAndBraceMatchingInformation to deal with string tokens
            </summary>
            <param name="spanStart">the position where the text starts in the buffer</param>
            <param name="startBraces">dictionary of start braces</param>
            <param name="endBraces">dictionary of end braces</param>
            <param name="regions">outline regions</param>
            <param name="text">text being tokenized</param>
            <param name="stringToken">string token</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.FindAndRemove(System.Char,System.Collections.Generic.List{Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.BraceInformation})">
            <summary>
            Finds c in braces from end to the begining. If c is not in braces, null is returned otherwise
            returns the corresponding match and removes it from braces list
            </summary>
            <param name="c">character to look for</param>
            <param name="braces">list of current braces found</param>
            <returns>
            If c is not in braces, null is returned otherwise returns the corresponding match
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.AddRegion(System.Int32,System.String,System.Collections.Generic.List{Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation{Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag}},System.Int32,System.Int32)">
            <summary>
            Add an outline region to <paramref name="regions"/>
            </summary>
            <param name="spanStart">the position where the text starts in the buffer</param>
            <param name="text">region text</param>
            <param name="regions">list we are adding the region to</param>
            <param name="start">region start</param>
            <param name="end">region end</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.AddRegion(System.Int32,System.String,System.Collections.Generic.List{Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation{Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag}},System.Int32,System.Int32,System.String)">
            <summary>
            Add an outline region to <paramref name="regions"/>
            </summary>
            <param name="spanStart">the position where the text starts in the buffer</param>
            <param name="text">region text</param>
            <param name="regions">list we are adding the region to</param>
            <param name="start">region start</param>
            <param name="end">region end</param>
            <param name="collapsedText">text for the region when collapsed</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.AddRegion(System.Int32,System.String,System.Collections.Generic.List{Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation{Microsoft.VisualStudio.Text.Tagging.IOutliningRegionTag}},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Add an outline region to <paramref name="regions"/>
            </summary>
            <param name="spanStart">the position where the text starts in the buffer</param>
            <param name="text">region text</param>
            <param name="regions">list we are adding the region to</param>
            <param name="start">region start</param>
            <param name="end">region end</param>
            <param name="collapsedText">text for the region when collapsed</param>
            <param name="collapsedTooltip">tooltip for the region when collapsed</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.AddMatch(System.Int32,System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.Int32,System.Int32)">
            <summary>
            Adds matching information in startBraces and endBraces
            </summary>
            <param name="spanStart">the position where the text starts in the buffer</param>
            <param name="startBraces">staer brace dictionary</param>
            <param name="endBraces">end brace dictionary</param>
            <param name="start">start position</param>
            <param name="end">end position</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.EnsureWorkflowAssemblyLoaded">
            <summary>
            Load the PSWorkflow module if it hasn't already been loaded.
            We do this so we get Intellisense/tab completion on workflow parameters
            as well as syntax errors specific to workflows.
            The module is loaded into a throwaway runspace because we really only
            need the right assemblies loaded.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.AddSpansForStringToken(System.Management.Automation.Language.StringExpandableToken,System.Int32)">
            <summary>
            Add the spans for the tokens nested in an expandable string token.
            </summary>
            <param name="stringToken">The expandable string token with nested tokens.</param>
            <param name="spanStart">The start of the full span we tokenized</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.AddSpanForToken(System.Management.Automation.Language.Token,System.Int32)">
            <summary>
            Add a span for the given parameters.
            </summary>
            <param name="token">The token we want to add a span for</param>
            <param name="spanStart">The start of the full span we tokenized</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.AddSpan(Microsoft.VisualStudio.Text.Classification.IClassificationType,System.Int32,System.Int32)">
            <summary>
            Add a span (if appropriate) for the given parameters.
            </summary>
            <param name="classificationType">The classification type</param>
            <param name="start">The start of the span</param>
            <param name="length">The length of the span</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.AddErrorTagSpans(System.Int32,System.Management.Automation.Language.ParseError[])">
            <summary>
            Adds ErrorTags in <paramref name="errors"/> addinf <paramref name="spanStart"/> ofset
            </summary>
            <param name="spanStart">the start of the span we are tokenizing</param>
            <param name="errors">errors to add tags for</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.BraceInformation">
            <summary>
            Information about a brace found in the editor
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.BraceInformation.Character">
            <summary>
            The brace character
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.BraceInformation.Position">
            <summary>
            The position of the brace
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.BraceInformation.#ctor(System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the BraceInformation struct
            </summary>
            <param name="character">the brace character</param>
            <param name="position">the position of the brace</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation`1">
            <summary>
            Information used to create the TagSpan of T in the UI thread
            </summary>
            <typeparam name="T">type of tag</typeparam>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation`1.start">
            <summary>
            error start
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation`1.length">
            <summary>
            error length
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation`1.tag">
            <summary>
            tag from start to start + length
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation`1.#ctor(System.Int32,System.Int32,`0)">
            <summary>
            Initializes a new instance of the TagInformation struct
            </summary>
            <param name="start">the error start</param>
            <param name="length">the error length</param>
            <param name="tag">the tag from start to start + length</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.TagInformation`1.GetTagSpan(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Called from the UI thread to get the error tag if it is valid or null otherwise
            </summary>
            <param name="snapshot">buffer snapshot</param>
            <returns>the error tag if it is valid or null otherwise</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.ClassificationInformation">
            <summary>
            Information used to create a classification in the UI thread
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.ClassificationInformation.start">
            <summary>
            classification start
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.ClassificationInformation.length">
            <summary>
            classification length
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.ClassificationInformation.classificationType">
            <summary>
            classification type from start to start + length
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.ClassificationInformation.#ctor(System.Int32,System.Int32,Microsoft.VisualStudio.Text.Classification.IClassificationType)">
            <summary>
            Initializes a new instance of the ClassificationInformation struct
            </summary>
            <param name="start">the classification start</param>
            <param name="length">the classification length</param>
            <param name="classificationType">classification type from start to start + length</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.ClassificationInformation.Length">
            <summary>
            Gets the classification length
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.ClassificationInformation.Start">
            <summary>
            Gets the classification start
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PowerShellTokenizationService.ClassificationInformation.ClassificationType">
            <summary>
            Gets the classification type from start to start + length
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker">
            <summary>
            Host functionality
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.registerConsoleWriter">
            <summary>
            Register the HostTextWriter to the runspace
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.setOutputEncodingText">
            <summary>
            Set output encoding to the Console Output encoding so that findstr etc work on Non-Default locales
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.moreFunctionText">
            <summary>
            more function
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.psEditFunctionText">
            <summary>
            psEdit function
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.importISEModuleCommandText">
            <summary>
            Command to import the ise module
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.useTestProfile">
            <summary>
            value indicating we should use a test profile name
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.runspace">
            <summary>
            The controller used to run profiles
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.#ctor(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Initializes a new instance of the ProfileInvoker class.
            </summary>
            <param name="runspace">The runspace used to run profiles</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.UseTestProfile">
            <summary>
            Gets or sets a value indicating whether we should use a test profile name
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.AddVariable(Microsoft.PowerShell.Host.ISE.PowerShellTab,System.String,System.Object,System.Management.Automation.ScopedItemOptions)">
            <summary>
            Adds the variable.
            </summary>
            <param name="runspace">runspace where to set the variable.</param>
            <param name="variableName">variable name.</param>
            <param name="variableValue">variable value.</param>
            <param name="options">variable options.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.GetFullProfileFileName(System.String,System.Boolean)">
            <summary>
            Used in tests to get the profile file names.
            </summary>
            <param name="shellId">shell id, null for all hosts.</param>
            <param name="forCurrentUser">true for current user, false for al users.</param>
            <returns>The profile file name corresponding to the shellId and forCurrentUser.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.PrepareSession">
            <summary>
            Prepares the ISE's runspace with some configuration settings and
            helper functionality.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.LoadISEModule">
            <summary>
            Loads the ISE's PowerShell module.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.SetVariablesAndStartRunningProfiles">
            <summary>
            Runs all profiles
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ProfileInvoker.AddDollarProfile">
            <summary>
            Sets $profile. This is also done in HostUtilities.GetProfileCommands but if NoProfile us used
            It has toi be set here
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService">
            <summary>
            Base class for all tokenization services. Starts tokenization in a separate thread.
            When the tokenization is done, places token information in the 
            buffer properties and then triggers the event TokenizationComplete.The information is
            placed in buffer properties because
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.FilePath">
            <summary>
            We need FilePath to pass it inside Parser for better experience:
            Particularly filePath is needed for 'using module .\...' to resolve against file location.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.buffer">
            <summary>
            Editor buffer
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.isBufferTokenizing">
            <summary>
            Controls access to StartTokenizeBuffer so that there is only one thread tokenizing at a time
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.spanToTokenize">
            <summary>
            The span to tokenize
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.pauseTokenization">
            <summary>
            Event used by the output to pause tokenization while output is being produced
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the PSBufferTokenizationService class
            </summary>
            <param name="buffer">editor buffer</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.Finalize">
            <summary>
            Finalizes an instance of the PSBufferTokenizationService class
            </summary>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.TokenizationComplete">
            <summary>
            Event triggered when the tokenization is done
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.SpanToTokenize">
            <summary>
            Gets or sets the span being tokenized in StartTokenizeBuffer
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.PauseTokenization">
            <summary>
            Gets the event used by the output to pause tokenization while output is being produced
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.Buffer">
            <summary>
            Gets the editor buffer
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.Dispose">
            <summary>
            Dispose method in IDisposeable
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.Initialize">
            <summary>
            Performs the post construction virtual calls to initialize the service.
            Virtual methods cannot be called from constructors.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.StartTokenizeBuffer">
            <summary>
            Called to tokenize the buffer in a separate thread and to call the callback when tokenization is done
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.SetEmptyTokenizationProperties">
            <summary>
            Called to set initial empty tokenization results
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.SetTokenizationProperties">
            <summary>
            Called when the buffer tokenization is accurate for the last buffer version
            To set the results of tokenization as buffer properties
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.RemoveCachedTokenizationProperties">
            <summary>
            Removes properties used as a tag cache
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.Tokenize(Microsoft.VisualStudio.Text.ITrackingSpan,System.String)">
            <summary>
            Called from a separate thread to do the tokenization
            </summary>
            <param name="tokenizationSpan">span we are tokenizing</param>
            <param name="spanToTokenizeText">text to be tokenized</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.SetBufferProperty(System.Object,System.Object)">
            <summary>
            Sets the property value in the buffer, removing it if the property is already present
            </summary>
            <param name="key">key of the property to set</param>
            <param name="propertyValue">value of the property to set</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.OnTokenizationComplete">
            <summary>
            Called to trigger the TokenizationComplete event
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSBufferTokenizationService.Dispose(System.Boolean)">
            <summary>
            Implements IDisposable logic
            </summary>
            <param name="isDisposing">true if being called from Dispose</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PSGData">
            <summary>
            The root of the application's logic layer
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGData.powerShellTabs">
            <summary>
            PowerShellTabs currently opened
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGData.#ctor">
            <summary>
            Initializes a new instance of the PSGData class.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSGData.PowerShellTabs">
            <summary>
            Gets the PowerShellTabs in the application
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor">
            <summary>
            Script Editor
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.tooltip">
            <summary>
            Tooltip used to display variables
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.tooltipContent">
            <summary>
            Content of the tooltip used to display variables
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.pendingTooltipRequest">
            <summary>
            tooltip request that is currently being processed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.mouseHoverTimer">
            <summary>
            Timer used to simulate the mouse hover event
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.#ctor(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Initializes a new instance of the ScriptEditor class.
            </summary>
            <param name="contentType">content type</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestCallback">
            <summary>
            Callback for the TooltipRequest event
            </summary>
            <param name="request">The original request</param>
            <param name="tooltipValue">The value of the tooltip</param>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequest">
            <summary>
            Event raised to request the value of the tooltip
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.DisplayTooltip">
            <summary>
            Gets a value indicating whether to display the tooltip or not 
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.OnTooltipRequest(Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestEventArgs)">
            <summary>
            Raises the TooltipRequest event
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.GetExpressionSpan(System.Management.Automation.Language.Ast)">
            <summary>
            Returns the span for the ast if the ast can be safely evaluated by the debugger
            for the purposes of displaying a tooltip with the expressions value.
            </summary>
            <param name="ast">The ast to find the span for</param>
            <returns>A span, or null</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.OnHostControlToolTipOpening(System.Object,System.Windows.Controls.ToolTipEventArgs)">
            <summary>
            Ensures that the tooltip is displayed only when DisplayTooltip is true
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.OnHostControlMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Starts the timer that displays the tooltip
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.OnHostControlMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Disables the tooltip when the mouse leaves the editor control
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.MouseHoverTimerCallback(System.Object)">
            <summary>
            Starts an asynchronous request for the tooltip
            </summary>
            <param name="state">The parameter <paramref name="state"/> is not used</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.GetAstAtMousePosition(System.Management.Automation.Language.Ast)">
            <summary>
            Returns the ast at the current mouse position
            </summary>
            <param name="ast">The full ast</param>
            <returns>Ast, or null if there is no ast at the current mouse position</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestCompletionCallback(Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestEventArgs,System.String)">
            <summary>
            Completes an asyncrhonous request for a tooltip
            </summary>
            <param name="request">tooltip request</param>
            <param name="tooltipValue">value of the tooltip</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestEventArgs">
            <summary>
            Arguments to the TooltipRequest event
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestEventArgs.expression">
            <summary>Expression to evaluate</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestEventArgs.callback">
            <summary>Callback for tooltip request</summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestEventArgs.#ctor(System.String,Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestCallback)">
            <summary>
            Initializes a new instance of the TooltipRequestEventArgs class.
            Initializes the arguments with an expression
            </summary>
            <param name="expression">expression to evaluate</param>
            <param name="callback">request callback</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestEventArgs.Expression">
            <summary>Gets the expression to evaluate</summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestEventArgs.Callback">
            <summary>Gets the the subscriber must call this function with the result of the evaluating the expression</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager">
            <summary>
            Manages the saving and restoring of auto save information.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.autoSaveTimer">
            <summary>
            Timer used to save the files
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.filesPath">
            <summary>
            Path where files should be saved
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.informationPath">
            <summary>
            Path where information about auto save files should be saved
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.currentInformationFilePath">
            <summary>
            The full path to the file where the information in autoSaveInformation is saved
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.isInitialized">
            <summary>
            Set to true when all paths required for auto saving are available
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.performingRecovery">
            <summary>
            Value indicating whether recovery is being performed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.autoSaveMutex">
            <summary>
            Used to prevent concurrent access to the auto save file information files
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.currentProcess">
            <summary>
            Used for the id of the current processto name the auto save information file
            and for the name of the current process to detect if previous auto save 
            informations should be retrieved in PErformRecovery
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.autoSaveInformation">
            <summary>
            Dictionary with the auto save information. The first key is the PowerShellTab. The second key is ISEFile FullPath.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.IsInitialized">
            <summary>
            Gets a value indicating whether all paths required for auto saving are available
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.PerformingRecovery">
            <summary>
            Gets a value indicating whether recovery is being performed.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.Start(System.String)">
            <summary>
            Called when the application starts to perform auto save initialization
            </summary>
            <param name="configFilePath">path where files are auto saved</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.GetAutoSaveInformationState(System.Boolean@,System.Boolean@)">
            <summary>
            Gets the two booleans representing recovery state
            </summary>
            <param name="hasInformationButOnlyForTitledSaved">
            True if it has recovered files, but they are all titled and saved.
            Titled and saved files will not have an auto save file.
            </param>
            <param name="hasInformation">
            True if it has recovered any files at all, with or without auto save files.
            </param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.SetAutoSavePaths(System.String)">
            <summary>
            Sets the path where files are auto saved
            </summary>
            <param name="configFilePath">config file path</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.StartListeningToTimerOptionChange">
            <summary>
            Starts listening for changes in Options' AutoSaveMinuteIntervalStarts to reset the timer when it changes
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.DiscardAutoSave">
            <summary>
            Called to discard auto save information
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.StartTimer">
            <summary>
            Starts the Auto Save timer
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.PerformRecovery">
            <summary>
            Reads the information from one of the auto save files restoring the files
            </summary>
            <returns>True if it was able to recover all files</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveStep">
            <summary>
            Ensures we have the correct auto save information for all files, deleting information no longer used
            and generating the necessary information to reflect the current files. Performing these steps:
                1) Delete auto save information for files that have been closed, and auto save files for files that have been saved.
                2) Create Auto Save information for new files (titled, untitled, saved or unsaved)
                3) Save the auto save information in a file
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.DeleteAutoSaveInformationFiles">
            <summary>
            Called from DiscardAutoSave to delete all AutoSave information
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.CanFindProcessBySameName(System.Int32)">
            <summary>
            Returns true if it is possible to find the process with processId and
            it has the same name as the current process
            </summary>
            <param name="processId">Process id of the process we want to find</param>
            <returns> 
            true if it is possible to find the process with processId and 
            it has the same name as the current process
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.TryGetFiles(System.String)">
            <summary>
            Tries to get a list of the files under path
            </summary>
            <param name="path">directory we want to get files from</param>
            <returns>list of the files under path or null if it could not be retrieved</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.TryCreateDirectoryIfNecessary(System.String)">
            <summary>
            Tries to create the directory iof it does not exist
            </summary>
            <param name="directoryName">directory to create</param>
            <returns>false if it could not be created</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.Options_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the Options properties change to reinstall the timer if AutoSaveMinuteInterval changes
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.InstallAutoSaveTimer">
            <summary>
            Installs the auto save timer initially or when AutoSaveMinuteInterval changes
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.StopTimer">
            <summary>
            Stops the auto save timer, if present
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSave_Tick(System.Object,System.EventArgs)">
            <summary>
            Calls the auto save step method
            </summary>
            <param name="sender">ignored event sender</param>
            <param name="e">ignored event parameter</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.DeleteAutoSaveInfoForFilesAndTabsNotPresent">
            <summary>
            Step #1 of 3 of the AutoSave_Tick, delete auto save information for files that have been seved or closed
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.CreateAutoSaveInfoForFilesAndTabs">
            <summary>
            Step #2 of 3 of the AutoSave_Tick, create Auto Save information for new files (titled, untitled, saved or unsaved)
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.SaveAutoSaveInformationFile">
            <summary>
            Step #3 of the AutoSave_Tick, saves the AutoSaveInformation file to disk
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.CreateTabsIfNecessary(System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Host.ISE.PowerShellTab},System.Collections.Generic.List{Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation})">
            <summary>
            Called from PerformRecovery to Fill in the tabs collection with newly created tabs
            </summary>
            <param name="tabs">the newly created tabs</param>
            <param name="infos">list of all the auto save informations</param>
            <returns>True if it was bossible to create all tabs</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AddAutoSaveInformation(Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation)">
            <summary>
            Called from PerformRecovery to add the info to AutoSaveManager.autoSaveInformation
            </summary>
            <param name="info">the AutoSaveFileInformation to be added</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.TryAddISEFile(Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation,System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Host.ISE.PowerShellTab})">
            <summary>
            Called from PerformRecovery to add a new ISEFile based on info to its proper
            PowerShellTab.files collection. The PowerShellTab is retrieved from powerShellTabs.
            </summary>
            <param name="info">Information used to add a new ISEFile</param>
            <param name="powerShellTabs">List of all current PowerShellTabs</param>
            <returns>true if it was able to add the new ISEFile</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.TryAddAutoSaved(Microsoft.PowerShell.Host.ISE.ISEFileCollection,Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation)">
            <summary>
            Called from TryAddISEFile to actually try to add a new ISEFile based on the auto save information from its parameters
            </summary>
            <param name="files">collection to add the new ISEFile to</param>
            <param name="info">The AutoSavedInformation we are basing the new ISEFile on</param>
            <returns>The newly added ISEFile or null if it could not be added</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.GetUntitledFullPathFromFileName(System.String)">
            <summary>
            Called from TryAddAutoSaved to extract the Untitle number auto of the file name and try
            to get another Untitled file name with the same number, if possible
            </summary>
            <param name="fileName">Untitled file name</param>
            <returns>
            A new Untitled file name, possibly using on the same number as the one found in fileName
            or a larger number if that one is already taken.
            </returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation">
            <summary>
            Auto save information about one ISEFile
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.isAutoSaved">
            <summary>
            True for when the file has been auto saved, false for when the file has been saved, and does not need an auto save file.
            Saved files also require auto save information so they can be restored. They do not required an auto save file.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.autoSavedBufferVersion">
            <summary>
            Buffer version from the last time the file has been auto saved
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.powerShellTabName">
            <summary>
            PowerShellTab the file is in
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.autoSavedFilePath">
            <summary>
            The path to the auto saved file. This is only valid if isautoSaved is true.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.iseFileFullPath">
            <summary>
            The full path that comes from ISEFile's FullPath property
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.iseFileFileName">
            <summary>
            The FileName that comes from ISEFile's FileName property
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.iseFileIsUntitled">
            <summary>
            The IsUntitled flag that comes from ISEFile's IsUntitled property
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.underlyingISE">
            <summary>
            Used because we cannot compare buffer versions if the ISEFile is the same.
            The HashCode would probably work fine for this purpose as well
            There is only one condition where an ISEFile with the same full path would be
            different, if an ISEFile has been opened, an AutoStep happened,
            and the ISEFile has been closed and opened again. In this case we can't compare
            buffer versions. They can both be 1.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.#ctor(Microsoft.PowerShell.Host.ISE.ISEFile,System.String)">
            <summary>
            Initializes a new instance of the AutoSaveFileInformation class
            </summary>
            <param name="iseFile">File this auto save information is going to track</param>
            <param name="powerShellTabName">Tab the file belongs to</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.#ctor">
            <summary>
            Prevents a default instance of the AutoSaveFileInformation class from being created from outside this class.
            This constructor is called in this classes' ReadFromSerializedXmlString static method.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.IsAutoSaved">
            <summary>
            Gets or sets a value indicating whether the file has been auto saved.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.ISEFileFullPath">
            <summary>
            Gets or sets the full path that comes from ISEFile's FullPath property
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.ISEFileFileName">
            <summary>
            Gets or sets the file name that comes from ISEFile's FileName property
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.ISEFileIsUntitled">
            <summary>
            Gets or sets a value indicating whether the ISEFile corresponding to this information is untitled.
            This value comes from ISEFile's IsUntitled property
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.AutoSavedBufferVersion">
            <summary>
            Gets or sets the buffer version from the last time the file has been auto saved
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.PowerShellTabName">
            <summary>
            Gets or sets the PowerShellTab name the file came from
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.AutoSavedFilePath">
            <summary>
            Gets or sets the AutoSavedFilePath from the file.
            This is onli valid is this.IsAutoSaved is true.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.ReadAutoSaveInformation(System.String)">
            <summary>
            Deserializes fullPath into a List of AutoSaveFileInformation
            </summary>
            <param name="fullPath">deserialized xml path</param>
            <returns>A List of AutoSaveFileInformation from the deserialized fullPAth</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.TryWriteAutoSaveInformation(System.Collections.Generic.List{Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation},System.String)">
            <summary>
            Attempts to write the auto save information file in fullPath with the serialized version of autoSaveFiles
            </summary>
            <param name="autoSaveFiles">AutoSaveFileInformation to be saved to fullPath</param>
            <param name="fullPath">path of the file to serialize autoSaveFiles to</param>
            <returns>true if succesfully serialized</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.TryCreateAutoSaveFileIfNecessary(Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Tries to save the auto save file to disk if the ISEFile has not been saved
            </summary>
            <param name="iseFile">ISEFile with the WriteFileToDisk method we will need</param>
            <returns>true if it was able to save</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.TryDeleteAutoSaveFileIfNecessary">
            <summary>
            Tries to delete the AutoSaved file if it is indeed aut saved and its path is found
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.IsAutoSaveInformationValid(Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation)">
            <summary>
            Returns true if it can use the auto save information
            </summary>
            <param name="autoSaveInformation">autosaveveinformation to validate</param>
            <returns>true if it can use the auto save information</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.GetWellFormedFileName(System.String)">
            <summary>
            Gets a well formed file name with no spaces or more than 20 characters
            This is meant to make the auto saved file names a bit more related to their
            original file names.
            </summary>
            <param name="fullPath">fullPath we want to get the well formed name from</param>
            <returns>a well formed file name with no spaces or more than 20 characters</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.TryGetStreamReader(System.String)">
            <summary>
            Tries to get the FileStream from File.OpenRead out of the path.
            </summary>
            <param name="fullPath">path to get the FileStream from</param>
            <returns>the FileStream from File.OpenRead or null if it could not be retrieved</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.TryGetLastWriteTime(System.String)">
            <summary>
            Attempts to get the last write time of the file
            </summary>
            <param name="fullPath">full path to the file we want to know the last write time</param>
            <returns>the last write time of the file or null if iot could not be retrieved</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutoSaveManager.AutoSaveFileInformation.GetSavedFilePath">
            <summary>
            Gets an auto save file path when one is needed in the AutoSavedFilePath property
            </summary>
            <returns>an auto save file path when one is needed in the AutoSavedFilePath property</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation">
            <summary>
            Basic command implementation to be accessed from all toolbars and menus
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.findAndReplaceDialog">
            <summary>
            Keeps the current dialog while it is opened, and null if it has never been opened
            or has been closed.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.controlToReceiveFocus">
            <summary>
            Auxilliar in SenderControl_LayoutUpdated
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.hasExitedFromSessionEnding">
            <summary>
            Flag that indicates if the application has exited from session ending
            so that it does not try to exit the application again when the application
            receives a Window Closing event
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.noGUI">
            <summary>
            set from test to indicate there should be no GUI
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.NoGUI">
            <summary>
            Gets or sets a value indicating whether there should be GUI
            Set from test to indicate there should be no GUI
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GoToEditor">
            <summary>
            sets the focus in the Script Editor
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GoToConsole">
            <summary>
            sets the focus in the console pane Editor
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GoToLine">
            <summary>
            Goes to a line of the script editor.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanGoToLine">
            <summary>
            Returns true if it is possible to go to a line in the script editor.
            </summary>
            <returns>true if it is possible to go to a line in the script editor.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ClearOutput">
            <summary>
            Clears the output
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.NewScript">
            <summary>
            Creates a new (Untitled) script
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.OpenScript">
            <summary>
            Opens a new script
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GetOpenSaveDialogFilter">
            <summary>
            Gets the filter to use on the Open and Save dialogs
            </summary>
            <returns>filter string</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.BasicOpenFiles(System.String[])">
            <summary>
            Tries to open all files prompting with a MessageBox if failed
            </summary>
            <param name="openNames">file names</param>
            <returns>false if any file could not be opened</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.OpenMruFile(System.String)">
            <summary>
            Opens a new MRU file
            </summary>
            <param name="file">file to be opened</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CloseScript">
            <summary>
            Closes a Script file tab
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.IsThereAScript">
            <summary>
            returns true if a script can be closed
            </summary>
            <returns>true if a script can be closed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanPasteCommandOrScript">
            <summary>
            returns false if the focus is not in the script editor
            or command, or if there is nothing in the clipboard
            </summary>
            <returns>false if the focus is not in the script editor
            or command, or if there is nothing in the clipboard</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.PasteCommandOrScript">
            <summary>
            Paste text into command or script editors
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanCutCommandOrScript">
            <summary>
            returns false if the focus is not in the script editor
            or command, or if no text is selected
            </summary>
            <returns>false if the focus is not in the script editor
            or command, or if no text is selected</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CutCommandOrScript">
            <summary>
            Cut text from command or script
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanSelectAllScriptCommandOrOutput">
            <summary>
            returns false if the focus is not in the script editor
            or command or output window, or if there is no text
            </summary>
            <returns>false if the focus is not in the script editor
            or command or output window, or if no text is selected</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.SelectAllScriptCommandOrOutput">
            <summary>
            Selects all text text from command output or script
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanCopyScriptCommandOrOutput">
            <summary>
            returns false if the focus is not in the script editor
            or command or output window, or if no text is selected
            </summary>
            <returns>false if the focus is not in the script editor
            or command or output window, or if no text is selected</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CopyScriptCommandOrOutput">
            <summary>
            Copy text from command output or script
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.UndoCommandOrScript">
            <summary>
            Undos the last action on command or script editor
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanUndoCommandOrScript">
            <summary>
            returns false if the focus is not in the script editor
            or command or if there is nothing to undo
            </summary>
            <returns>false if the focus is not in the script editor
            or command or if there is nothing to undo</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanRedoCommandOrScript">
            <summary>
            returns false if the focus is not in the script editor
            or command or if there is nothing to redo
            </summary>
            <returns>false if the focus is not in the script editor
            or command or if there is nothing to redo</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.RedoCommandOrScript">
            <summary>
            Undos the last action on command or script editor
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.Find">
            <summary>
            Opens the Find dialog
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.FindNextOrPrevious(System.Boolean)">
            <summary>
            Finds the next or previous match in the script editor
            </summary>
            <param name="searchUp">true to search up.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.Replace">
            <summary>
            Opens the Find dialog
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanFindAndReplace">
            <summary>
            Returns true if it has an editor with text to be found
            </summary>
            <returns>true if it has an editor with text to be found</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteScript">
            <summary>
            Returns true if can execute the current script
            </summary>
            <returns>true if can execute the current script</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ExecuteScript">
            <summary>
            Executes the current script
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteSelection">
            <summary>
            Returns true if can execute the text currently selected in the script editor
            </summary>
            <returns>true if can execute the text currently selected in the script editor</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ExecuteSelection">
            <summary>
            Executes the text currently selected in the script editor
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanStopCommandWithStopAndCopyShortcut">
            <summary>
            Returns true if there is no editor with a selection
            </summary>
            <returns>true if there is no editor with a selection</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanStopExecution">
            <summary>
            Returns true if can execute the current script
            </summary>
            <returns>true if can execute the current script</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.StopExecution">
            <summary>
            Executes the current script
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.InsertConsoleText(System.String)">
            <summary>
            Inserts <paramref name="script"/> in the console ig it is at the input region or at the end of the input region if it is not
            </summary>
            <param name="script">texct to be insterted in the console</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.UpdateLayout">
            <summary>
            Runs layout
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ScriptLayout">
            <summary>
            Runs layout and sets the focus on last editor
            Considers the Side By Side and script editor Expanded states to layout the controls correctly.
            Setting the visibility to collapsed as opposed to row heights and column widths to 0 
            is an accesibility requirement since narrator reads zero sized controls.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ToggleScriptingPane">
            <summary>
            Expands/collapses script editor
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteSave">
            <summary>
            Determines whether "Save" can be executed
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.Save">
            <summary>
            Saves the current script
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteSaveAs">
            <summary>
            Determines whether "Save As" can be executed
            </summary>
            <returns>true if the command can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.SaveAs">
            <summary>
            Saves the current script with the Save dialog
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanZoomIn">
            <summary>
            Returns true if we can increase the font.
            </summary>
            <returns>True if we can increase the font.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanZoomOut">
            <summary>
            Returns true if we can decrease the font.
            </summary>
            <returns>True if we can decrease the font.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ZoomOut">
            <summary>
            Zooms out for all editors
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ZoomIn">
            <summary>
            Zooms in for all editors
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ToggleShowOutlining">
            <summary>
            Toggles the display of outlining
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanToggleOutliningExpansion">
            <summary>
            Returns true if there is a selected file to toggle outline expansion
            </summary>
            <returns>true if there is a selected file to toggle outline expansion</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ToggleEmbeddedCommands">
            <summary>
            Toggles the display of embedded commands
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanToggleEmbeddedCommands">
            <summary>
            Returns true if can tooggle embedded comands
            </summary>
            <returns>
            true if can tooggle embedded comands
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ToggleOutliningExpansion">
            <summary>
            Toggles the expansion of outlining
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ToggleShowLineNumbers">
            <summary>
            Toggles the display of line numbers
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.Help">
            <summary>
            Invokes help, context sensitive or not
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GetHelpCommand(System.String)">
            <summary>
            Gets the help command to be used
            </summary>
            <param name="helpText">help text</param>
            <returns>coommand to be used</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ShowCommand">
            <summary>
            Calls show-command on the command arround the caret
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.UpdateHelp">
            <summary>
            Calls the update-help command in the current runspace
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.AboutAddOnTools">
            <summary>
            Follows the link to online AddOn information
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ExploreScriptBrowserAddOn">
            <summary>
            Follows the link to Script Browser Add-On online information
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ExploreModuleBrowserAddOn">
            <summary>
            Follows the link to Module Browser Add-On online information
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ExploreScriptAnalyzerAddOn">
            <summary>
            Follows the link to Script Analyzer Add-On online information
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ExitApplicationFromMainWindowClosingHasBeenCanceled">
            <summary>
            Exits the application normally (Alt+F4, close the application, etc.).
            </summary>
            <returns>true if closing the application should be canceled</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ExitApplicationFromSessionEndingHasBeenCanceled(System.Boolean)">
            <summary>
            Exits the application due to a restart/logoff or update install from the restart manager.
            </summary>
            <param name="loggingOff">
            true when we the user is loggingOff
            false for a shut down from instalation applications
            </param>
            <returns>true if closing the ending the session should be canceled</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ExitApplicationHasBeenCanceled">
            <summary>
            Prompts for saving files and disposes of all PowerShellTabs if we are really exiting
            </summary>
            <returns>true if we should not exit the application</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanNewRunspace">
            <summary>
            Returns true if a new runspace can be created
            </summary>
            <returns>true if a new runspace can be created</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.NewRunspace">
            <summary>
            Creates a new Runspace
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.NewRemotePowerShellTab">
            <summary>
            Creates a new remote Runspace
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanCloseRunspace">
            <summary>
            Returns true if a runspace can be closed
            </summary>
            <returns>true if a runspace can be closed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CloseRunspace">
            <summary>
            Closes the current runspace
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.StepInto">
            <summary>
            Executes the "step into" debugger command
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.StepOver">
            <summary>
            Executes the "step over" debugger command
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.StepOut">
            <summary>
            Executes the "step out" debugger command
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteResumeDebugger">
            <summary>
            Returns true if the Run/Continue command can be executed
            </summary>
            <returns>true if the Run/Continue command can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteBreakAllDebugger">
            <summary>
            Returns true if Break All command can be executed
            </summary>
            <returns>true if Break All command can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ResumeDebugger">
            <summary>
            Resumes execution of the debugger
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.BreakAllDebugger">
            <summary>
            Breaks running script into debugger
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.StopDebugger">
            <summary>
            Stops the debugger
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteDebuggerCommand">
            <summary>
            Returns true if debugger commands can be executed
            </summary>
            <returns>true if debugger commands can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ToggleBreakpoint">
            <summary>
            Toggles (add/remove) the breakpoint on the current line
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.EnableBreakpoint">
            <summary>
            Enables the breakpoint on the current line
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.DisableBreakpoint">
            <summary>
            Disables the breakpoint on the current line
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.RemoveAllBreakpoints">
            <summary>
            Deletes all the breakpoints on the current runspace
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.EnableAllBreakpoints">
            <summary>
            Enables all the breakpoints on the current runspace
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.DisableAllBreakpoints">
            <summary>
            Disable all the breakpoints on the current runspace
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ListBreakpoints">
            <summary>
            Lists the breakpoint on the current runspace
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteListBreakpoints">
            <summary>
            Returns true if the "list breakpoints" command can be executed
            </summary>
            <returns>true if the command can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GetCallStack">
            <summary>
            Lists the call stack on the current runspace
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteToggleBreakpoint">
            <summary>
            Returns true if the "toggle breakpoint" command can be executed
            </summary>
            <returns>true if the command can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteEnableBreakpoint">
            <summary>
            Returns true if the "enable breakpoint" command can be executed
            </summary>
            <returns>true if the command can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteDisableBreakpoint">
            <summary>
            Returns true if the "disable breakpoint" command can be executed
            </summary>
            <returns>true if the command can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteRemoveAllBreakpoints">
            <summary>
            Returns true if the "remove all breakpoints" command can be executed
            </summary>
            <returns>true if the command can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteEnableAllBreakpoints">
            <summary>
            Returns true if the "enable all breakpoints" command can be executed
            </summary>
            <returns>true if the command can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteDisableAllBreakpoints">
            <summary>
            Returns true if the "disable all breakpoints" command can be executed
            </summary>
            <returns>true if the command can be executed</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanExecuteMenuCommand">
            <summary>
            Returns true if the runspace is free
            </summary>
            <returns>true if the runspace is free</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.SetNewRunspaceAndOneRunspaceVisibility">
            <summary>
            Sets the proper visibility for unique runspace and new runspace tabs
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.UpdateRunspaceList">
            <summary>
            Update list of runspaces in runspaces menu
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.OpenOptionsDialog">
            <summary>
            Opens a new instance of the options dialog
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ShowAndSelectAddOnTool(Microsoft.PowerShell.Host.ISE.ISEAddOnTool)">
            <summary>
            Shows and selects the given addOn tool
            </summary>
            <param name="tool">tool to show and select</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.MoveVerticalAddOnToolToHorizontal">
            <summary>
            Moves the selected vertical tool to horizontal
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.FocusOnVerticalAddOnTool">
            <summary>
            Sets the focus on the first focusable control in the selected vertical AddOn tool
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.FocusOnHorizontalAddOnTool">
            <summary>
            Sets the focus on the first focusable control in the selected horizontal AddOn tool
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.MoveHorizontalAddOnToolToVertical">
            <summary>
            Moves the selected horizontal tool to vertical
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanActoOnselectedHorizontalAddOnTool">
            <summary>
            Returns true if there is a selected horizontal tool
            </summary>
            <returns>true if there is a selected horizontal tool</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanActoOnselectedVerticalAddOnTool">
            <summary>
            Returns true if there is a selected vertical tool
            </summary>
            <returns>true if there is a selected vertical tool</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.HideHorizontalSelectedAddOnTool">
            <summary>
            Hides the selected horizontal tool
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.HideVerticalSelectedAddOnTool">
            <summary>
            Hides the selected vertical tool
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ToggleVerticalAddOnToolPaneVisibility">
            <summary>
            Toggles the vertical AddOn tool pane visibility
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ToggleHoriontalAddOnToolPaneVisibility">
            <summary>
            Toggles the horizontal AddOn tool pane visibility
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanToggleHorizontalAddOnPane">
            <summary>
            Returns true if it is possible to toggle the horizontal AddOn Pane's visibility
            </summary>
            <returns>true if it is possible to toggle the horizontal AddOn Pane's visibility</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanToggleVerticalAddOnPane">
            <summary>
            Returns true if it is possible to toggle the vertical AddOn Pane's visibility
            </summary>
            <returns>true if it is possible to toggle the vertical AddOn Pane's visibility</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.StartIntellisense">
            <summary>
            Starts intellisense explicitly
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GetScriptOrCommandFocusedEditor">
            <summary>
            This is the starting point for menu commands that are common
            between command and script editors like undo, paste, etc.
            Gets the editor which has focus (if any),
            either the selected script editor or the console pane editor
            </summary>
            <returns>The script, console or input editor with focus</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanStartIntellisense">
            <summary>
            Returns a value indicating intellisense can be started
            </summary>
            <returns>true if intellisense can be started</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.ShowSnippet">
            <summary>
            Starts Insert Snippets explicitly
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanShowSnippet">
            <summary>
            Returns a value indicating Insert Snippet can be started
            </summary>
            <returns>true if Insert Snippet can be started</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.StartPowerShell">
            <summary>
            Starts the powershell.exe link or executable
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GoToMatch">
            <summary>
            Goes to a matching character
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanGoToMatch">
            <summary>
            Returns true if the caret is in a position that has a matching character
            </summary>
            <returns>true if the caret is in a position that has a matching character</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.SenderControl_LayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Sets the focus on the child of CommandImplementation.controlToReceiveFocus that is first in tab order
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.MoveToDifferentCollection(Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection,Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection,Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection)">
            <summary>
            Moves the selected horizontal tool from the visible collection from one collection to the other
            </summary>
            <param name="fromVisible">the visible collection with the selected tool to move</param>
            <param name="from">the collection to move the tool from</param>
            <param name="to">the collection to move the tool to</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.HideSelectedAddOnTool(Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection)">
            <summary>
            Hides the selected AddOn tool in the collection
            </summary>
            <param name="visibleTools">collection with the tool to hide</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.FindAndReplace(System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Calls the Find or Replace dialogs, activating it if it is already opened
            and creating a new one if it is closed
            </summary>
            <param name="findMode">true for find</param>
            <param name="searchUp">true to search up</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.FindAndReplaceDialog_Closed(System.Object,System.EventArgs)">
            <summary>
            Resets CommandImplementation.findAndReplaceDialog to null
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.AddUnsavedFiles(System.Collections.Generic.List{Microsoft.PowerShell.Host.ISE.ISEFile},System.Collections.Generic.Dictionary{System.String,System.String},Microsoft.PowerShell.Host.ISE.ISEFileCollection)">
            <summary>
            Adds to unsavedFiles and unsavedTable unsaved files from runspaceControl
            </summary>
            <param name="unsavedFiles">list of unsaved files</param>
            <param name="unsavedTable">dictionary of unsaved files</param>
            <param name="files">potentially unsaved files</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GetUnsavedFiles">
            <summary>
            Get All Unsaved files from all open runspaces in one list
            </summary>
            <returns>unsaved files</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CleanUpForExit">
            <summary>
            Performs all cleanup necessary before exiting the application
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CancelledBecauseOfUnsavedFiles(System.Collections.Generic.List{Microsoft.PowerShell.Host.ISE.ISEFile})">
            <summary>
            Returns true if there are no Unsaved Files or if the user wants to discard them
            </summary>
            <param name="unsavedFiles">list of unsaved files</param>
            <returns>true if there are no Unsaved Files or if the user wants to discard them</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GetEncoding(Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Gets the encoding to save the filw with.
            This is usually the file encoding unless its encoding needs to be upgraded
            </summary>
            <param name="current">file to get the encoding for</param>
            <returns>the encoding we should save the file with</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.SaveAs(Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Calls the Saveas dialog
            </summary>
            <param name="current">file to save as</param>
            <returns>final file name</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.BasicSave(Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Calls SaveAs (if Untitled) or current.Save()
            </summary>
            <param name="current">the editor</param>
            <returns>null if BasicSaveAs was cancelled or if cirrent.Save threw an exception
            or current.FullPath if saving was succesfull</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.BasicSaveAs(Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Calls SaveAs and updates fields in the current editor
            </summary>
            <param name="current">current editor</param>
            <returns>true if SaveAs returned non null</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanUndoEditor(Microsoft.PowerShell.Host.ISE.ISEEditor)">
            <summary>
            returns false if editor is null or there is no undo operation and updates the Undo menu name
            </summary>
            <param name="editor">editor to check for an undo operation</param>
            <returns>false if editor is null or there is no undo operation</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CanRedoEditor(Microsoft.PowerShell.Host.ISE.ISEEditor)">
            <summary>
            returns false if editor is null or there is no undo operation and updates the Undo menu name
            </summary>
            <param name="editor">editor to check for an undo operation</param>
            <returns>false if editor is null or there is no undo operation</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GetOutputScriptOrCommandFocusedEditor">
            <summary>
            Returns the script, editor or output editors if any of those is selected or null otherwise
            </summary>
            <returns>the script, editor or output editors if any of those is selected or null otherwise</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.GetFocusedOutputControl">
            <summary>
            Returns the output control for Copy operation, if it is focused
            </summary>
            <returns>output control if it is focused</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.CommandImplementation.CollapseScriptOnSelectedPowerShellTabIfMaximized">
            <summary>
            Collapses the script pane if it is maximized, so we can perform operations like going to input and output
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions">
            <summary>
            Default value for properties in the Options class
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.colorConverter">
            <summary>
            Color converter used to read colors in user settings
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.tokenColors">
            <summary>
            Readonly dictionary with script and input token colors
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.consoleTokenColors">
            <summary>
            Readonly dictionary with console token colors
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.xmlTokenColors">
            <summary>
            Readonly dictionary with xml token colors
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.SelectedScriptPaneState">
            <summary>
            Gets the default state for the script pane when it is expanded.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ShowToolBar">
            <summary>
            Gets a value indicating whether the default value dor ToolBar visibility is true or false.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ShowLineNumbers">
            <summary>
            Gets a value indicating whether we should see line numbers.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ShowOutlining">
            <summary>
            Gets a value indicating whether we should see outlining.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.TokenColors">
            <summary>
            Gets the default colors for the input and script editor tokens
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ConsoleTokenColors">
            <summary>
            Gets the default colors for the console tokens
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.XmlTokenColors">
            <summary>
            Gets the default colors when editing an xml file
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.FontSize">
            <summary>
            Gets the default font size used in the application.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.Zoom">
            <summary>
            Gets the default font zoom used in the application.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.MinimumFontSize">
            <summary>
            Gets the minimum font size
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.MaximumFontSize">
            <summary>
            Gets the maximum font size
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.MinimumZoom">
            <summary>
            Gets the minimum zoom
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.MaximumMruCount">
            <summary>
            Gets the Maximum value for MruCount
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.MaximumZoom">
            <summary>
            Gets the maximum zoom
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ZoomIncrement">
            <summary>
            Gets the zoom increment
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.FontName">
            <summary>
            Gets the default font size used in the scripts and console pane.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ErrorForegroundColor">
            <summary>
            Gets the default foreground color for errors.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ErrorBackgroundColor">
            <summary>
            Gets the default background color for errors.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.WarningForegroundColor">
            <summary>
            Gets the default foreground color for warnings.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.WarningBackgroundColor">
            <summary>
            Gets the default background color for warnings.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.VerboseForegroundColor">
            <summary>
            Gets the default foreground color for verbose messages.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.VerboseBackgroundColor">
            <summary>
            Gets the default background color for verbose messages.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.DebugForegroundColor">
            <summary>
            Gets the default foreground color for debug messages.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.DebugBackgroundColor">
            <summary>
            Gets the default background color for debug messages.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ConsolePaneTextBackgroundColor">
            <summary>
            Gets the default background color for console text blocks.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ConsolePaneBackgroundColor">
            <summary>
            Gets the default background color for the whole console area.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ConsolePaneForegroundColor">
            <summary>
            Gets the default foreground color for the console text.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ScriptPaneBackgroundColor">
            <summary>
            Gets the default background color for scripts.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ScriptPaneForegroundColor">
            <summary>
            Gets the default foreground color for non script files in the script pane.
            The default foreground color for script files is specified in <seealso cref="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.TokenColors"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ShowWarningForDuplicateFiles">
            <summary>
            Gets a value indicating whether the default vaue for displaying a warning message when opening the same file in different
            runspaces regarding the fact that the same editor will be used is true or false.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ShowWarningBeforeSavingOnRun">
            <summary>
            Gets a value indicating whether the default vaue for displaying a warning message when saving a script before running is true or false.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.UseLocalHelp">
            <summary>
            Gets a value indicating whether the default value indicating help should be consulted locally is true or false.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.AutoSaveMinuteInterval">
            <summary>
            Gets a value indicating the default interval in minutes for auto saving files.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ShowDefaultSnippets">
            <summary>
            Gets a value indicating whether we should display default snippets.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.MruCount">
            <summary>
            Gets a value indicating the maximum number of MRU entries
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ShowIntellisenseInConsolePane">
            <summary>
            Gets a value indicating whether we should display Intellisense in the console pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.ShowIntellisenseInScriptPane">
            <summary>
            Gets a value indicating whether we should Intellisense in the script pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.UseEnterToSelectInConsolePaneIntellisense">
            <summary>
            Gets a value indicating whether enter selects from the intellisense list in the console pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.UseEnterToSelectInScriptPaneIntellisense">
            <summary>
            Gets a value indicating whether Enter selects from the intellisense list in the Script pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.IntellisenseTimeoutInSeconds">
            <summary>
            Gets the default timeout for intellisense in seconds
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.FromStringCollectionToDictionary``1(System.Collections.Specialized.StringCollection,Microsoft.PowerShell.Host.ISE.ObservableDictionary{``0,System.Windows.Media.Color},System.Collections.Generic.IDictionary{``0,System.Windows.Media.Color})">
            <summary>
            Converts a StringCollection to a dictionary of token type into color
            </summary>
            <typeparam name="TEnum">token type enumeration</typeparam>
            <param name="userSettings">string collection</param>
            <param name="tokenColors">dictionary of token type into color</param>
            <param name="defaultTokenColors">default token colors to be used if there is a token color missing from <paramref name="tokenColors"/> </param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.FromDictionaryToStringCollection``1(Microsoft.PowerShell.Host.ISE.ObservableDictionary{``0,System.Windows.Media.Color},System.Collections.Specialized.StringCollection)">
            <summary>
            Converts a dictionary of token color into color to a string collection
            </summary>
            <typeparam name="TEnum">token type enumeration</typeparam>
            <param name="tokenColors">dictionary of token type into color</param>
            <param name="userSettings">string collection</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.LoadUserSettingColor(System.String,System.Windows.Media.Color)">
            <summary>
            Returns the color corresponding to <paramref name="userSettingColor"/> or <paramref name="defaultColor"/> if no such color exists.
            </summary>
            <param name="userSettingColor">color string from the user setting</param>
            <param name="defaultColor">default color to return if <paramref name="userSettingColor"/> is not valid</param>
            <returns>the color corresponding to <paramref name="userSettingColor"/> or <paramref name="defaultColor"/> if no such color exists.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.DefaultOptions.DeserializeDefaultTokenColors``1(System.String)">
            <summary>
            Reads the default token colors from the User Settings default value
            </summary>
            <typeparam name="TEnum">token type enumeration</typeparam>
            <param name="propertyName">USer Setting property name</param>
            <returns>the default token colors from the User Settings default value</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.SerializeDataDelegate">
            <summary>
            Implemented by the caller for writing data in <see cref="T:System.IO.FileStream"/> represented by <paramref name="fileStream"/>.
            </summary>
            <param name="fileStream">Object of the opened <see cref="T:System.IO.FileStream"/>.</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.DocumentUtils">
            <summary>
            Handy utils for document related operations ( like File IO etc. )
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.DocumentUtils.tempFileExtension">
            <summary>
            File extension for temp file. 
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.DocumentUtils.SaveDataTransacted(System.String,Microsoft.Windows.PowerShell.Gui.Internal.SerializeDataDelegate)">
            <summary>
            Overwrites data in the document <paramref name="documentName"/> as a transacted operation and saves the changes. 
            </summary>
            <remarks>
            Data is first copied to the temp file. Afterwards, this temp file replaces the original document as an atomic operation.
            This methodology ensures that the original document is not lost in case of any IO failure. 
            Logic is based on the 'saving document like data' suggestion from :
            http://msdn.microsoft.com/en-us/library/windows/desktop/hh802690(v=vs.85).aspx
            </remarks>
            <param name="documentName">The name of the document. It a fully qualified file name.</param>
            <param name="serializeData">Call back function implemented by the caller to serialize data in the file stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="documentName"/> or <paramref name="serializeData"/> is a null reference.</exception>
            <exception cref="T:System.IO.IOException">Error when any File IO operation has failed.</exception>
            <exception cref="T:System.FormatException">Error when the format of argument is not valid.</exception>
            <exception cref="T:System.ObjectDisposedException">Error when IO operation was attempted on closed <see cref="T:System.IO.FileStream"/> object.</exception>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.DocumentUtils.SaveDataToTempFile(System.String,Microsoft.Windows.PowerShell.Gui.Internal.SerializeDataDelegate)">
            <summary>
            Writes data to temp file <paramref name="tempFileName"/> and saves the changes.
            </summary>
            <param name="tempFileName">The name of temp file.</param>
            <param name="serializeData">Call back function implemented by the caller to serialize data in the file stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="tempFileName"/> or <paramref name="serializeData"/> is a null reference.</exception>
            <exception cref="T:System.Security.SecurityException">Error when the caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Error when <paramref name="tempFileName"/> is not valid.</exception>
            <exception cref="T:System.IO.IOException">Error in case of IO operation failure.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Error when the specified path is invalid (for example, it is on an unmapped drive).</exception>
            <exception cref="T:System.UnauthorizedAccessException">Error when access to <paramref name="tempFileName"/> is denied.</exception>
            <exception cref="T:System.IO.PathTooLongException">Number of characters in <paramref name="tempFileName"/> exceed the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="tempFileName"/> contains a colon (:) in the middle of the string.</exception>
            <exception cref="T:System.ObjectDisposedException">Error when IO operation was attempted on closed <see cref="T:System.IO.FileStream"/> object.</exception>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.DocumentUtils.CopyTempFileContentsToDocumentAndDeleteTempFile(System.String,System.String)">
            <summary>
            Copies data from temp file to the document mentioned by <paramref name="documentName"/> and deletes the temp file.
            If the document <paramref name="documentName"/> does not exists, then the temp file is renamed to <paramref name="documentName"/>
            </summary>
            <param name="documentName">The name of the document. It a fully qualified file name.</param>
            <param name="tempFileName">The name of temporary file.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="documentName"/> or <paramref name="tempFileName"/> is either a null reference or an empty string.</exception>
            <exception cref="T:System.ArgumentException">Error when <paramref name="documentName"/> or <paramref name="tempFileName"/> is not valid.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Error when access to <paramref name="documentName"/> or <paramref name="tempFileName"/> is denied.</exception>
            <exception cref="T:System.IO.PathTooLongException">Number of characters in <paramref name="documentName"/> or <paramref name="tempFileName"/> exceed the system-defined maximum length.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">Error when an invalid drive was specified.</exception>
            <exception cref="T:System.IO.FileNotFoundException">File <paramref name="documentName"/> or <paramref name="tempFileName"/> could not be found.</exception>
            <exception cref="T:System.IO.IOException">Error in case of IO operation failure.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows 98 Second Edition or earlier and the files system is not NTFS.</exception>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.DocumentUtils.GetTempFileName(System.String)">
            <summary>
            Computes the temporary file name from the given <paramref name="fileName"/>.
            The temporary file name is in the same directory path as that of <paramref name="fileName"/>.
            </summary>
            <param name="fileName">The name of the file whose directory path will be used as directory path of temp file.</param>
            <returns>The temporary file name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is either a null reference or an empty string.</exception>
            <exception cref="T:System.ArgumentException">Error when <paramref name="fileName"/> is not valid.</exception>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.DocumentUtils.ValidateFilePath(System.String)">
            <summary>
            Ensures that the syntax of the path of <paramref name="fileName"/> is correct.
            </summary>
            <param name="fileName">The name of file. It may or may not be a fully qualified file name.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"/> is either a null reference or an empty string.</exception>
            <exception cref="T:System.Security.SecurityException">Error when the caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">Error when <paramref name="fileName"/> is not valid.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Error when access to <paramref name="fileName"/> is denied.</exception>
            <exception cref="T:System.IO.PathTooLongException">Number of characters in <paramref name="fileName"/> exceed the system-defined maximum length.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="fileName"/> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.DocumentUtils.TryDeleteFile(System.String)">
            <summary>
            Deletes the file given be name <paramref name="fileName"/>. The function does not throw any exception on failure.
            </summary>
            <param name="fileName">The name of file to be deleted.</param>
            <returns>True in case the file is successfully deleted, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost">
            <summary>
            Host object representing the whole application.
            This class to be unique in the application. 
            It is internal since an object of type ObjectModelRoot will be used to expose its public properties
            along with its own CurrentPowerShellTab and CurrentFile.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.synchronizationContext">
            <summary>
            The synchronization context used internally to send/post UI execution.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.current">
            <summary>
            The instance of this class that is in current use.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.mainWindow">
            <summary>
            The main window.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.shortcutDictionary">
            <summary>
            Dictionary of all the existing shortcut keys, used to prevent adding custom menus with repeated shortcuts.
            We use a dictionary for easy lookup.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.psgData">
            <summary>
            The starting point for the data displayed in the application user interface.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.options">
            <summary>
            The application options.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.mainInitialInputBindings">
            <summary>
            Populated with the initial key bindings from main since this collection is recreated when custom menus
            are inserted.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.lastSelectedPowerShellTab">
            <summary>
            Last runspace that was selected.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.noProfile">
            <summary>
            value indicating whether we run the profile for PowerShellTabs
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.mta">
            <summary>
            value indicating whether we use the MTA option in PowerShellTabs
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.#cctor">
            <summary>
            Initializes static members of the PSGInternalHost class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.#ctor">
            <summary>
            Initializes a new instance of the PSGInternalHost class.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the PSGInternalHost class.
            </summary>
            <param name="mta">value indicating whether we use the MTA option in PowerShellTabs</param>
            <param name="noProfile">value indicating whether we run the profile for PowerShellTabs</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.Current">
            <summary>
            Gets the current Application.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.Options">
            <summary>
            Gets the application options.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.PowerShellTabs">
            <summary>
            Gets the PowerShellTabs in the application.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.MainWindow">
            <summary>
            Gets the main window.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.SynchronizationContext">
            <summary>
            Gets or sets synchronization context used internally to send/post UI execution.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.PSGData">
            <summary>
            Gets the starting point for the data displayed in the application user interface.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.MTA">
            <summary>
            Gets a value indicating whether we use the MTA option in PowerShellTabs
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.NoProfile">
            <summary>
            Gets a value indicating whether we run the profile for PowerShellTabs
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.Initialize">
            <summary>
            Creates Options, PSGData and MainWindow
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.ShortcutDictionaryContainsKey(System.Windows.Input.KeyGesture)">
            <summary>
            Checks if the given keyGesture is already present in our dictionary of KeyGestures
            </summary>
            <param name="keyGesture">keyGesture to check</param>
            <returns>true if it is already present</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.ReclassifyAllOutputs">
            <summary>
            Causes the reclassification of all output editors when toggling high contrast
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.ReclassifyAllEditors">
            <summary>
            Causes the reclassification on all editors when high contrast is toggled.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.UpdateAddOnsMenuItem">
            <summary>
            Called when this.lastPowerShellTab changes or an item is added to lastSelectedPowerShellTab.AddOnsMenu 
            to update the current Tools window menu item (if any) with the menu items derived from
            lastSelectedPowerShellTab.AddOnsMenu
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.AddGestureToDictionary(System.Windows.Input.KeyGesture,System.String)">
            <summary>
            Adds the given gesture to the dictionary of KeyGestures
            </summary>
            <param name="keyGesture">keyGesture to add</param>
            <param name="resourceId">resource id with the gesture</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.GetGestureId(System.Windows.Input.KeyGesture)">
            <summary>
            Gets the resource id corresponding to the gesture
            </summary>
            <param name="keyGesture">keyGesture to look up</param>
            <returns>The resource ide corresponding to gesture</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.CreateShortcutDictionary">
            <summary>
            Validate that all shortcut resources are valid InputGestures, that there
            are no duplicate shortcuts
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.GetSingleUnderscoreIndex(System.String)">
            <summary>
            Gets the index of _ not followed by another _
            </summary>
            <param name="str">string to get the _ index from</param>
            <returns>the index of _ not followed by another _</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.CheckLevelAccelerator(System.Collections.Generic.Dictionary{System.Char,System.String},System.String)">
            <summary>
            Called from VerifyMainWindowAccelerators to check for an accelerator duplication
            </summary>
            <param name="acceleratorsInThisLevel">table with current accelerators</param>
            <param name="header">header containing accelerator</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.Runspace_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called to monitor the state of the ExpandedScript property to actually expand or collapse the editor
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.ExpandScriptEditor(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Expands script editor
            </summary>
            <param name="runspace">the runspace in which to collapse the script editor</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.CollapseScriptEditor(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Collapses script editor
            </summary>
            <param name="runspace">the runspace in which to collapse the script editor</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.AddShowAndSelectItems(System.Windows.Controls.MenuItem,Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection,Microsoft.PowerShell.Host.ISE.ISEAddOnTool,System.Int32@)">
            <summary>
            Adds menu items to show tools in toolCollection
            </summary>
            <param name="menuItem">parent menu item to add submenus to</param>
            <param name="toolCollection">collection with the tools to be turned into menu items to show them</param>
            <param name="selectedTool">currently selected tool in the collection</param>
            <param name="insertPos">position to insert the items in</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.VerifyMainWindowAccelerators">
            <summary>
            Checks for duplicate accelerators
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.VisibleAddOnTools_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Monitors changes in the SelectedAddOnTool property to update the menus when it changes 
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.AddOnTools_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Monitors changes to the tools submenu of the all AddOnTools collections to potentially populate
            The Window menu if the collection changed in the current PowerShellTab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.MainWindow_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to load the options and respond to their initial values.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.PowerShellTabs_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Callled when the collection of PowerShellTabs changes.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.AddAddOnToolMenuItems(System.Windows.Controls.MenuItem)">
            <summary>
            Adds the menu items corresponding to add on tools
            </summary>
            <param name="menuItem">parent menu item to add submenus to</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.AnyRunspacesToolsSubmenu_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Monitors changes to the tools submenu of the all PowerShellTabs to potentially populate
            The Window menu if the collection changed in the current PowerShellTab
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.NewRunspace_ExecutionStateChanged(System.Object,System.Management.Automation.PSInvocationStateChangedEventArgs)">
            <summary>
            Called to update the state of the run/stop buttons when the pipeline stops
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.TokenColors_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the Option's TokenColors change to reset the classifications
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.ConsoleTokenColorsInternal_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the Option's ConsoleTokenColors change to reset the classifications
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.XmlTokenColors_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the Option's XmlTokenColors change to reset the classifications
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.Options_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Montitors changes in the options starting the appriopriate GUI response.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.UpdateAllEditors">
            <summary>
            Updates the Zoom and Scroll Visibility in all editors, as well as the font name and size
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.PowerShellTabs_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the SelectedPowerShellTab changes.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSGInternalHost.Files_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Monitors the changes in this.lastSelectedPowerShellTab.Files.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker">
            <summary>
            Interaction logic for ColorPicker.xaml
            </summary>
            <summary>
            ColorPicker
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.RowCount">
            <summary>
            The number of rows in the rectangle grid
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.ColumnCount">
            <summary>
            The number of columns in the rectangle grid
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.DimFactor">
            <summary>
            A standard factor for dimming colors when the control is disabled
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.DimFloor">
            <summary>
            A standard floor for dimming colors when the control is disabled
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.initialized">
            <summary>
            A flag indicating whether the control has already been initialized
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.predefinedColors">
            <summary>
            An array of predefined colors
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.predefinedColorNames">
            <summary>
            An array of names for the predefined colors
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.dotNetColors">
            <summary>
            A lookup collection of standard .net colors
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.ignoreEvents">
            <summary>
            A flag to toggle whether to respond to events
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.currentColor">
            <summary>
            The current selected color
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.customColorItem">
            <summary>
            A combo box item that indicates the current color isn't a standard .net color
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.brightColors">
            <summary>
            A collection of colors in their Enabled state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.dimColors">
            <summary>
            A collection of colors in their Disabled state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.colorNames">
            <summary>
            A collection of color names to use for AutomationProperties.Name in the rectangles grid.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.hexadecimalState">
            <summary>
            The state of the hexadecimal checkbox
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.#ctor">
            <summary>
            Initializes a new instance of the ColorPicker class and then sets up the bright and dim colors
            </summary>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.ColorChanged">
            <summary>
            This event is raised to indicate that the current color has changed
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.Controls">
            <summary>
            This enum lets the caller specify what UI elements to update when the color is changed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.Controls.TextBoxes">
            <summary>
            Flag to select text boxes
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.Controls.Sliders">
            <summary>
            Flag to select sliders
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.Controls.ComboBox">
            <summary>
            Flag to select the combo box
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.CurrentColor">
            <summary>
            Gets or sets the current selected color
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.DeriveSimilarColor(System.Int32,System.Int32,System.Windows.Media.Color)">
            <summary>
            This method generates a color on a scale from a starting color to black
            </summary>
            <param name="maximumRange">The maximum range of the scale</param>
            <param name="scale">How far along the axis we've progressed</param>
            <param name="originalColor">The color we started out with</param>
            <returns>A scaled color</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.GenerateBrightAndDimColors">
            <summary>
            This method defines the colors for the color rectangles and creates a corresponding set of dim colors
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.UserControl_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the control is initially loaded
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.ThisRectangle_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the click event for rectangles
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.GetCurrentColorFromTextBoxes">
            <summary>
            This method retrieves the current color from the contents of the text boxes
            </summary>
            <returns>A color represented by the contents of the text boxes</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.RedTextBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the event when the red text box is changed
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.GreenTextBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the event when the green text box is changed
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.BlueTextBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handles the event when the blue text box is changed
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.HexadecimalCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the event when the hexadecimal check box is checked
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.HexadecimalCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the event when the hexadecimal check box is unchecked
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.RedSlider_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Handles the event when the red slider is moved
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.GreenSlider_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Handles the event when the green slider is moved
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.BlueSlider_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Handles the event when the blue slider is moved
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.ColorsComboBox_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the event when the combo box is changed
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.SetColor(System.Windows.Media.Color,Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.Controls)">
            <summary>
            This method sets the current color and optionally updates some controls on the UI to match it
            </summary>
            <param name="newColor">The new color</param>
            <param name="controlsToUpdate">The controls to update</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.UpdateControlsForCurrentColor(System.Windows.Media.Color,Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.Controls)">
            <summary>
            This method does the real work of updating the controls in the UI
            </summary>
            <param name="newColor">The new color</param>
            <param name="controlsToUpdate">The controls to update</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.UpdateEnabledState">
            <summary>
            Do the work to disable or enable subordinate controls when the main control is disabled or enabled
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.UserControl_IsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle the event that happens when the control is disabled or enabled
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ColorPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme">
            <summary>
            This is a serializable class that represents a named set of ISE UI colors and a font and font size selection.  It also abstracts storage for a set of predefined and
            user customizable color themes.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.ThemesKeyName">
            <summary>
            The registry key under HKEY_CURRENT_USER where themes are stored.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.MaximumSanitizedNameSize">
            <summary>
            The maximum size for a sanitized theme name -- slightly less than MAX_PATH
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.name">
            <summary>
            The name of the theme
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.fontFamily">
            <summary>
            The name of the font
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.fontSize">
            <summary>
            The size of the font
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.keys">
            <summary>
            Keys for the color collection
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.values">
            <summary>
            Values for the color collection
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.Keys">
            <summary>
            Gets the keys collection so it's available for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.Values">
            <summary>
            Gets the values collection so it's available for serialization.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.Name">
            <summary>
            Gets or sets the name of the theme
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.FontFamily">
            <summary>
            Gets or sets the name of the font
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.FontSize">
            <summary>
            Gets or sets the size of the font
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.AvailableThemes">
            <summary>
            Gets a list of available themes, including all of the themes in the store as well as all of the preset themes.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.Item(System.String)">
            <summary>
            This indexer implements dictionary-like behavior using two arrays.  It doesn't actually index the keys, so it's less performant than a real dictionary,
            but the number of entries in the collection will always be low, and (most importantly) it's easily serializable to XML.
            </summary>
            <param name="key">The key to look up</param>
            <returns>The value, or 'Black' if the item isn't in the collection</returns>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.Item(System.String,System.Windows.Media.Color)">
            <summary>
            This indexer allows the caller to pass in a default value to be returned if the key isn't in the list.
            </summary>
            <param name="key">The key to look up</param>
            <param name="defaultColor">The default color to return</param>
            <returns>A color</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.op_Equality(Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme,Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme)">
            <summary>
            This operator overload allows the caller to compare two themes by value, excluding the Name property
            </summary>
            <param name="left">One of the themes to compare</param>
            <param name="right">The other theme</param>
            <returns>True or False, depending on whether the contents are the same</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.op_Inequality(Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme,Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme)">
            <summary>
            This is the not-equals counterpart to ==
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>True or false</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.Equals(System.Object)">
            <summary>
            This is equivalent to ==
            </summary>
            <param name="obj">The object to compare</param>
            <returns>true or false</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.GetHashCode">
            <summary>
            This override creates a hashcode based on XORs of the hashcodes of the font name, font size, colors, and color keys
            </summary>
            <returns>An integer hashcode that corresponds to the settings in the theme</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.FromExistingTheme(Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme)">
            <summary>
            This method clones an existing color theme object
            </summary>
            <param name="theme">The theme to clone</param>
            <returns>A new theme with the same contents</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.FromISEOptions(Microsoft.PowerShell.Host.ISE.ISEOptions,System.String)">
            <summary>
            This method creates a color theme from an ISE options object
            </summary>
            <param name="options">The object</param>
            <param name="name">The name to give the new theme</param>
            <returns>A new theme</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.FromXml(System.String)">
            <summary>
            This method deserializes an XML string and returns a new theme object
            </summary>
            <param name="xml">The XML to deserialize</param>
            <returns>A new theme object</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.FromFile(System.String)">
            <summary>
            This method reads XML out of a file and deserializes it into a theme object
            </summary>
            <param name="fileName">The full path and name of the file.</param>
            <returns>A new theme object</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.GetStoredThemeNames">
            <summary>
            This method enumerates the names of the stored themes.  Note that these aren't the actual names in the themes, but whatever names the store uses to identify
            them.  (e.g. Registry value names or file names)
            </summary>
            <returns>A list of unique strings</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.RetrieveStoredTheme(System.String)">
            <summary>
            This method retrieves one theme from the store
            </summary>
            <param name="name">The store-specific unique name of the theme</param>
            <returns>A new theme object</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.StoreTheme(Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme)">
            <summary>
            This method saves one theme to the store
            </summary>
            <param name="theme">The theme object to store</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.DeleteTheme(Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme)">
            <summary>
            This method deletes one theme from the store
            </summary>
            <param name="theme">The theme to delete</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.ContainsKey(System.String)">
            <summary>
            This method returns true or false depending on whether a color key is defined in the theme.
            </summary>
            <param name="key">The key to look up</param>
            <returns>True or false</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.GetSanitizedName(System.Boolean)">
            <summary>
            Gets a name that's sanitized so it can be used in a file path, etc.
            </summary>
            <param name="escapeCharacters">True or false depending on whether you want to remove or escape non-alphanumeric characters</param>
            <returns>A name that can be used in a file path, etc.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.ApplyToISEOptions(Microsoft.PowerShell.Host.ISE.ISEOptions)">
            <summary>
            This method applies the settings in a theme to an ISE options object.
            </summary>
            <param name="options">The object to apply settings to.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.Validate(Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme)">
            <summary>
            This method attempts to apply a color theme to an ISEOptions object and returns a collection of error messages
            </summary>
            <param name="knownGoodTheme">A theme with known good values to fall back to</param>
            <returns>A collection of error messages</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.ToXml(System.Boolean)">
            <summary>
            This method serializes a theme to XML.
            </summary>
            <param name="formatIndented">True to make it human-readable, false to make it a single line of text</param>
            <returns>Serialized XML</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.ToFile(System.String)">
            <summary>
            This method serializes a theme and writes it to a file.
            </summary>
            <param name="fileName">The full path and name of the file.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme.GetColorFromDictionary``1(System.Collections.Generic.IDictionary{``0,System.Windows.Media.Color},``0,System.Windows.Media.Color)">
            <summary>
            This generic method safely gets a color from a dictionary or returns a default if it's not defined.
            </summary>
            <typeparam name="keyType">The type of the key</typeparam>
            <param name="dictionary">The dictionary to get the color from</param>
            <param name="key">The key to look up</param>
            <param name="defaultColor">The color to return if the key doesn't exist</param>
            <returns>A color or the default</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow">
            <summary>
            Interaction logic for ManageThemesWindow.xaml
            </summary>
            <summary>
            ManageThemesWindow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.ThemeFileFilter">
            <summary>
            Wildcard filter for enumerating theme files
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.ThemeFileExtension">
            <summary>
            The extension for a theme file
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.ThemeFileFullExtension">
            <summary>
            The full extension for a theme file
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.selectedThemeName">
            <summary>
            The name of the selected theme
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.selectedTheme">
            <summary>
            The actual selected theme
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.currentTheme">
            <summary>
            The current active theme
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.availableThemes">
            <summary>
            A collection of available themes, cached so we don't have to look them up every time
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.currentThemeIsCustom">
            <summary>
            A flag to indicate whether the current theme matches one of the available themes
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.#ctor(Microsoft.Windows.PowerShell.Gui.Internal.StorableColorTheme)">
            <summary>
            Initializes a new instance of the ManageThemesWindow class and opens a new instance of the window with an initial, potentially unsaved, theme selected.
            </summary>
            <param name="initialCurrentTheme">The initial theme</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.SelectedTheme">
            <summary>
            Gets the theme the user selected.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.ThemeIsEmbedded(System.String)">
            <summary>
            Check whether a theme is one of the presets, so we can disable the delete and rename buttons.
            </summary>
            <param name="themeName">The name of the theme to check.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.Window_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Initialize the UI.
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.ThemesListBox_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            If the selection in the list box is changed, look the selected theme up in the list of available themes.
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.ImportButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Import a new theme from a file.
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.ExportButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Export the selected theme to a file.
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.DeleteButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Delete the selected theme.
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.RenameButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Rename the selected theme.  If the user renames the 'custom' theme, this really saves it to the store.
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.SelectButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Close the dialog box and return 'true' to indicate the selected theme has changed.
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.CancelButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Close the dialog box and return 'false' to indicate that we shouldn't change the current theme.
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">Arguments which tell us more about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.UpdateAvailableThemes">
            <summary>
            Get a list of available themes from the store and cache them in a local list.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.PopulateThemesList">
            <summary>
            Enumerate the available themes and populate the list box according to them.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.ManageThemesWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings">
            <summary>
            Options dialog GUI implementation strings
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowHeader">
            <summary> Resource string: "Options" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowRestoreDefaultsButtonContent">
            <summary> Resource string: "Restore _Defaults" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowCancelButtonContent">
            <summary> Resource string: "_Cancel" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowApplyButtonContent">
            <summary> Resource string: "_Apply" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowOkButtonContent">
            <summary> Resource string: "_OK" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowGeneralTabItemHeader">
            <summary> Resource string: "General" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowScriptPaneBehaviorGroupBoxHeader">
            <summary> Resource string: "Script Pane Behavior" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowShowOutliningCheckBoxContent">
            <summary> Resource string: "_Show Outlining" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowShowLineNumbersCheckBoxContent">
            <summary> Resource string: "S_how Line Numbers" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowWarnAboutDuplicateFilesCheckBoxContent">
            <summary> Resource string: "_Warn About Duplicate Files" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowPromptToSaveBeforeRunCheckBoxContent">
            <summary> Resource string: "_Prompt to Save Before Run" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowPositionLabelContent">
            <summary> Resource string: "Position:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowTopComboBoxItemContent">
            <summary> Resource string: "_Top" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowRightComboBoxItemContent">
            <summary> Resource string: "_Right" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowMaximizedComboBoxItemContent">
            <summary> Resource string: "_Maximized" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowIntellisenseGroupBoxHeader">
            <summary> Resource string: "Intellisense" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowShowInTheConsolePaneCheckBoxContent">
            <summary> Resource string: "Sh_ow in the Console Pane" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowShowInTheScriptPaneCheckBoxContent">
            <summary> Resource string: "Show i_n the Script Pane" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowEnterSelectsIntellisenseCheckBoxContent">
            <summary> Resource string: "_Enter Selects Intellisense" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowEnterSelectsIntellisenseCheckBoxContent2">
            <summary> Resource string: "Ente_r Selects Intellisense" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowTimeoutInSecondsLabelContent">
            <summary> Resource string: "Timeout in Seconds:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowOtherSettingsGroupBoxHeader">
            <summary> Resource string: "Other Settings" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowUseLocalHelpCheckBoxContent">
            <summary> Resource string: "Use _Local Help" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowShowToolBarCheckBoxContent">
            <summary> Resource string: "Show the tool bar" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowUseDefaultSnippetsCheckBoxContent">
            <summary> Resource string: "_Use Default Snippets" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowAutoSaveIntervalInMinutesLabelContent">
            <summary> Resource string: "_Autosave Interval in Minutes:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowRecentFilesToShowLabelContent">
            <summary> Resource string: "Recent _Files to Show:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowColorsAndFontsTabItemHeader">
            <summary> Resource string: "Colors and Fonts" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowManageThemesButtonContent">
            <summary> Resource string: "Manage Themes..." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowFixedWidthFontsOnlyCheckBoxContent">
            <summary> Resource string: "_Fixed-Width Fonts Only" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowSampleGroupBoxHeader">
            <summary> Resource string: "Sample:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowFontFamilyLabelContent">
            <summary> Resource string: "Font Family:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowFontSizeLabelContent">
            <summary> Resource string: "Font Size:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowCurrentThemeLabelContent">
            <summary> Resource string: "Current Theme:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowBackgroundTreeViewItemHeader">
            <summary> Resource string: "Background" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowTextBackgroundTreeViewItemHeader">
            <summary> Resource string: "Text Background" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowForegroundTreeViewItemHeader">
            <summary> Resource string: "Foreground" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsolePaneTreeViewItemHeader">
            <summary> Resource string: "Console Pane" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowBackgroundTreeViewItemHeader2">
            <summary> Resource string: "Background" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowScriptPaneTreeViewItemHeader">
            <summary> Resource string: "Script Pane" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowScriptPaneTokensTreeViewItemHeader">
            <summary> Resource string: "PowerShell Tokens" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowAttributeTreeViewItemHeader">
            <summary> Resource string: "Attribute" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowCommandTreeViewItemHeader">
            <summary> Resource string: "Command" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowCommandArgumentTreeViewItemHeader">
            <summary> Resource string: "Command Argument" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowCommandParameterTreeViewItemHeader">
            <summary> Resource string: "Command Parameter" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowCommentTreeViewItemHeader">
            <summary> Resource string: "Comment" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowGroupEndTreeViewItemHeader">
            <summary> Resource string: "Group End" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowGroupStartTreeViewItemHeader">
            <summary> Resource string: "Group Start" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowKeywordTreeViewItemHeader">
            <summary> Resource string: "Keyword" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowLineContinuationTreeViewItemHeader">
            <summary> Resource string: "Line Continuation" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowLoopLabelTreeViewItemHeader">
            <summary> Resource string: "Loop Label" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowMemberTreeViewItemHeader">
            <summary> Resource string: "Member" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowNumberTreeViewItemHeader">
            <summary> Resource string: "Number" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowOperatorTreeViewItemHeader">
            <summary> Resource string: "Operator" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowStatementSeparatorTreeViewItemHeader">
            <summary> Resource string: "Statement Separator" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowStringTreeViewItemHeader">
            <summary> Resource string: "String" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowTypeTreeViewItemHeader">
            <summary> Resource string: "Type" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowVariableTreeViewItemHeader">
            <summary> Resource string: "Variable" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleTokensTreeViewItemHeader">
            <summary> Resource string: "PowerShell Tokens" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleAttributeTreeViewItemHeader">
            <summary> Resource string: "Attribute" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleCommandTreeViewItemHeader">
            <summary> Resource string: "Command" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleCommandArgumentTreeViewItemHeader">
            <summary> Resource string: "Command Argument" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleCommandParameterTreeViewItemHeader">
            <summary> Resource string: "Command Parameter" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleCommentTreeViewItemHeader">
            <summary> Resource string: "Comment" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleGroupEndTreeViewItemHeader">
            <summary> Resource string: "Group End" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleGroupStartTreeViewItemHeader">
            <summary> Resource string: "Group Start" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleKeywordTreeViewItemHeader">
            <summary> Resource string: "Keyword" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleLineContinuationTreeViewItemHeader">
            <summary> Resource string: "Line Continuation" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleLoopLabelTreeViewItemHeader">
            <summary> Resource string: "Loop Label" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleMemberTreeViewItemHeader">
            <summary> Resource string: "Member" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleNumberTreeViewItemHeader">
            <summary> Resource string: "Number" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleOperatorTreeViewItemHeader">
            <summary> Resource string: "Operator" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleStatementSeparatorTreeViewItemHeader">
            <summary> Resource string: "Statement Separator" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleStringTreeViewItemHeader">
            <summary> Resource string: "String" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleTypeTreeViewItemHeader">
            <summary> Resource string: "Type" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowConsoleVariableTreeViewItemHeader">
            <summary> Resource string: "Variable" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowXmlTokensTreeViewItemHeader">
            <summary> Resource string: "XML Tokens" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowCommentTreeViewItemHeader2">
            <summary> Resource string: "Comment" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowCommentDelimiterTreeViewItemHeader">
            <summary> Resource string: "Comment Delimiter" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowElementNameTreeViewItemHeader">
            <summary> Resource string: "Element Name" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowMarkupExtensionTreeViewItemHeader">
            <summary> Resource string: "Markup Extension" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowAttributeTreeViewItemHeader2">
            <summary> Resource string: "Attribute" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowQuoteTreeViewItemHeader">
            <summary> Resource string: "Quote" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowQuotedStringTreeViewItemHeader">
            <summary> Resource string: "Quoted String" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowTagTreeViewItemHeader">
            <summary> Resource string: "Tag" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowTextTreeViewItemHeader">
            <summary> Resource string: "Text" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowCharacterDataTreeViewItemHeader">
            <summary> Resource string: "CharacterData" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowOutputStreamsTreeViewItemHeader">
            <summary> Resource string: "Output Streams" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowBackgroundTreeViewItemHeader4">
            <summary> Resource string: "Background" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowForegroundTreeViewItemHeader3">
            <summary> Resource string: "Foreground" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowBackgroundTreeViewItemHeader5">
            <summary> Resource string: "Background" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowForegroundTreeViewItemHeader4">
            <summary> Resource string: "Foreground" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowBackgroundTreeViewItemHeader6">
            <summary> Resource string: "Background" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowForegroundTreeViewItemHeader5">
            <summary> Resource string: "Foreground" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowBackgroundTreeViewItemHeader7">
            <summary> Resource string: "Background" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsWindowForegroundTreeViewItemHeader6">
            <summary> Resource string: "Foreground" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsColorPickerRedLabelContent">
            <summary> Resource string: "Red" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsColorPickerGreenLabelContent">
            <summary> Resource string: "Green" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsColorPickerBlueLabelContent">
            <summary> Resource string: "Blue" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsColorPickerHexadecimalRadioButtonContent">
            <summary> Resource string: "Hexadecimal" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsManageThemesImportButtonContent">
            <summary> Resource string: "Import..." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsManageThemesExportButtonContent">
            <summary> Resource string: "Export..." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsManageThemesDeleteButtonContent">
            <summary> Resource string: "Delete" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsManageThemesRenameButtonContent">
            <summary> Resource string: "Rename" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsManageThemesCancelButtonContent">
            <summary> Resource string: "Cancel" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsRenameFailedMessage">
            <summary> Resource string: "The theme cannot be renamed because another theme already exists with that name." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsOverwritePresetThemeTemplate">
            <summary> Resource string: "{0} (1)" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsInvalidFontInThemeFile">
            <summary> Resource string: "The font "{0}" specified in the theme file isn't installed on your computer.  The current font will be preserved." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsInvalidFontSizeInThemeFile">
            <summary> Resource string: "The font size "{0}" specified in the theme file isn't in the valid range of 6 to 32.  The current font size will be preserved." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsErrorsInThemeImport">
            <summary> Resource string: "The following errors occurred while importing the theme:\r\n\r\n{0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSamplePowerShellComment">
            <summary> Resource string: "# This is a PowerShell comment." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSampleLength">
            <summary> Resource string: "'Length:'" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSampleQuotedString">
            <summary> Resource string: "This is a Quoted String, surrounded by Quotes." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSampleXmlComment">
            <summary> Resource string: " This is a Comment, surrounded by Comment Delimiters." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSampleXmlText">
            <summary> Resource string: "This is Text." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSampleCharacterData">
            <summary> Resource string: "This is Character Data." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSampleOutputText">
            <summary> Resource string: "This is some normal output text." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSampleThisIsAnError">
            <summary> Resource string: "Write-Error \"This is an Error.\" : This is an Error." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSampleThisIsAWarning">
            <summary> Resource string: "WARNING: This is a Warning." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSampleThisIsVerboseOutput">
            <summary> Resource string: "VERBOSE: This is Verbose output." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsSampleThisIsDebugOutput">
            <summary> Resource string: "DEBUG: This is Debug output." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsThemeNameDarkLight">
            <summary> Resource string: "Dark Console, Light Editor (default)" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsThemeNameLightDark">
            <summary> Resource string: "Light Console, Dark Editor" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsThemeNameDarkDark">
            <summary> Resource string: "Dark Console, Dark Editor" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsThemeNameLightLight">
            <summary> Resource string: "Light Console, Light Editor" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsThemeNameMonochromeGreen">
            <summary> Resource string: "Monochrome Green" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsThemeNamePresentation">
            <summary> Resource string: "Presentation" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsMostRecentlyUsedOutOfRangeMessage">
            <summary> Resource string: "The value entered for the number of recent files to show must be between {0} and {1}." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsErrorsInGeneralSettingsMessage">
            <summary> Resource string: "The following errors occurred while validating the settings.  Please correct them and try again:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsReallyResetMessage">
            <summary> Resource string: "Restore defaults?" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsReallyResetTitle">
            <summary> Resource string: "Restore Defaults Confirmation" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsManageThemesRenameToBlankMessage">
            <summary> Resource string: "The theme name can't be empty or consist only of whitespace characters." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsTextInScriptPaneExample">
            <summary> Resource string: "This is an example of some text in the script pane." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsGuiStrings.OptionsManageThemesWindowTitle">
            <summary> Resource string: "Manage Themes" </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            OptionsWindow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.options">
            <summary>
            The current ISEOptions object passed in by the caller
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.currentTheme">
            <summary>
            The color theme the dialog is currently working on
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.originalTheme">
            <summary>
            The color theme we started out with, so we can tell if it has changed since the UI opened
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.settingsState">
            <summary>
            The current state of the general settings controls
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.originalState">
            <summary>
            The original state of the general settings controls
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.selectedColorableItem">
            <summary>
            The current selected item from the tree view
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.#ctor">
            <summary>
            Initializes a new instance of the OptionsWindow class and initializes it
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.#ctor(Microsoft.PowerShell.Host.ISE.ISEOptions)">
            <summary>
            Initializes a new instance of the OptionsWindow class based on a set of ISE options.
            </summary>
            <param name="initialOptions">The current options.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.PopulateUIWithCurrentOptions">
            <summary>
            This method updates the UI based on the current settings in the options object.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ResetDefaultSettings">
            <summary>
            This method resets all of the options based on the defaults specified in $psise.options.defaultoptions
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.PopulateFontControls">
            <summary>
            Populate the font name and size combo boxes.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.UpdateThemeLabel">
            <summary>
            Populate the name of the currently selected theme, or indicate that it's a user-customized theme.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ValidateSettings">
            <summary>
            This method validates whether the current settings are valid and displays a message box if they aren't
            </summary>
            <returns>True or false, depending on whether the settings were valid</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.RestoreDefaultsButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event from clicking the restore defaults button
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.Picker_ColorChanged(System.Object,System.EventArgs)">
            <summary>
            Handle the event when the color picker's current color is changed
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.FixedWidthCheckbox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the fixed-width-only checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ColorableItemTreeView_SelectedItemChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handle the event when someone selects a different tree view item
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.UpdateRichTextSampleBox">
            <summary>
            Update the rich-text sample box based on the currently selected colorable item, or the default if none is selected.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.SetButtonEnabledStates">
            <summary>
            Update the state of the buttons based on whether the user has changed any settings
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ShowOutliningCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the show outlining checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ShowOutliningCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the show outlining checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ShowLineNumbersCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the show line numbers checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ShowLineNumbersCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the show line numbers checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.WarnAboutDuplicateFilesCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the duplicate files checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.WarnAboutDuplicateFilesCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the duplicate files checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.PromptToSaveBeforeRunCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the prompt to save checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.PromptToSaveBeforeRunCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the prompt to save checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ScriptPanePositionComboBox_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handle the event when someone selects a different script pane position
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ShowIntellisenseInConsolePaneCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the console pane intellisense checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ShowIntellisenseInConsolePaneCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the console pane intellisense checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.EnterSelectsIntellisenseInConsolePaneCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the enter selects in console pane checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.EnterSelectsIntellisenseInConsolePaneCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the enter selects in console pane checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ShowIntellisenseInScriptPaneCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the intellisense in script pane checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ShowIntellisenseInScriptPaneCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the intellisense in script pane checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.EnterSelectsIntellisenseInScriptPaneCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the enter selects in script pane checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.EnterSelectsIntellisenseInScriptPaneCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the enter selects in script pane checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.TimeoutInSecondsComboBox_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handle the event when someone selects a different intellisense timeout
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.UseLocalHelpCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the use local help checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.UseLocalHelpCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the use local help checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ShowToolBarCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the show console pane on top checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ShowToolBarCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the show console pane on top checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.UseDefaultSnippetsCheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the use default snippets checkbox is checked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.UseDefaultSnippetsCheckBox_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event when the use default snippets checkbox is unchecked
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.AutosaveTextBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handle the event when someone changes the autosave interval
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.RecentFilesTextBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Handle the event when someone changes the MRU count
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.CancelButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event from clicking the cancel button
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ApplyButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event from clicking the apply button
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.OkButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the event from clicking the OK button
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.FontFamilyComboBox_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handle the event from changing the font selection
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.FontSizeComboBox_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handle the event from changing the font size selection
            </summary>
            <param name="sender">An object representing the sender of the event</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ManageThemesButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            If the user clicks "Manage Themes...", open the UI that lets them add, edit, delete, etc.
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.ColorableItemTreeView_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            If the tree view gets focus and there's no selected node, select the first node.  This makes the node visible for keyboard navigation.
            </summary>
            <param name="sender">A reference to the sender</param>
            <param name="e">An object containing information about the event</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.OptionsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PresetThemes">
            <summary>
            This class exposes a collection of preset color and font themes.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PresetThemes.themes">
            <summary>
            A dictionary collection for storing preset themes
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PresetThemes.lightBackgroundDefault">
            <summary>
            This theme contains the default ISE colors.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PresetThemes.lightConsoleDarkEditor">
            <summary>
            This theme contains light console and dark editor settings
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PresetThemes.lightConsoleLightEditor">
            <summary>
            This theme contains light settings for both the console and editor
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PresetThemes.darkConsoleDarkEditor">
            <summary>
            This theme contains dark settings for both the console and editor.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PresetThemes.monochromeGreen">
            <summary>
            This theme contains monochrome green settings
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PresetThemes.presentationTheme">
            <summary>
            This theme has high contrast and a large font for doing demos
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PresetThemes.Themes">
            <summary>
            Gets the dictionary
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample">
            <summary>
            This class abstracts a 'sample', which is a list of colored tokens for displaying text coloring settings before they're applied to the actual UI.  A sample consists
            of a series of 'part' objects, that each have a foreground color, an optional background color, a piece of text, and an optional CRLF.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.FontIncrease">
            <summary>
            This constant is added to the font size in documents to make it roughly match what the ISE displays at zoom level 100.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.TextBoxBuffer">
            <summary>
            This is a buffer value in device-independant pixels to be added to line measurements so the anti-word-wrap magic works.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.namedSamples">
            <summary>
            A static collection of samples to display when different tree view items are selected
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.content">
            <summary>
            A list of colored text parts for the sample
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.colorTheme">
            <summary>
            The color theme for the sample
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.backgroundColorKey">
            <summary>
            The key representing the background color of the sample
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.glyphTypeFace">
            <summary>
            The typeface for the font
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.NamedSamples">
            <summary>
            Gets the predefined samples
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.Content">
            <summary>
            Gets the list of text parts for this sample
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.ColorTheme">
            <summary>
            Sets the color theme
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.BackgroundColorKey">
            <summary>
            Sets the color theme key that indicates the background color to use
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.BackgroundColor">
            <summary>
            Gets the background color, as translated from the background color key
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.ToDocument">
            <summary>
            This method renders the current sample as a FlowDocument that can be passed to a RichTextBox control
            </summary>
            <returns>The FlowDocument</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.GetScriptPaneTextFileSample">
            <summary>
            This method builds a sample for the script pane, when the script pane displays a text file
            </summary>
            <returns>A new rich text sample object</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.GetScriptPaneSample">
            <summary>
            This method builds a sample for the script pane
            </summary>
            <returns>A new rich text sample object</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.GetXmlSample">
            <summary>
            This method builds a sample for the script pane
            </summary>
            <returns>A new rich text sample object</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.GetConsolePaneOutputSample">
            <summary>
            This method builds a sample for the script pane
            </summary>
            <returns>A new rich text sample object</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.GetConsolePaneSample">
            <summary>
            This method builds a sample for the script pane
            </summary>
            <returns>A new rich text sample object</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.SetCurrentFontForMeasuring(System.String)">
            <summary>
            This method looks up the typeface for the current font and stores it so we don't have to look it up for every subsequent measurement of a text part
            </summary>
            <param name="fontFamily">The name of the current font</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextSample.MeasureStringInCurrentFont(System.String,System.Int32)">
            <summary>
            This method measures a single text part in the current font
            </summary>
            <param name="stringToMeasure">The string to measure</param>
            <param name="size">The font size</param>
            <returns>The width of the rendered string in pixels</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport">
            <summary>
            This class contains helper methods for working with colors and fonts
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.OutlineTextMetricUnicodePanoseOffset">
            <summary>
            This is the offset of the one-byte PANOSE number in the Unicode version of the OUTLINETEXTMETRIC structure.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.graphicsContext">
            <summary>
            Graphics context for loading and testing fonts
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.graphicsHandle">
            <summary>
            The handle of the graphics context
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.cachedFontFamilies">
            <summary>
            Collection for storing a list of font family objects so they don't have to be generated every time we reference them
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.symbolFonts">
            <summary>
            Collection for keeping track of which fonts are symbol fonts like WingDings, so their names can be displayed
            in a human-readable font in the UI
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.nonSymbolFonts">
            <summary>
            Collection for keeping track of which fonts are not symbol fonts like WingDings, so their names can be displayed
            in a human-readable font in the UI
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.CachedFontFamilies">
            <summary>
            Gets a dictionary of cached font families
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.GetFontNames(System.Boolean,System.String)">
            <summary>
            Returns a sorted list of available font names
            </summary>
            <param name="monospaceOnly">Flag to specify monospace only</param>
            <param name="currentFontFamily">An additional font name to include in the list</param>
            <returns>The list of font names</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.IsFontMonospace(System.String)">
            <summary>
            This method tests whether a font is truly monospace, based on comparing the width of the 'A' and 'l' characters.  If they're equal, the font
            is considered monospace.
            </summary>
            <param name="fontFamily">The name of the font</param>
            <returns>True or false</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.ScaleColor(System.Windows.Media.Color,System.Double,System.Byte)">
            <summary>
            This method dims a color by multiplying the R, G, and B values by a decimal number
            </summary>
            <param name="original">The color to scale</param>
            <param name="factor">How much to scale (0 to 1 inclusive)</param>
            <param name="floor">A value to add to make the resulting color not be dark</param>
            <returns>A dimmed color</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.GetGoodContrastColor(System.Windows.Media.Color)">
            <summary>
            This method returns either black or white, depending on which color has the higher contrast ratio with
            the background color provided.
            </summary>
            <param name="backColor">The background color</param>
            <returns>Colors.Black or Colors.White</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.IsSymbolFont(System.String)">
            <summary>
            This method tests whether a font has been identified as a symbol font, so its name can be displayed
            in the UI with a human-readable font
            </summary>
            <param name="fontName">The name of the font</param>
            <returns>True or false depending on whether it's a symbol font</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.GetLuminanceElement(System.Byte)">
            <summary>
            This method calculates a luminance factor for one color channel to support finding the overall contrast
            ratio between two colors.
            </summary>
            <param name="color">The color to whump on</param>
            <returns>The luminance factor</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.GetLuminanceForOneColor(System.Windows.Media.Color)">
            <summary>
            This method calculates the combined luminance for three color channels of a color
            </summary>
            <param name="color">The color to evaluate</param>
            <returns>The luminance</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.FontAndColorSupport.GetColorContrastRatio(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            This method calculates the contrast ratio between two display colors, based on the formula in the
            W3C Web Content Accessibility Guidelines at http://www.w3.org/TR/WCAG20-TECHS/.
            </summary>
            <param name="foreColor">The foreground color</param>
            <param name="backColor">The background color</param>
            <returns>The contrast ratio</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState">
            <summary>
            This class stores the state of options dialog settings before they are applied to the live options object
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.autoSaveMinuteInterval">
            <summary>
            How frequently to save edited scripts
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.intellisenseTimeoutInSeconds">
            <summary>
            Intellisense timeout
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.mruCount">
            <summary>
            How many files to show in the MRU list
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.selectedScriptPaneState">
            <summary>
            Whether the script pane should be on top, right, or maximized
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.showDefaultSnippets">
            <summary>
            Whether to show default snippets
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.showIntellisenseInConsolePane">
            <summary>
            Enables intellisense in the console pane
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.showIntellisenseInScriptPane">
            <summary>
            Enables intellisense in the script pane
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.showLineNumbers">
            <summary>
            Shows line numbers in the editor
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.showOutlining">
            <summary>
            Shows outlining in the editor
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.showToolBar">
            <summary>
            Toggles the tool bar
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.showWarningBeforeSavingOnRun">
            <summary>
            Enables warnings before automatically saving scripts
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.showWarningForDuplicateFiles">
            <summary>
            Enables warnings when you edit duplicate scripts
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.useEnterToSelectInConsolePaneIntellisense">
            <summary>
            Enables using enter to select intellisense in the console pane
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.useEnterToSelectInScriptPaneIntellisense">
            <summary>
            Enables using enter to select intellisense in the script pane
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.useLocalHelp">
            <summary>
            Enables using local help
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.AutoSaveMinuteInterval">
            <summary>
            Gets or sets how frequently to save edited scripts
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.IntellisenseTimeoutInSeconds">
            <summary>
            Gets or sets the intellisense timeout
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.MruCount">
            <summary>
            Gets or sets how many files to show in the MRU list
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.SelectedScriptPaneState">
            <summary>
            Gets or sets whether the script pane should be on top, right, or maximized
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.ShowDefaultSnippets">
            <summary>
            Gets or sets a value indicating whether to show default snippets
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.ShowIntellisenseInConsolePane">
            <summary>
            Gets or sets a value indicating whether to enable intellisense in the console pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.ShowIntellisenseInScriptPane">
            <summary>
            Gets or sets a value indicating whether to enable intellisense in the script pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.ShowLineNumbers">
            <summary>
            Gets or sets a value indicating whether to show line numbers in the editor
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.ShowOutlining">
            <summary>
            Gets or sets a value indicating whether to show outlining in the editor
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.ShowToolBar">
            <summary>
            Gets or sets a value indicating whether to show the tool bar
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.ShowWarningBeforeSavingOnRun">
            <summary>
            Gets or sets a value indicating whether to show before automatically saving scripts
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.ShowWarningForDuplicateFiles">
            <summary>
            Gets or sets a value indicating whether to show warnings when you edit duplicate scripts
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.UseEnterToSelectInConsolePaneIntellisense">
            <summary>
            Gets or sets a value indicating whether to enable using enter to select intellisense in the console pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.UseEnterToSelectInScriptPaneIntellisense">
            <summary>
            Gets or sets a value indicating whether to enable using enter to select intellisense in the script pane
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.UseLocalHelp">
            <summary>
            Gets or sets a value indicating whether to enable using local help
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.op_Equality(Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState,Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState)">
            <summary>
            This override does the same as Equals()
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>True or false</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.op_Inequality(Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState,Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState)">
            <summary>
            This does the opposite of ==
            </summary>
            <param name="left">The first object to compare</param>
            <param name="right">The second object to compare</param>
            <returns>True or false</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.GetHashCode">
            <summary>
            This isn't currently used anywhere, so just return the default
            </summary>
            <returns>The default hash code from .Net</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.Equals(System.Object)">
            <summary>
            This override compares two instances of this type by comparing all of the fields
            </summary>
            <param name="obj">The other instance</param>
            <returns>True or false</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.FromISEOptions(Microsoft.PowerShell.Host.ISE.ISEOptions)">
            <summary>
            This method creates an instance of the type from an existing ISEOptions object
            </summary>
            <param name="options">The ISE options</param>
            <returns>A new instance of this type</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.ApplyToExistingOptions(Microsoft.PowerShell.Host.ISE.ISEOptions)">
            <summary>
            This method applies the settings in this instance to an ISEOptions object
            </summary>
            <param name="options">The ISE options</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.ApplyToExistingOptions(Microsoft.PowerShell.Host.ISE.ISEOptions,System.Collections.ObjectModel.Collection{System.String}@)">
            <summary>
            This method applies the settings in this instance to an ISEOptions object and 
            returns a collection of error strings if some of the settings can't be applied
            </summary>
            <param name="options">The ISE options</param>
            <param name="errorMessages">The collection to populate</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.GeneralSettingsState.Validate(System.Collections.ObjectModel.Collection{System.String}@)">
            <summary>
            This method validates the settings object by applying it to a dummy ISEOptions object
            </summary>
            <param name="errorMessages">A collection of error messages to populate</param>
            <returns>True or false depending on whether the settings are correct</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart">
            <summary>
            This class abstracts a single section of colored text in a sample.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.content">
            <summary>
            The text content of the part
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.colorKey">
            <summary>
            The key to the color dictionary that represents the foreground color of the part
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.backgroundColorKey">
            <summary>
            The key to the color dictionary that represents the background color of the part
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.lineFeed">
            <summary>
            A flag to indicate whether this part is followed by a new line
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the RichTextPart class with all the settings.
            </summary>
            <param name="partColorKey">Foreground color key</param>
            <param name="partBackgroundColorKey">Background color key</param>
            <param name="partContent">The text to use as the content</param>
            <param name="partLineFeed">A flag indicating an optional linefeed</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the RichTextPart class with no background color defined.
            </summary>
            <param name="partColorKey">Foreground color key</param>
            <param name="partContent">The text to use as the content</param>
            <param name="partLineFeed">A flag indicating an optional linefeed</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RichTextPart class with no background color or linefeed defined
            </summary>
            <param name="partColorKey">Foreground color key</param>
            <param name="partContent">The text to use as the content</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.Content">
            <summary>
            Gets the text in the text part
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.ColorKey">
            <summary>
            Gets the foreground color key
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.BackgroundColorKey">
            <summary>
            Gets the background color key
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.RichTextPart.LineFeed">
            <summary>
            Gets a value indicating whether the text part is followed by a new line
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods">
            <summary>
            Interop methods, constants and structures needed for named pipes.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.SPI_GETHIGHCONTRAST">
            <summary>
            Constant used in the call to SystemParametersInfo
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.COLOR_WINDOWTEXT">
            <summary>
            WindowText color constant
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.COLOR_WINDOW">
            <summary>
            Window color constant
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.COLOR_ACTIVECAPTION">
            <summary>
            ActiveCaption color constant
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.COLOR_BTNSHADOW">
            <summary>
            Button Shadow (SystemColors.ControlDarkDarkColor) color constant
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.COLOR_HIGHLIGHT">
            <summary>
            Item(s) selected in a control.
            Default color used by the editor for selection
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.COLOR_HIGHLIGHTTEXT">
            <summary>
            Text for item selected in a control.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.COLOR_HOTLIGHT">
            <summary>
            Gets the color for hyperlink text.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.COLOR_GRAYTEXT">
            <summary>
            Grayed (disabled) text. This color is set to 0 if the current display driver does not support a solid gray color.
            Default color used by the editor for sinactive election
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HCF_HIGHCONTRASTON">
            <summary>
            Flag to check in the true return of SystemParametersInfo
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.WM_SYSCOLORCHANGE">
            <summary>
            Message received to indicate a system color change that will be triggered for High Contrast.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.WM_THEMECHANGED">
            <summary>
            Message received when the theme changes.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.WM_QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.WM_ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message.
            The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.WM_KEYDOWN">
            <summary>
            Posted to the window with the keyboard focus when a nonsystem key is pressed. 
            A nonsystem key is a key that is pressed when the ALT key is not pressed. 
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.WM_SYSKEYDOWN">
            <summary>
            Posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar)
            or holds down the ALT key and then presses another key. It also occurs when no window 
            currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the
            active window. The window that receives the message can distinguish between these two contexts
            by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.ENDSESSION_LOGOFF">
            <summary>
            The user is logging off in WM_QUERYENDSESSION or WM_ENDSESSION.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HH_DISPLAY_TOPIC">
            <summary>
            Constant used in HtmlHelpDisplayTopic to display a help topic.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HH_CLOSE_ALL">
            <summary>
            Constant used in HtmlHelpDisplayTopic to close all help windows.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.RestartFlags">
            <summary>
            Flags for the RegisterApplicationRestart function
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.RestartFlags.NONE">
            <summary>None of the options below.</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.RestartFlags.RESTART_NO_CRASH">
            <summary>Do not restart the process if it terminates due to an unhandled exception.</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.RestartFlags.RESTART_NO_HANG">
            <summary>Do not restart the process if it terminates due to the application not responding.</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.RestartFlags.RESTART_NO_PATCH">
            <summary>Do not restart the process if it terminates due to the installation of an update.</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.RestartFlags.RESTART_NO_REBOOT">
            <summary>Do not restart the process if the computer is restarted as the result of an update.</summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.GetSysColor(System.Int32)">
            <summary>
            Gets a System Color.
            </summary>
            <param name="nIndex">Color index</param>
            <returns>the System Color corresponding to <paramref name="nIndex"/>.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.SystemParametersInfo(System.Int32,System.Int32,Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HIGHCONTRAST@,System.Int32)">
            <summary>
            Retrieves or sets the value of one of the system-wide parameters. This function can also update the user profile while setting a parameter.
            </summary>
            <param name="uiAction">The system-wide parameter to be retrieved or set. We only used it with NativeMethods.SPI_GETHIGHCONTRAST.</param>
            <param name="uiParam">size of pvParam.</param>
            <param name="pvParam">HIGHCONTRAST structure</param>
            <param name="fWinIni">Boolean that, if a system parameter is being set, specifies whether the user profile is to be updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to notify them of the change.</param>
            <returns>True if it was able to retrieve the parameter.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.IsAppThemed">
            <summary>
            API used to figure out if we are in classic mode
            </summary>
            <returns>False if we are in classic mode.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.CloseAllHelpWindows">
            <summary>
            Closes all help windows.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HtmlHelpDisplayTopic(System.Int32,System.String)">
            <summary>
            Called to display a particular help topic
            </summary>
            <param name="caller">caller from the unmanaged API</param>
            <param name="file">file and help topic link</param>
            <returns>the return value of the underlying native API</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.WideCharToMultiByte(System.UInt32,System.UInt32,System.String,System.Int32,System.Byte[],System.Int32,System.IntPtr,System.Boolean@)">
            <summary>
            This function maps a wide-character string to a new character string. The new character string is not necessarily from a multibyte character set. 
            </summary>
            <param name="CodePage">The code page used to perform the conversion.</param>
            <param name="dwFlags">The handling of unmapped characters.</param>
            <param name="lpWideCharStr">wide-character string to be converted.</param>
            <param name="cchWideChar">The number of Unicode (16-bit) characters in the string pointed to by the lpWideCharStr parameter</param>
            <param name="lpMultiByteStr">buffer to receive the translated string</param>
            <param name="cbMultiByte">The size in bytes of the buffer pointed to by the lpMultiByteStr parameter. </param>
            <param name="lpDefaultChar">Pointer to the character used if a wide character cannot be represented in the specified code page. If this parameter is NULL, a system default value is used. </param>
            <param name="lpUsedDefaultChar">flag that indicates whether a default character was used</param>
            <returns>
            If cbMultiByte is nonzero, the number of bytes written to the buffer pointed to by lpMultiByteStr
            indicates success. If cbMultiByte is zero, the required size, in bytes, for a buffer that can receive 
            the translated string indicates success.
            Zero indicates failure.
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.RegisterApplicationRestart(System.String,Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.RestartFlags)">
            <summary>
            Registers the active instance of an application for restart.
            </summary>
            <param name="pwzCommandLine">
            A pointer to a Unicode string that specifies the command-line arguments for the application when it is restarted.
            The maximum size of the command line that you can specify is RESTART_MAX_CMD_LINE characters. Do not include the name of the executable
            in the command line; this function adds it for you. 
            If this parameter is NULL or an empty string, the previously registered command line is removed. If the argument contains spaces, 
            use quotes around the argument.
            </param>
            <param name="dwFlags">One of the options specified in RestartFlags</param>
            <returns>
            This function returns S_OK on success or one of the following error codes:
                E_FAIL for internal error.
                E_INVALIDARG if rhe specified command line is too long.
            </returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.GetOutlineTextMetricsAsByteArray(System.IntPtr,System.Int32,System.Byte[])">
            <summary>
            Native API for getting extended properties of fonts.  This is used by the options dialog to
            tell whether a font is a symbol font like WingDings
            </summary>
            <param name="hdc">Handle of the device context to use</param>
            <param name="cbData">Number of bytes to return</param>
            <param name="buffer">Buffer in which to return bytes</param>
            <returns>The number of bytes written to the buffer</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            Native API for loading a font into a device context
            </summary>
            <param name="hdc">Handle to the device context</param>
            <param name="hgdiobj">Handle to the object (font) to load</param>
            <returns>Handle of the previous loaded object</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HtmlHelp(System.Int32,System.String,System.UInt32,System.UInt32)">
            <summary>
            Basic native API for help file invocation
            </summary>
            <param name="caller">the help caller</param>
            <param name="file">the help file</param>
            <param name="command">the help command</param>
            <param name="data">the command data</param>
            <returns>the return of the underlying native API</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HIGHCONTRAST">
            <summary>
            Structure used in WPFHelper's IsHighContrast
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HIGHCONTRAST.StructSize">
            <summary>
            Size of the structure
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HIGHCONTRAST.DWFlags">
            <summary>
            Return value from SystemParametersInfo
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HIGHCONTRAST.DefaultScheme">
            <summary>
            IntPtr.Zero in our call to SystemParametersInfo
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.HxHelpPane">
            <summary>
            Declare the COM coclass for IHxHelpPane.
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.IHxHelpPane">
            <summary>
            Declare the interface for launching AP Client help topics.
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.IHxHelpPane.DisplayTask(System.String)">
            <summary>
            Display a task given a url.
            </summary>
            <param name="bstrUrl">Url of a task to display.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.IHxHelpPane.DisplayContents(System.String)">
            <summary>
            Display the contents given a url.
            </summary>
            <param name="bstrUrl">Url of contents to display.</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.NativeMethods.IHxHelpPane.DisplaySearchResults(System.String)">
            <summary>
            Search for help topics with the given query.
            </summary>
            <param name="bstrSearchQuery">Search query to display </param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings">
            <summary>
            Contains all the strings that should not be localized.
            The comments in each field are the justification for the strings not to be localized
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Console">
            <summary> category suffix = "Console" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Ellipsis">
            <summary>
            String used in outlining to represent more information = "..."
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSXMLTokens">
            <summary> buffer property = "PSXMLTokens" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSXMLErrors">
            <summary> buffer property = "PSXMLErrors" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSXMLRegions">
            <summary> buffer property = "PSXMLRegions" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSXMLRegionTags">
            <summary> buffer property = "PSXMLRegionTags" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSTokens">
            <summary> buffer property = "PSTokens" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSAst">
            <summary> buffer property = "PSAst" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSSpanTokenized">
            <summary> buffer property = "PSSpanTokenized" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSTokenSpans">
            <summary> buffer property = "PSTokenSpans" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSStartBrace">
            <summary> buffer property = "PSStartBrace" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSEndBrace">
            <summary> buffer property = "PSEndBrace" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSTokenErrors">
            <summary> buffer property = "PSTokenErrors" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSTokenErrorTags">
            <summary> buffer property = "PSTokenErrorTags" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSRegions">
            <summary> buffer property = "PSRegions" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSRegionTags">
            <summary> buffer property = "PSRegionTags" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.APClientTopicFormat">
            <summary> The prefix for launching a topic with AP client. The guid of the topic is appended to this prefix. </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.DefaultOnlineHelpFwLink">
            <summary> HelpLink maps to fwlink?linkID=275852 </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Save">
            <summary>method name = "Save"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.SaveAs">
            <summary>method name = "SaveAse"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.ProgressCannotBeAddedUnderItself">
            <summary>progress tracing message = "Progress with id {0} cannot be added under itself."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.ProgressNotFound">
            <summary>progress tracing message = "Progress with id {0} was not found."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AddConsoleInputBlockingCommandFormat">
            <summary>command name= "{0} {1} {2}"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AddConsoleInputBlockingFunctionName">
            <summary>function name= "AddConsoleInputBlockingFunction"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.LaunchFunctionName">
            <summary>function name= "Launch"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PowerShellDotExe">
            <summary>executable name= "powershell.exe"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.TopMarker">
            <summary>Undo stack marker id = "TopMarker"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.GuiStrings">
            <summary>Resource identifier for the application = "GuiStrings"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.DlgFilter">
            <summary> Open/Save dialog filter = "{0}(*.ps1, *.psm1, *.psd1, *.ps1xml, *.pssc, *.psrc, *.cdxml)|*.ps1;*.psm1;*.psd1;*.ps1xml;*.pssc..." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.OutDefault">
            <summary> command = "out-default" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.OutString">
            <summary> command = "Out-String" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.StreamParameter">
            <summary> command parameter = "-Stream" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.ProfileRunCommand">
            <summary> command = ". {0}"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Profile">
            <summary> command = "profile" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PsUnsupportedConsoleApplications">
            <summary> command = "psUnsupportedConsoleApplications" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PsUnsupportedConsoleApplicationsVariableName">
            <summary> command = "$psUnsupportedConsoleApplications" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PsLocalHelp">
            <summary> command = "psLocalHelp" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PsOnlineHelp">
            <summary> command = "psOnlineHelp" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PsLocalHelpVariableName">
            <summary> command = "$psLocalHelp" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PsOnlinelHelpVariableName">
            <summary> command = "$psOnlineHelp" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PsISE">
            <summary> command = "psISE" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.FWLinkFormat">
            <summary> command = "https://go.microsoft.com/fwlink/?LinkID={0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.LocalHelpLinkFormat">
            <summary> command = "{0}::/html/{1}.htm" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PSHomeVariableName">
            <summary> command = "$pshome" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.DefaultPrompt">
            <summary> default prompt =  "PS> "</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PlusSpace">
            <summary> error stripper helper =  "+ "</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Ps1">
            <summary> Extension for scripts = ".ps1" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Psm1">
            <summary> Extension for modules = ".psm1" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Psd1">
            <summary> Extension for data files = ".psd1" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Pssc">
            <summary> Extension for session configuration files = ".pssc" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Psrc">
            <summary> Extension for role capability files = ".psrc" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PS1Xml">
            <summary> Content type for xml = "PS1Xml" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.DotPS1Xml">
            <summary> Extension for powershell xml = ".ps1xml" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.DotXml">
            <summary> Extension for xml = ".xml" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.DotXaml">
            <summary> Extension for xaml = ".xaml" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.DotCdxml">
            <summary> Extension for cdxml = ".cdxml" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.DotXsl">
            <summary> Extension for cdxml = ".xsl" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.DotXsd">
            <summary> Extension for cdxml = ".xsd" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.XmlPreamblePrefix">
            <summary> Used to check if the first line of a file starts with the XML preamble, identifying it as an XML file. </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.NewLine">
            <summary> line break = "\n"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CrLf">
            <summary> complete line break = "\r\n"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Text">
            <summary> editor content type = "text"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.ColorSpans">
            <summary> text buffer property name = "GPSColorSpansForOutputClassifier"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.TextMarkerProvider">
            <summary> text buffer property name = "TextMarkerProvider"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.TokenColors">
            <summary> text buffer property name = "GPSTokenColorsForPowerShellClassifier"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.TextOutput">
            <summary> control identifyer = "TextOutput"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PS1ConsoleGaps">
            <summary> classification type = "PS1ConsoleGaps"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PS1ScriptGaps">
            <summary> classification typ = "PS1ScriptGaps"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PS1HighContrast">
            <summary> classification typ = "PS1HighContrast"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.NonScript">
            <summary> control identifyer = "NonScript"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PowerShell">
            <summary> editor content type = "powershell"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PromptCommand">
            <summary> command string  = "prompt"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.StyleDictionaryXaml">
            <summary> resource name  = "pack://application:,,,/Microsoft.PowerShell.GPowerShell;component/StyleDictionary.xaml"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.MicrosoftPowerShellEditor">
            <summary> assembly name = "Microsoft.PowerShell.Editor,Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PowerShellISEShellId">
            <summary> ShellId =  "Microsoft.GPowerShell"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.RunspaceControl">
            <summary> Control name =  "runspaceControl"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.SelectedContent">
            <summary> Control presenter ContentSource =  "SelectedContent"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.LineMarkBookmark">
            <summary> command name = "bookmark"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.LineMarkBreakpoint">
            <summary> command name = "breakpoint"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.LineMarkCurrentStatement">
            <summary> command name = "currentstatement"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.LineMarkReturnStatement">
            <summary> command name = "returnstatement"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.LineMarkStepBackCurrentStatement">
            <summary> command name = "stepbackcurrentstatement"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.ErrorLocationFormat">
            <summary> Error location not localized in powershell.exe = "At {0}:{1} char:{2}"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Line">
            <summary> Error line not localized in powershell.exe = "line"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.ExceptionFormat">
            <summary> Error format not localized in powershell.exe = "{0}\r\n{1}\r\n    + CategoryInfo          : {2}\r\n    + FullyQualifiedErrorId : {3}"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Unindent">
            <summary>shortcut functionality name used in assertion = "Unindent"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.ShiftTab">
            <summary>Hardcoded because Tab is Hardcoded = "Shift+Tab"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.RenameRunspace">
            <summary>command = "\r\nif ($?) {{$psISE.CurrentPowerShellTab.DisplayName = '{0}'}}"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.EnterPsSessionFormat">
            <summary>command = "enter-pssession {1}\r\nif ($?) {{$psISE.CurrentPowerShellTab.DisplayName = '{0}'}}"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.EnterPsSessionWithCredentialFormat">
            <summary>command = "enter-pssession {1} -credential:{2}\r\nif ($?) {{$psISE.CurrentPowerShellTab.DisplayName = '{0}'}}"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.DefaultFontFallback">
            <summary>Lucida Console</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.KeyboardDisplayName">
            <summary> command name = "KeyboardDisplayName"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PowerShellIseNoProfile">
            <summary> command name = "powershell_ise.exe -noprofile"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.GPowerShellAutoSaveMutex">
            <summary> command name = "Literaly: GPowerShellAutoSaveMutex"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutoSaveFiles">
            <summary> command name = "Literaly: AutoSaveFiles"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutoSaveInformation">
            <summary> command name = "Literaly: AutoSaveInformation"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PS1OutputClassificationFormatString">
            <summary> Format string = "PS1OutputForeground{0:X2}{1:X2}{2:X2}{3:X2}Background{4:X2}{5:X2}{6:X2}{7:X2}"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.LastWordReplacementSpan">
            <summary> buffer property = "LastWordReplacementSpan"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.LineUpToReplacementSpan">
            <summary> buffer property = "LineUpToReplacementSpan"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.SelectOnEmptyFilter">
            <summary> buffer property = "SelectOnEmptyFilter"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.WriteErrorStream">
            <summary> Note name that identifies an error = "writeErrorStream"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.ISEReportException">
            <summary> Error category for errors that do not contain an ErrorRecord = "ISE.ReportException"</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames">
            <summary>
            Subset of non localizable strings that are property names
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.CaretColumn">
            <summary> property name = "CaretColumn"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.CaretLine">
            <summary> property name = "CaretLine"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ExecuteScript">
            <summary> property name = "ExecuteScript" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.Prompt">
            <summary> property name = "Prompt" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.GraphicalPrompt">
            <summary> property name = "GraphicalPrompt" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.PromptBracket">
            <summary> property name = "PromptBracket" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.GraphicalPromptAutomationName">
            <summary> property name = "GraphicalPromptAutomationName" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.StatusText">
            <summary> property name = "StatusText"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ExecuteEnabled">
            <summary> property name = "ExecuteEnabled"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.IsSaved">
            <summary> property name = "IsSaved"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.IsRecovered">
            <summary> property name = "IsRecovered"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.DisplayName">
            <summary> property name = "DisplayName"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.Extension">
            <summary> property name = "Extension"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ExpandedScript">
            <summary> property name = "ExpandedScript"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ShowCommands">
            <summary> property name = "ShowCommands"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.IsUntitled">
            <summary> property name = "IsUntitled"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.FullPath">
            <summary> property name = "FullPath"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.FileName">
            <summary> property name = "FullPath"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.MainWindowTop">
            <summary> property name = "MainWindowTop"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.MainWindowLeft">
            <summary> property name = "MainWindowLeft"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.MainWindowWidthSetting">
            <summary> property name = "MainWindowWidthSetting"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.MainWindowHeightSetting">
            <summary> property name = "MainWindowHeightSetting"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.FontSize">
            <summary> property name = "FontSize"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.Zoom">
            <summary> property name = "Zoom"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ZoomLabel">
            <summary> property name = "ZoomLabel"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.FontName">
            <summary> property name = "FontName"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ErrorForegroundColor">
            <summary> property name = "ErrorForegroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ErrorBackgroundColor">
            <summary> property name = "ErrorBackgroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.WarningForegroundColor">
            <summary> property name = "WarningForegroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.WarningBackgroundColor">
            <summary> property name = "WarningBackgroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.DebugForegroundColor">
            <summary> property name = "DebugForegroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.DebugBackgroundColor">
            <summary> property name = "DebugBackgroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.VerboseForegroundColor">
            <summary> property name = "VerboseForegroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.VerboseBackgroundColor">
            <summary> property name = "VerboseBackgroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ConsolePaneBackgroundColor">
            <summary> property name = "ConsolePaneBackgroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ConsolePaneTextBackgroundColor">
            <summary> property name = "ConsolePaneTextBackgroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ConsolePaneForegroundColor">
            <summary> property name = "ConsolePaneForegroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ScriptPaneBackgroundColor">
            <summary> property name = "ScriptPaneBackgroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ScriptPaneForegroundColor">
            <summary> property name = "ScriptPaneForegroundColor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.SelectedPowerShellTab">
            <summary> property name = "SelectedPowerShellTab"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.SelectedFile">
            <summary> property name = "SelectedFile"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.SelectedAddOnTool">
            <summary> property name = "SelectedAddOnTool"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.PowerShellTabs">
            <summary> property name = "PowerShellTabs"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ShowWarningForDuplicateFiles">
            <summary> property name = "ShowWarningForDuplicateFiles"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ShowWarningBeforeSavingOnRun">
            <summary> property name = "ShowWarningBeforeSavingOnRun"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.SelectedScriptPaneState">
            <summary> property name = "SelectedScriptPaneState"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ShowDefaultSnippets">
            <summary> property name = "ShowDefaultSnippets"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ShowToolBar">
            <summary> property name = "ShowToolBar"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ShowOutlining">
            <summary> property name = "ShowOutlining"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ShowLineNumbers">
            <summary> property name = "ShowLineNumbers"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.UseLocalHelp">
            <summary> property name = "UseLocalHelp"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.IsVisible">
            <summary> property name = "IsVisible"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.HorizontalAddOnToolsPaneOpened">
            <summary> property name = "HorizontalAddOnToolsPaneOpened"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.VerticalAddOnToolsPaneOpened">
            <summary> property name = "VerticalAddOnToolsPaneOpened"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.CanInvoke">
            <summary> property name = "CanInvoke"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.AutoSaveMinuteInterval">
            <summary> property name = "AutoSaveMinuteInterval"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.MruCount">
            <summary> property name = "MruCount"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.TokenColors">
            <summary> property name = "TokenColors"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ConsoleTokenColors">
            <summary> property name = "ConsoleTokenColors"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.XmlTokenColors">
            <summary> property name = "XmlTokenColors"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ShowIntellisenseInConsolePane">
            <summary> property name = "ShowIntellisenseInConsolePane"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.ShowIntellisenseInScriptPane">
            <summary> property name = "ShowIntellisenseInScriptPane"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.UseEnterToSelectInConsolePaneIntellisense">
            <summary> property name = "UseEnterToSelectInConsolePaneIntellisense"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.UseEnterToSelectInScriptPaneIntellisense">
            <summary> property name = "UseEnterToSelectInScriptPaneIntellisense"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.PropertyNames.IntellisenseTimeoutInSeconds">
            <summary> property name = "IntellisenseTimeoutInSeconds"</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.MemberNames">
            <summary>
            Subset of non localizable strings that are member names
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.MemberNames.Add">
            <summary> member name = "Add"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.MemberNames.Move">
            <summary> member name = "Move"</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames">
            <summary>
            Subset of non localizable strings that are command names
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.OpenMruFile">
            <summary> command name = "OpenMruFile"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.GoToMatch">
            <summary> command name = "GoToMatch"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.Find">
            <summary> command name = "Find"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.Replace">
            <summary> command name = "Replace"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.NewScript">
            <summary> command name = "NewScript"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.OpenScript">
            <summary> command name = "OpenScript"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.SaveScript">
            <summary> command name = "SaveScript"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.SaveScriptAs">
            <summary> command name = "SaveScriptAs"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.CloseScript">
            <summary> command name = "CloseScript"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.Undo">
            <summary> command name = "Undo"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.Redo">
            <summary> command name = "Redo"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.Cut">
            <summary> command name = "Cut"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.Copy">
            <summary> command name = "Copy"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.Paste">
            <summary> command name = "Paste"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.Help">
            <summary> command name = "Help"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.SelectAll">
            <summary> command name = "SelectAll"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ShowScriptPaneRight">
            <summary> command name = "ShowScriptPaneRight"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ShowScriptPaneTop">
            <summary> command name = "ShowScriptPaneTop"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ShowScriptPaneMaximized">
            <summary> command name = "ShowScriptPaneMaximized"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.StartPowerShell">
            <summary> command name = "StartPowerShell"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.GoToLine">
            <summary> command name = "GoToLine"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ToggleScriptingPane">
            <summary> command name = "ToggleScriptingPane"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ToggleToolBar">
            <summary> command name = "ToggleToolBar"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.GoToConsolePane">
            <summary> command name = "GoToConsolePane"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.GoToEditor">
            <summary> command name = "GoToEditor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.Exit">
            <summary> command name = "Exit"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.FindNext">
            <summary> command name = "FindNext"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.NewRemotePowerShellTab">
            <summary> command name = "NewRemotePowerShellTab"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.OpenOptionsDialog">
            <summary> command name = "OpenOptionsDialog"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.FindPrevious">
            <summary> command name = "FindPrevious"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.RunScript">
            <summary> command name = "RunScript"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.RunSelection">
            <summary> command name = "RunSelection"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.Stop">
            <summary> command name = "Stop"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.NewRunspace">
            <summary> command name = "NewRunspace"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.CloseRunspace">
            <summary> command name = "CloseRunspace"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ShowRunspace">
            <summary> command name = "ShowRunspace"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ShowScript">
            <summary> command name = "ShowScript"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.CustomScript">
            <summary> command name = "CustomScript"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.StepInto">
            <summary> command name = "StepInto"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.StepOver">
            <summary> command name = "StepOver"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.StepOut">
            <summary> command name = "StepOut"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ResumeDebugger">
            <summary> command name = "ResumeDebugger"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.BreakAllDebugger">
            <summary> command name = "BreakAllDebugger"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.StopDebugger">
            <summary> command name = "StopDebugger"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ToggleBreakpoint">
            <summary> command name = "ToggleBreakpoint"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.EnableBreakpoint">
            <summary> command name = "ToggleBreakpoint"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.DisableBreakpoint">
            <summary> command name = "ToggleBreakpoint"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.RemoveAllBreakpoints">
            <summary> command name = "RemoveAllBreakpoints"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ClearOutput">
            <summary> command name = "ClearOutput"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.FindDialogReplaceAll">
            <summary> command name = "FindDialogReplaceAll"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.MoveScriptToTopOrRightCmd">
            <summary> command name = "MoveScriptToTopOrRightCmd"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.EnableAllBreakpoints">
            <summary> command name = "EnableAllBreakpoints"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.DisableAllBreakpoints">
            <summary> command name = "DisableAllBreakpoints"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.GetCallStack">
            <summary> command name = "GetCallStack"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ListBreakpoints">
            <summary> command name = "ListBreakpoints"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ZoomIn">
            <summary> command name = "ZoomIn"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ZoomOut">
            <summary> command name = "ZoomOut"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ToggleHorizontalAddOnPane">
            <summary> command name = "ToggleHorizontalAddOnPane"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ToggleVerticalAddOnPane">
            <summary> command name = "ToggleVerticalAddOnPane"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.HideHorizontalAddOnTool">
            <summary> command name = "HideHorizontalAddOnTool"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.HideVerticalAddOnTool">
            <summary> command name = "HideVerticalAddOnTool"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.MoveHorizontalAddOnToolToVertical">
            <summary> command name = "MoveHorizontalAddOnToolToVertical"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.MoveVerticalAddOnToolToHorizontal">
            <summary> command name = "MoveVerticalAddOnToolToHorizontal"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.GoToVerticalAddOnTool">
            <summary> command name = "GoToVerticalAddOnTool"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.GoToHorizontalAddOnTool">
            <summary> command name = "GoToHorizontalAddOnTool"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ShowAndSelectAddOnTool">
            <summary> command name = "ShowAndSelectAddOnTool"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.StartIntellisense">
            <summary> command name = "StartIntellisense"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ShowOutlining">
            <summary> command name = "ShowOutlining"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ToggleEmbeddedCommands">
            <summary> command name = "ToggleEmbeddedCommands"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ShowLineNumbers">
            <summary> command name = "ShowLineNumbers"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ToggleOutliningExpansion">
            <summary> command name = "ToggleOutliningExpansion"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.UpdateHelp">
            <summary> command name = "UpdateHelp"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ShowSnippet">
            <summary> command name = "ShowSnippet"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.AboutAddOnTools">
            <summary> command name = "AboutAddOnTools"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ShowPopupCommand">
            <summary> command name = "ShowPopupCommand"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ScriptBrowserAddOnCommand">
            <summary> command name = "ScriptBrowserAddOnCommand"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ModuleBrowserAddOnCommand">
            <summary> command name = "ModuleBrowserAddOnCommand"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.CommandNames.ScriptAnalyzerAddOnCommand">
            <summary> command name = "ScriptAnalyzerAddOnCommand"</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Shortcuts">
            <summary>
            Subset of non localizable strings that are keyboard shortcuts
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Shortcuts.CtrlT">
            <summary> shortcut = "Ctrl+T"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.Shortcuts.CtrlW">
            <summary> shortcut = "Ctrl+W"</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds">
            <summary>
            Subset of non localizable strings that are automation id's
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.CustomMenu">
            <summary> Automation Id = "CustomMenu"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.MainWindow">
            <summary> Automation Id = "GraphicalPowerShellMainWindow"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.Output">
            <summary> Automation Id = "Output"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.DirectInput">
            <summary> Automation Id = "DirectInput"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.Editor">
            <summary> Automation Id = "Editor"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.ContextMenu">
            <summary> Automation Id = "ContextMenu"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.ContextMenuCut">
            <summary> Automation Id = "ContextMenuCut"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.ContextMenuCopy">
            <summary> Automation Id = "ContextMenuCopy"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.ContextMenuPaste">
            <summary> Automation Id = "ContextMenuPaste"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.StartIntellisense">
            <summary> Automation Id = "StartIntellisense"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.ShowSnippet">
            <summary> Automation Id = "ShowSnippet"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.ContextMenuToggleBreakpoint">
            <summary> Automation Id = "ContextMenuToggleBreakpoint"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.ContextMenuDisableBreakpoint">
            <summary> Automation Id = "ContextMenuDisableBreakpoint"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.ContextMenuEnableBreakpoint">
            <summary> Automation Id = "ContextMenuEnableBreakpoint"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.NLStrings.AutomationIds.ContextMenuRunSelection">
            <summary> Automation Id = "ContextMenuRunSelection"</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.Program">
            <summary>
            Entry point class
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Program.FinalLoopTimeout">
            <summary>
            Timeout used in a cleanup loop
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Program.starting">
            <summary>
            True while the program is starting
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Program.validSystemFontNames">
            <summary>
            Valid system font names to validate font changes.
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Program.Starting">
            <summary>
            Gets a value indicating whether the program is starting
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.Program.ValidSystemFontNames">
            <summary>
            Gets and constructs a dictionary of installed fonts
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.Initialize">
            <summary>
            Initializes the non visual aspects of the application
            </summary>
            <returns>Returned -1 if initialization failed or 0 if it succeded</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.OpenFiles(System.Collections.Generic.List{System.String})">
            <summary>
            Called from NamedPipeServer when we receive a file name from another instance of powershell_ise.exe
            </summary>
            <param name="fileNames">list of files to open</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.ShowMainWindow(System.Collections.Generic.List{System.String},System.Boolean,System.Boolean,System.Threading.SendOrPostCallback)">
            <summary>
            Creates an application object and displays the main window
            </summary>
            <param name="filesToOpen">files to be opened on startup</param>
            <param name="mta">true to start ISE on the MTA mode</param>
            <param name="noProfile">true not to run the profile</param>
            <param name="loadedCallback">callback to be called when the window is loaded</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.IsValidFont(System.String)">
            <summary>
            Checks if the font in fontName is valid
            </summary>
            <param name="fontName">font name to check for</param>
            <returns>true if the font in fontName is valid</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.CanonicalizeFontName(System.String)">
            <summary>
            Looks up a font name and returns the same with standard capitalization.  For example, 'aRiAl' returns 'Arial'.
            </summary>
            <param name="fontName">The font name to re-case</param>
            <returns>The same font name in standard case</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.TestDefaultFontName">
            <summary>
            Verifies thtat the default font is valid and falls back to "Lucida Console" if it is not
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.TrySavingConfiguration(System.String)">
            <summary>
            Tries to save the configuration file
            </summary>
            <param name="configFilePath">path to be used in error message</param>
            <returns>true if it was possible to save the config file</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.GetAndLoadConfiguration">
            <summary>
            Tries to get and load the configuration.
            </summary>
            <returns>The <see cref="T:System.Configuration.Configuration"/> object.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.DeleteExistingAndLoadNewConfiguration(System.Configuration.ConfigurationErrorsException,System.String)">
            <summary>
            Deletes the existing configuration file for the current application and loads the new configuration.
            </summary>
            <param name="configLoadException">The <see cref="T:System.Configuration.ConfigurationErrorsException"/> that occurred during the first attempt of loading the user configuration file.</param>
            <param name="configFileName">The existing configuration file to delete.</param>
            <returns>The <see cref="T:System.Configuration.Configuration"/> object of the user configuration file. Null reference in case the user configuration cannot be loaded or the user does not want to delete the exiting user config file.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.LoadConfiguration">
            <summary>
            Attempts to load the configuration file for the current application.
            </summary>
            <returns>The <see cref="T:System.Configuration.Configuration"/> object of the user configuration file. Null reference in case the user configuration cannot be loaded.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">Error in case of the configuration file loading.</exception>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.PromptIfThereIsAutoSaveInformation(System.Boolean,System.Boolean)">
            <summary>
            Displays a message if there is auto save information
            </summary>
            <param name="hasInformationButOnlyForTitledSaved">true if the auto save information is only for titled and saved files</param>
            <param name="hasInformation">true if there is any auto save information</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.NoWindowMessage(System.String,System.String)">
            <summary>
            Provides an error message for problems before we have a parent main window
            </summary>
            <param name="caption">message caption</param>
            <param name="message">message string</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.ShowCancelableErrorMessage(System.String,System.String)">
            <summary>
            Displays an error message with buttons.
            </summary>
            <param name="caption">Header of the message.</param>
            <param name="message">Message to display.</param>
            <returns>Returns the user selection.</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.AdjustStringsContainingShortcuts">
            <summary>
            Fill in strings that mention shortcuts with the localized shortcut names. 
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.GetShortcutDisplayString(System.String)">
            <summary>
            Gets the display string for the given shortcut
            </summary>
            <param name="shortcut">shortcut to get the display string from</param>
            <returns>The display string for the given shortcut</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.GetApp">
            <summary>
            Creates and the application object and initializes resources
            </summary>
            <returns>the application object</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Program.InitialUntitled_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called for a one time focus set to the console or output on the first Runspace
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames">
            <summary>
            Localizable Text inside of Controls
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.ProgressIndicator">
            <summary> "Resource String: Progress Indicator" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.VerticalAddOnSplitter">
            <summary> "Resource String: Vertical AddOn Splitter" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.VerticalAddOn">
            <summary> "Resource String: Vertical AddOn" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.HorizontalAddOnSplitter">
            <summary> "Resource String: Horizontal AddOn Splitter" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.HorizontalAddOn">
            <summary> "Resource String: Horizontal AddOn" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.ToolBar">
            <summary> "Resource String: ToolBar" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.MainWindow">
            <summary> "Main Window" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.ReplaceWithText">
            <summary> "Replace Text" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.FindWhatText">
            <summary> "Find what text" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.Console">
            <summary> "Resource String: Output" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.Editor">
            <summary> "Resource String: Editor" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.MainMenu">
            <summary> "Main Menu" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.Runspace">
            <summary> "PowerShell Tab" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.Runspaces">
            <summary> "PowerShell Tabs" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.ScriptPane">
            <summary> "Script Pane" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.ScriptTools">
            <summary> "Script Tools" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.CollapseScriptPane">
            <summary> "Collapse Script Pane" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.ApplicationStatus">
            <summary> "Application Status" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.ZoomSelection">
            <summary> "Font Size Selection" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.ScriptSplitter">
            <summary> "Script Splitter" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.ScriptExpander">
            <summary> "Script Expander" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.DebugPrompt">
            <summary> "Debug Prompt" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.NestedPrompt">
            <summary> "Nested Prompt" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.Prompt">
            <summary> "Resource String: Prompt" </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.AutomationNames.StripUnderscores(System.String)">
            <summary>
            Strips underscores out of a UI string for use as an automation name.
            </summary>
            <param name="uiString">The UI string from which underscores will be stripped.</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames">
            <summary>
            Color Names used in options
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.AliceBlueColorName">
            <summary>
            Color Name = AliceBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.AntiqueWhiteColorName">
            <summary>
            Color Name = AntiqueWhite
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.AquaColorName">
            <summary>
            Color Name = Aqua
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.AquamarineColorName">
            <summary>
            Color Name = Aquamarine
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.AzureColorName">
            <summary>
            Color Name = Azure
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.BeigeColorName">
            <summary>
            Color Name = Beige
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.BisqueColorName">
            <summary>
            Color Name = Bisque
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.BlackColorName">
            <summary>
            Color Name = Black
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.BlanchedAlmondColorName">
            <summary>
            Color Name = BlanchedAlmond
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.BlueColorName">
            <summary>
            Color Name = Blue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.BlueVioletColorName">
            <summary>
            Color Name = BlueViolet
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.BrownColorName">
            <summary>
            Color Name = Brown
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.BurlyWoodColorName">
            <summary>
            Color Name = BurlyWood
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.CadetBlueColorName">
            <summary>
            Color Name = CadetBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.ChartreuseColorName">
            <summary>
            Color Name = Chartreuse
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.ChocolateColorName">
            <summary>
            Color Name = Chocolate
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.CoralColorName">
            <summary>
            Color Name = Coral
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.CornflowerBlueColorName">
            <summary>
            Color Name = CornflowerBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.CornsilkColorName">
            <summary>
            Color Name = Cornsilk
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.CrimsonColorName">
            <summary>
            Color Name = Crimson
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.CyanColorName">
            <summary>
            Color Name = Cyan
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkBlueColorName">
            <summary>
            Color Name = DarkBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkCyanColorName">
            <summary>
            Color Name = DarkCyan
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkGoldenrodColorName">
            <summary>
            Color Name = DarkGoldenrod
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkGrayColorName">
            <summary>
            Color Name = DarkGray
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkGreenColorName">
            <summary>
            Color Name = DarkGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkKhakiColorName">
            <summary>
            Color Name = DarkKhaki
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkMagentaColorName">
            <summary>
            Color Name = DarkMagenta
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkOliveGreenColorName">
            <summary>
            Color Name = DarkOliveGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkOrangeColorName">
            <summary>
            Color Name = DarkOrange
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkOrchidColorName">
            <summary>
            Color Name = DarkOrchid
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkRedColorName">
            <summary>
            Color Name = DarkRed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkSalmonColorName">
            <summary>
            Color Name = DarkSalmon
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkSeaGreenColorName">
            <summary>
            Color Name = DarkSeaGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkSlateBlueColorName">
            <summary>
            Color Name = DarkSlateBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkSlateGrayColorName">
            <summary>
            Color Name = DarkSlateGray
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkTurquoiseColorName">
            <summary>
            Color Name = DarkTurquoise
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DarkVioletColorName">
            <summary>
            Color Name = DarkViolet
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DeepPinkColorName">
            <summary>
            Color Name = DeepPink
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DeepSkyBlueColorName">
            <summary>
            Color Name = DeepSkyBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DimGrayColorName">
            <summary>
            Color Name = DimGray
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.DodgerBlueColorName">
            <summary>
            Color Name = DodgerBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.FirebrickColorName">
            <summary>
            Color Name = Firebrick
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.FloralWhiteColorName">
            <summary>
            Color Name = FloralWhite
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.ForestGreenColorName">
            <summary>
            Color Name = ForestGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.FuchsiaColorName">
            <summary>
            Color Name = Fuchsia
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.GainsboroColorName">
            <summary>
            Color Name = Gainsboro
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.GhostWhiteColorName">
            <summary>
            Color Name = GhostWhite
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.GoldColorName">
            <summary>
            Color Name = Gold
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.GoldenrodColorName">
            <summary>
            Color Name = Goldenrod
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.GrayColorName">
            <summary>
            Color Name = Gray
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.GreenColorName">
            <summary>
            Color Name = Green
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.GreenYellowColorName">
            <summary>
            Color Name = GreenYellow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.HoneydewColorName">
            <summary>
            Color Name = Honeydew
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.HotPinkColorName">
            <summary>
            Color Name = HotPink
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.IndianRedColorName">
            <summary>
            Color Name = IndianRed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.IndigoColorName">
            <summary>
            Color Name = Indigo
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.IvoryColorName">
            <summary>
            Color Name = Ivory
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.KhakiColorName">
            <summary>
            Color Name = Khaki
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LavenderColorName">
            <summary>
            Color Name = Lavender
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LavenderBlushColorName">
            <summary>
            Color Name = LavenderBlush
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LawnGreenColorName">
            <summary>
            Color Name = LawnGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LemonChiffonColorName">
            <summary>
            Color Name = LemonChiffon
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightBlueColorName">
            <summary>
            Color Name = LightBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightCoralColorName">
            <summary>
            Color Name = LightCoral
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightCyanColorName">
            <summary>
            Color Name = LightCyan
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightGoldenrodYellowColorName">
            <summary>
            Color Name = LightGoldenrodYellow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightGrayColorName">
            <summary>
            Color Name = LightGray
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightGreenColorName">
            <summary>
            Color Name = LightGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightPinkColorName">
            <summary>
            Color Name = LightPink
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightSalmonColorName">
            <summary>
            Color Name = LightSalmon
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightSeaGreenColorName">
            <summary>
            Color Name = LightSeaGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightSkyBlueColorName">
            <summary>
            Color Name = LightSkyBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightSlateGrayColorName">
            <summary>
            Color Name = LightSlateGray
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightSteelBlueColorName">
            <summary>
            Color Name = LightSteelBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LightYellowColorName">
            <summary>
            Color Name = LightYellow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LimeColorName">
            <summary>
            Color Name = Lime
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LimeGreenColorName">
            <summary>
            Color Name = LimeGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.LinenColorName">
            <summary>
            Color Name = Linen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MagentaColorName">
            <summary>
            Color Name = Magenta
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MaroonColorName">
            <summary>
            Color Name = Maroon
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MediumAquamarineColorName">
            <summary>
            Color Name = MediumAquamar
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MediumBlueColorName">
            <summary>
            Color Name = MediumBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MediumOrchidColorName">
            <summary>
            Color Name = MediumOrchid
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MediumPurpleColorName">
            <summary>
            Color Name = MediumPurple
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MediumSeaGreenColorName">
            <summary>
            Color Name = MediumSeaGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MediumSlateBlueColorName">
            <summary>
            Color Name = MediumSlateBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MediumSpringGreenColorName">
            <summary>
            Color Name = MediumSpringGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MediumTurquoiseColorName">
            <summary>
            Color Name = MediumTurquoise
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MediumVioletRedColorName">
            <summary>
            Color Name = MediumVioletRed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MidnightBlueColorName">
            <summary>
            Color Name = MidnightBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MintCreamColorName">
            <summary>
            Color Name = MintCream
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MistyRoseColorName">
            <summary>
            Color Name = MistyRose
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.MoccasinColorName">
            <summary>
            Color Name = Moccasin
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.NavajoWhiteColorName">
            <summary>
            Color Name = NavajoWhite
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.NavyColorName">
            <summary>
            Color Name = Navy
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.OldLaceColorName">
            <summary>
            Color Name = OldLace
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.OliveColorName">
            <summary>
            Color Name = Olive
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.OliveDrabColorName">
            <summary>
            Color Name = OliveDrab
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.OrangeColorName">
            <summary>
            Color Name = Orange
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.OrangeRedColorName">
            <summary>
            Color Name = OrangeRed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.OrchidColorName">
            <summary>
            Color Name = Orchid
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PaleGoldenrodColorName">
            <summary>
            Color Name = PaleGoldenrod
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PaleGreenColorName">
            <summary>
            Color Name = PaleGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PaleTurquoiseColorName">
            <summary>
            Color Name = PaleTurquoise
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PaleVioletRedColorName">
            <summary>
            Color Name = PaleVioletRed
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PapayaWhipColorName">
            <summary>
            Color Name = PapayaWhip
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PeachPuffColorName">
            <summary>
            Color Name = PeachPuff
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PeruColorName">
            <summary>
            Color Name = Peru
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PinkColorName">
            <summary>
            Color Name = Pink
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PlumColorName">
            <summary>
            Color Name = Plum
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PowderBlueColorName">
            <summary>
            Color Name = PowderBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.PurpleColorName">
            <summary>
            Color Name = Purple
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.RedColorName">
            <summary>
            Color Name = Red
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.RosyBrownColorName">
            <summary>
            Color Name = RosyBrown
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.RoyalBlueColorName">
            <summary>
            Color Name = RoyalBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SaddleBrownColorName">
            <summary>
            Color Name = SaddleBrown
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SalmonColorName">
            <summary>
            Color Name = Salmon
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SandyBrownColorName">
            <summary>
            Color Name = SandyBrown
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SeaGreenColorName">
            <summary>
            Color Name = SeaGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SeaShellColorName">
            <summary>
            Color Name = SeaShell
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SiennaColorName">
            <summary>
            Color Name = Sienna
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SilverColorName">
            <summary>
            Color Name = Silver
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SkyBlueColorName">
            <summary>
            Color Name = SkyBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SlateBlueColorName">
            <summary>
            Color Name = SlateBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SlateGrayColorName">
            <summary>
            Color Name = SlateGray
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SnowColorName">
            <summary>
            Color Name = Snow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SpringGreenColorName">
            <summary>
            Color Name = SpringGreen
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.SteelBlueColorName">
            <summary>
            Color Name = SteelBlue
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.TanColorName">
            <summary>
            Color Name = Tan
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.TealColorName">
            <summary>
            Color Name = Teal
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.ThistleColorName">
            <summary>
            Color Name = Thistle
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.TomatoColorName">
            <summary>
            Color Name = Tomato
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.TransparentColorName">
            <summary>
            Color Name = Transparent
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.TurquoiseColorName">
            <summary>
            Color Name = Turquoise
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.VioletColorName">
            <summary>
            Color Name = Violet
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.WheatColorName">
            <summary>
            Color Name = Wheat
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.WhiteColorName">
            <summary>
            Color Name = White
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.WhiteSmokeColorName">
            <summary>
            Color Name = WhiteSmoke
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.YellowColorName">
            <summary>
            Color Name = Yellow
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ColorNames.YellowGreenColorName">
            <summary>
            Color Name = YellowGreen
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts">
            <summary>
            Localizable AutomationNames
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Ln">
            <summary> "Resource String: Ln" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Col">
            <summary> "Resource String: Col" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.File">
            <summary> "Resource String: _File" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.NewScript">
            <summary> "_New Script" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.OpenScript">
            <summary> "_Open Script..." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.SaveScript">
            <summary> "_Save Script" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.SaveScriptAs">
            <summary> "Save Script _As..." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.RunScript">
            <summary> "_Run Script" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.RunSelection">
            <summary> "R_un Selection" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.CloseScript">
            <summary> "_Close Script" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.CloseRunspace">
            <summary> "C_lose Runspace" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Exit">
            <summary> "Resource String: E_xit" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Edit">
            <summary> "Resource String: _Edit" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Paste">
            <summary> "Resource String: _Paste" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Cut">
            <summary> "Resource String: Cu_t" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Copy">
            <summary> "Resource String: _Copy" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Undo">
            <summary> "Resource String: _Undo" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Redo">
            <summary> "Resource String: _Redo" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.SelectAll">
            <summary> "Select _All" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Find">
            <summary> "_Find in Script..." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.GoToMatch">
            <summary> "Go to _Match" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.FindNextMenu">
            <summary> "Find _Next in Script" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.FindPreviousMenu">
            <summary> "Find Pre_vious in Script" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Replace">
            <summary> "R_eplace in Script..." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.View">
            <summary> "Resource String: _View" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ZoomIn">
            <summary> "_Zoom In" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ZoomOut">
            <summary> "_Zoom Out" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.StartPowerShell">
            <summary> "Start PowerShell" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.NewRemotePowerShellTab">
            <summary> "New Remote PowerShell Tab" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Tools">
            <summary> "Resource String: _Tools" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.OpenOptionsDialog">
            <summary> "New Remote PowerShell Tab" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.GoToLine">
            <summary> "_Go To Line..." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.LineNumber">
            <summary> "Line Number:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.GoToLineCaption">
            <summary> "Go To Line" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ToggleScriptingPane">
            <summary> "Show Sc_ript Pane" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ToggleToolBar">
            <summary> "Show ToolBar" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ShowScriptPaneRight">
            <summary> "Show Script Pane Right" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ShowScriptPaneTop">
            <summary> "Show Script Pane Top" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ShowScriptPaneMaximized">
            <summary> "Show Script Pane Maximized" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.WindowTitleElevatedPrefix">
            <summary> "Resource String: Administrator:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.FindTitle">
            <summary> "Resource String: Find" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ReplaceButtonText">
            <summary> "Resource String: _Replace" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Help">
            <summary> "Resource String: _Help" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.GraphicalPowerShell">
            <summary> "Windows PowerShell ISE" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.FileAlreadyOpened">
            <summary> "The file you are about to open is already opened in another PowerShell Tab. The same editor will be shared in both runspaces." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.FileIsReadOnly">
            <summary> "You cannot edit any script files in Windows PowerShell ISE while the debugger is running. To edit a script, stop the debugger." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.SaveOnRun">
            <summary> "The script you are about to run will be saved." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.WindowsPowerShellHelp">
            <summary> "Windows PowerShell Help" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ReplaceAll">
            <summary> "Replace _All" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.RegularExpressions">
            <summary> "Regular e_xpressions" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.SearchUp">
            <summary> "Search _up" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ReplaceWith">
            <summary> "Re_place with:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.FindNext">
            <summary> "_Find Next" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.FindWhat">
            <summary> "Fi_nd what:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.MatchCase">
            <summary> "Match _case" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.WholeWord">
            <summary> "_Whole word" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Cancel">
            <summary> "Resource String: Cancel" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.InTheFutureDoNotShow">
            <summary>In the future, do not show this message</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ReplaceCaption">
            <summary> Resource String: "Replace" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.FindInSelection">
            <summary> "Find in _selection" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.DebugMenu">
            <summary> "Resource String: Debug" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.AddOnTools">
            <summary> "Resource String: _AddOns" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Script">
            <summary> "Resource String: Script" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Completed">
            <summary> "Resource String: Completed" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Stopping">
            <summary> "Resource String: Stopping" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Running">
            <summary> "Resource String: Running" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.NotStarted">
            <summary> "Not Started" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Failed">
            <summary> "Resource String: Failed" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Stopped">
            <summary> "Resource String: Stopped" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.NewRemotePowerShellTabCaption">
            <summary> "New Remote PowerShell Tab" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.UserName">
            <summary> "_User name:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Computer">
            <summary> "Resource String: _Computer:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.UserNameAutomationName">
            <summary> "_User name:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ComputerAutomationName">
            <summary> "Resource String: _Computer:" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.CredentialMessage">
            <summary> "You will be asked for credentials when you connect." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.Connect">
            <summary> "Resource String: Co_nnect" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ShowCommandRun">
            <summary> "Show-Command button text: Run" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ShowCommandCopy">
            <summary> "Show-Command button text: Copy" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ShowCommandInsert">
            <summary> "Show-Command button text: Insert" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ShowCommandShowOnStartup">
            <summary> "Show-Command text: Show On Startup" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ScriptBrowserAddOn">
            <summary> "Script Browser Add-On" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ModuleBrowserAddOn">
            <summary> "Module Browser Add-On" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ControlTexts.ScriptAnalyzerAddOn">
            <summary> "Script Analyzer Add-On" </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings">
            <summary>
            Localizable ToolTips
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.CloseTool">
            <summary> "Close Tool" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.MoveScriptPaneRight">
            <summary> "Move Script Pane Right." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.MoveScriptPaneUp">
            <summary> "Move Script Pane Up." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.CutTooltip">
            <summary> "Resource String: Cut" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.CopyTooltip">
            <summary> "Resource String: Copy" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.PasteTooltip">
            <summary> "Resource String: Paste" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.RunCommandTooltip">
            <summary>"Run Command"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.StopExecutionTooltip">
            <summary>"Stop Execution (Ctrl+Brk)"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.PromptTooltip">
            <summary>"Resource String: Prompt"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.RunScriptTooltip">
            <summary>"Run Script (F5)"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.RunSelectionTooltip">
            <summary>"Run Selection (F8)"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.ClearConsoleTooltip">
            <summary>"Clear Console"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.OpenScriptTooltip">
            <summary>"Open Script"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.CloseScriptToolTip">
            <summary> "Close Script" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.SaveScriptTooltip">
            <summary>"Save Script"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.UndoTooltip">
            <summary>"Resource String: Undo"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.RedoTooltip">
            <summary>"Resource String: Redo"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.NewScriptTooltip">
            <summary>"New Script"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.HideScriptPaneTooltip">
            <summary>"Hide Script Pane"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.HideAddOnToolsPane">
            <summary>"Hide AddOn Tools Pane"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.Zoom">
            <summary>"Font Size"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.StartPowerShellInASeparateWindow">
            <summary>"Start PowerShell.exe in a separate window"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.NewRemotePowerShellTabTooltip">
            <summary>"New Remote PowerShell Tab"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.ShowScriptPaneTopTooltip">
            <summary>"Show Script Pane Top"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.ShowScriptPaneRightTooltip">
            <summary>"Show Script Pane Right"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.ShowScriptPaneMaximizedTooltip">
            <summary>"Show Script Pane Maximized"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.ShowCommandWindowTooltip">
            <summary>"Show Command Window"</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.ToolTipStrings.ShowCommandAddOnTooltip">
            <summary>"Show Command Add-on"</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.Strings">
            <summary>
            Contains all the strings that should be localized.
            The comments in each field are supposed to be the string itself and should be kept in sync with
            the resources files.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.VariableToolTip">
            <summary> 
            "Resource string: {0} = {1}" 
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.StringContinuation">
            <summary> 
            "Resource string: {0}..." 
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.CannotLaunchFormat">
            <summary> 
            Cannot start {0}. Interactive console applications are not supported. To run the application, use the Start-Process cmdlet or use "Start PowerShell.exe" from the File menu.
            To view/modify the list of blocked console applications, use {1}, or consult online help." 
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ScriptMenuFormat">
            <summary> "Resource string:     {0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.UnableToStartProcess">
            <summary> "Unable to start {0}." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ReplaceAllUndoAction">
            <summary> "Replace All" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Untitled">
            <summary> "Resource string: Untitled" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.NewRunspace">
            <summary> "_New PowerShell Tab" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.FileNumberFormat">
            <summary> "Resource string: {0}{1}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.GoToScriptPane">
            <summary> "Go to _Script Pane" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Stop">
            <summary> "Resource string: Stop" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Unsaved">
            <summary> "The files below have not been saved. Do you really want to {0}?\n\n{1}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.WarningCaption">
            <summary> "Windows PowerShell ISE - Warning" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorCaption">
            <summary> "Windows PowerShell ISE - Error" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessageUserSettingsCorrupted">
            <summary> "Application cannot run because of an error in a user settings file. Click OK to restore default settings and continue, or click Cancel to exit.{0}{1}." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.PowerShellScripts">
            <summary> "PowerShell Scripts" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.PowerShellFiles">
            <summary> "PowerShell Files" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.TextFiles">
            <summary> "Text Files" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.XMLFiles">
            <summary> "XML Files" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.PowerShellModules">
            <summary> "PowerShell Script Modules" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.PowerShellConfigurationFiles">
            <summary> "PowerShell XML files" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.PowerShellDataFiles">
            <summary> "PowerShell Data files" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.AllFiles">
            <summary> "All Files" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.CloseRunspace">
            <summary> "_Close PowerShell Tab" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ShowRunspace">
            <summary> "Show Runspace" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ShowScript">
            <summary> "Show Script" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.RunspaceName">
            <summary> "PowerShell {0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.SaveScriptQuestion">
            <summary> "Save {0}?" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.DirtyFlag">
            <summary> "Resource string: *" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ReadOnlyFlag">
            <summary> "[Read Only]" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.FileDisplayNameFormat">
            <summary> "Resource string: {0}{1} {2}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ParseErrorsDetected">
            <summary> "Parse errors detected" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.AlreadyRunning">
            <summary> "Already running a command. Please wait" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.CannotFindText">
            <summary> "Cannot Find "{0}"." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.UpgradeEncoding">
            <summary> "{0}\nSome of the character(s) in the script are not supported in the orignal file encoding. Saving the file in the original encoding may cause data loss. Do you want to save the file in the Unicode encoding?" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.StepIntoMenuItem">
            <summary> "_Step Into" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.StepOverMenuItem">
            <summary> "Step O_ver" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.StepOutMenuItem">
            <summary> "Step O_ut" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.StopDebuggerMenuItem">
            <summary> "S_top Debugging" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ResumeDebuggerMenuItem">
            <summary> Resource string: "_Continue" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.BreakkAllDebuggerMenuItem">
            <summary> Resource string: "Break _All" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ToggleBreakpointMenuItem">
            <summary> "_Toggle Breakpoint" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.EnableBreakpointMenuItem">
            <summary> "Enable Breakpoint" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.DisableBreakpointMenuItem">
            <summary> "Disable Breakpoint" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.RemoveAllBreakpointsMenuItem">
            <summary> "Remove All Breakpoints" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.EnableAllBreakpointsMenuItem">
            <summary> "Enable All Breakpoints" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.DisableAllBreakpointsMenuItem">
            <summary> "Disable All Breakpoints" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.GetCallStackMenuItem">
            <summary> "Display Call Stack" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ListBreakpointsMenuItem">
            <summary> "List Breakpoints" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.HitBreakpointFormat">
            <summary> "Hit breakpoint {0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.LoadSourceFileErrorFormat">
            <summary> "Error loading source file '{0}' ({1})" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.DebuggerSourceLineFormat">
            <summary> "Stopped at: {0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ExecuteProfileErrorFormat">
            <summary> "Error executing profile: {0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Tools">
            <summary> "Resource string: _Add-ons" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.CopyInsteadOfStop">
            <summary> "Warning: Control+C will copy the selected text to the clipboard. If you wish to stop the running command, either unselect the text or use Control+Break." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.DefaultFont">
            <summary> "'Lucida Console' for English, and 'MS Gothic' for Japanese" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.SnippetToolTipDescription">
            <summary> "Description: {0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.SnippetToolTipPath">
            <summary> "Path: {0}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.SnippetToolTipDefault">
            <summary> "Default (used in Snippet tooltip for default snippets)" </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Format(System.String,System.Object[])">
            <summary>
            Calls String.Format with CultureInfo.CurrentUICulture
            </summary>
            <param name="format"><paramref name="format"/> is repassed to String.Format</param>
            <param name="args"><paramref name="args"/> is repassed to String.Format</param>
            <returns>the return of String.Format</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages">
            <summary>
            Localizable error messages
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotAddOrChangeItems">
            <summary>
            Cannot add or change items in the collection.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.DefaultOptionsCannotBeSet">
            <summary>
            Default options cannot be set.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.ArgumentShouldBeFullPath">
            <summary>
            The argument: '{0}' must be a full path.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.InvalidFontName">
            <summary>
            The font name: '{0}' is not valid.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotAddSubenusForMenusWithAnExecuteScript">
            <summary>
            Cannot add submenus if the {0} property is not null.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.ArgumentArrayShouldHaveAtLeastOneElement">
            <summary>
            "{0}" should have at least one element.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.ArgumentNotNullException">
            <summary>
            Value must be null.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotInsertValue">
            <summary>
            Cannot add this object the collection. You can call the {0} method with no parameters and the {1} method.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotSetCollectionValue">
            <summary>
            Cannot set object in the collection.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.ArgumentShouldBeGreaterThanOrEqualToAnotherArgument">
            <summary>"{0} should be greater than or equal to {1}."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.SelectionCanOnlyBeSetToAMemberOfCollection">
            <summary>"Selection can only be set to a member of the collection."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.ShortcutAlreadyInUse">
            <summary>"The menu '{0}' uses shortcut '{1}', which is already in use by the menu or editor functionality."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.ShortcutWithNoModifier">
            <summary>"The shortcut '{0}' does not have the required keyboard modifier for non function keys."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.MenuAlreadyAdded">
            <summary>"The menu '{0}' has already been added to a parent menu."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.SubMenuIsParent">
            <summary>"The menu '{0}' is a parent menu of '{1}'."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotExecuteScript">
            <summary> "Cannot execute script."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotExecuteUnsavedScript">
            <summary> "Cannot execute unsaved script."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotSaveFileThatNeedsUnicodeUpgrade">
            <summary> "The file cannot be saved in the current encoding."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotSaveUntitled">
            <summary> "{0} cannot be used for Untitled files, please use {1}."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotCloseUnsavedFileFormat">
            <summary> "Cannot close unsaved file: '{0}'."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotAddRunspace">
            <summary> "Cannot add a runspace past the maximum number."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CollectionShouldContainAtLeastOneRunspace">
            <summary> "This collection should contain at least one Runspace."</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.UnableToSave">
            <summary> "Unable to save {0}: {1}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.UnableToLoad">
            <summary> "Unable to load {0}: {1}" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.CannotSaveAlreadyOpened">
            <summary> "Cannot save the file with the name of an already opened file." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.TooManyNestedPromptsError">
            <summary> "Cannot enter nested prompt because too many nested prompts are already running." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.LoadingSettingsFailedFormat">
            <summary> "The application cannot start because it could not access the user settings file: '{0}'." </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.ErrorMessages.SavingSettingsFailedFormat">
            <summary> "The application cannot save the user settings file: '{0}'." </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.Strings.HostErrorMessages">
            <summary>
            Localizable host error messages
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.HostErrorMessages.PromptTypeLoadErrorTemplate">
            <summary> Cannot display the prompt for "{0}" because type "{1}" cannot be loaded." </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts">
            <summary>
            Localizable shortcuts
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorMoveCurrentLineToTopShortcut">
            <summary> "Resource string: Ctrl+Alt+Home" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorMoveCurrentLineToBottomShortcut">
            <summary> "Resource string: Ctrl+Alt+End" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.NewRemotePowerShellTabShortcut">
            <summary> "Resource string: Ctrl+Shift+M" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorDeleteCharacterToLeftShortcut">
            <summary> "Resource string: Shift+Backspace" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectToNextCharacterShortcut">
            <summary> "Resource string: Shift+Right" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectToPreviousCharacterShortcut">
            <summary> "Resource string: Shift+Left" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectLineUpShortcut">
            <summary> "Resource string: Shift+Up" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectLineDownShortcut">
            <summary> "Resource string: Shift+Down" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectToStartOfLineShortcut">
            <summary> "Resource string: Shift+Home" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectToEndOfLineShortcut">
            <summary> "Resource string: Shift+End" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectPageUpShortcut">
            <summary> "Resource string: Shift+PageUp" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectPageDownShortcut">
            <summary> "Resource string: Shift+Next" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorInsertNewLineShortcut">
            <summary> "Resource string: Shift+Return" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectToNextWordShortcut">
            <summary> "Resource string: Ctrl+Shift+Right" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectToPreviousWordShortcut">
            <summary> "Resource string: Ctrl+Shift+Left" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectToStartOfDocumentShortcut">
            <summary> "Resource string: Ctrl+Shift+Home" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectToEndOfDocumentShortcut">
            <summary> "Resource string: Ctrl+Shift+End" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorMakeUppercaseShortcut">
            <summary> "Resource string: Ctrl+Shift+U" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorTransposeLineShortcut">
            <summary> "Resource string: Alt+Shift+T" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectEnclosingShortcut">
            <summary> "Resource string: Alt+Left" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectFirstChildShortcut">
            <summary> "Resource string: Alt+Right" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectNextSiblingShortcut">
            <summary> "Resource string: Alt+Down" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectPreviousSiblingShortcut">
            <summary> "Resource string: Alt+Up" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorDeleteWordToLeftShortcut">
            <summary> "Resource string: Ctrl+Backspace" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorDeleteWordToRightShortcut">
            <summary> "Resource string: Ctrl+Delete" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorSelectAllShortcut">
            <summary> "Resource string: Ctrl+A" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorMoveToNextWordShortcut">
            <summary> "Resource string: Ctrl+Right" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorMoveToPreviousWordShortcut">
            <summary> "Resource string: Ctrl+Left" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorMoveToStartOfDocumentShortcut">
            <summary> "Resource string: Ctrl+Home" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorMoveToEndOfDocumentShortcut">
            <summary> "Resource string: Ctrl+End" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorScrollUpAndMoveCaretIfNecessaryShortcut">
            <summary> "Resource string: Ctrl+Up" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorScrollDownAndMoveCaretIfNecessaryShortcut">
            <summary> "Resource string: Ctrl+Down" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorMakeLowercaseShortcut">
            <summary> "Resource string: Ctrl+U" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorUndoShortcut1">
            <summary> "Resource string: Ctrl+Z" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorUndoShortcut2">
            <summary> "Resource string: Alt+Back" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorRedoShortcut1">
            <summary> "Resource string: Ctrl+Y" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.EditorRedoShortcut2">
            <summary> "Resource string: Alt+Shift+Back" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.HelpShortcut">
            <summary> "Resource string: F1" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ZoomIn1Shortcut">
            <summary> "Resource string: Control+Add" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.FindShortcut">
            <summary> "Resource string: Control+F" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.GoToMatchShortcut">
            <summary> "Resource string: Control+[" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ReplaceShortcut">
            <summary> "Resource string: Ctrl+H" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.NewScriptShortcut">
            <summary> "Resource string: Ctrl+N" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.OpenScriptShortcut">
            <summary> "Resource string: Ctrl+O" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.SaveScriptShortcut">
            <summary> "Resource string: Ctrl+S" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.CloseScriptShortcut">
            <summary> "Resource string: Ctrl+F4" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ZoomIn2Shortcut">
            <summary> "Resource string: Control+Shift+Add" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ZoomIn3Shortcut">
            <summary> "Resource string: Control+Plus" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ZoomIn4Shortcut">
            <summary> "Resource string: Control+Shift+Plus" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ZoomOut1Shortcut">
            <summary> "Resource string: Control+Subtract" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ZoomOut2Shortcut">
            <summary> "Resource string: Control+Shift+Subtract" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ZoomOut3Shortcut">
            <summary> "Resource string: Control+Minus" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ZoomOut4Shortcut">
            <summary> "Resource string: Control+Shift+Minus" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.GoToLineShortcut">
            <summary> "Resource string: Control+G" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.StartPowerShellShortcut">
            <summary> "Resource string: Control+Shift+P" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ToggleScriptPaneShortcut">
            <summary> "Resource string: Control+R" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ShowScriptPaneTopShortcut">
            <summary> "Resource string: Control+1" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ShowScriptPaneRightShortcut">
            <summary> "Resource string: Control+2" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ShowScriptPaneMaximizedShortcut">
            <summary> "Resource string: Control+3" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.GoToInputShortcut">
            <summary> "Resource string: Control+I" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ExitShortcut">
            <summary> "Resource string: Alt+F4" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.GoToEditorShortcut">
            <summary> "Resource string: Control+Q" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.FindNextShortcut">
            <summary> "Resource string: F3" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.FindPreviousShortcut">
            <summary> "Resource string: Shift+F3" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.Paste1Shortcut">
            <summary> "Resource string: Control+V" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.Paste2Shortcut">
            <summary> "Resource string: Shift+Ins" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.Cut1Shortcut">
            <summary> "Resource string: Control+X" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.Cut2Shortcut">
            <summary> "Resource string: Shift+Del" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.StopAndCopyShortcut">
            <summary> "Resource string: Control+C" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.Copy2Shortcut">
            <summary> "Resource string: Control+Ins" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.RunScriptShortcut">
            <summary> "Resource string: F5" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.BreakAllDebuggerShortcut">
            <summary> "Resource string: Ctrl+B" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.RunSelectionShortcut">
            <summary> "Resource string: F8" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.StopExecutionShortcut">
            <summary> "Resource string: Control+Break" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.NewRunspaceShortcut">
            <summary> "Resource string: Control+T" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.CloseRunspaceShortcut">
            <summary> "Resource string: Control+W" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.StepIntoShortcut">
            <summary> "Resource string: F11" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.StepOverShortcut">
            <summary> "Resource string: F10" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.StepOutShortcut">
            <summary> "Resource string: Shift+F11" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.StopDebuggerShortcut">
            <summary> "Resource string: Shift+F5" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ToggleBreakpointShortcut">
            <summary> "Resource string: F9" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.RemoveAllBreakpointsShortcut">
            <summary> "Resource string: Control+Shift+F9" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.GetCallStackShortcut">
            <summary> "Resource string: Control+Shift+D" </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.Strings.Shortcuts.ListBreakpointsShortcut">
            <summary> "Resource string: Control+Shift+L" </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.TokenizerCaller">
            <summary>
            Helper class to call PSParser.Tokenize
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.TokenizerCaller.Tokenize(System.String,System.String,System.Management.Automation.Language.Token[]@,System.Management.Automation.Language.ParseError[]@)">
            <summary>
            Calls PsParser.Tokenize with script and errors
            </summary>
            <param name="script">The parameter <paramref name="script"/> is repassed to Parser.ParseInput</param>
            <param name="filePath">The parameter <paramref name="filePath"/>is repassed to Parser.ParseInput</param>
            <param name="tokens">The parameter <paramref name="tokens"/> is repassed to Parser.ParseInput</param>
            <param name="errors">The parameter <paramref name="errors"/> is repassed to Parser.ParseInput</param>
            <returns> The return value of PsParser.Tokenize </returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier">
            <summary>
            Class used to classify xml editor buffers
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.ps1xmlTypeDefinition">
            <summary>
            Declares a new content type called powershell, derived from text and used for the classification
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.xmlMarkupExtensionTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.xmlQuoteTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.xmlTextTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.xmlAttributeTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.xmlElementNameTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.xmlTagTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.xmlQuotedStringTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.xmlCommentDelimiterDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.xmlCommentTypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.xmlCDATATypeDefinition">
            <summary> classification type definition </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the PSXmlClassifier class.
            </summary>
            <param name="bufferToClassify">buffer to classify</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.SetTokenColors(System.Collections.Generic.IDictionary{Microsoft.PowerShell.Host.ISE.PSXmlTokenType,System.Windows.Media.Color},System.Collections.Generic.IDictionary{Microsoft.PowerShell.Host.ISE.PSXmlTokenType,System.Windows.Media.Color})">
            <summary>
            Called to set the colors for the tokens according to the tokencolors passed.
            </summary>
            <param name="tokenColors">Collection of token colors.</param>
            <param name="defaultTokenColors">Collection of all default colors used to clear the brushes not specified in <paramref name="tokenColors"/></param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifier.VirtualGetClassificationSpans(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Given a SnapshotSpan, this method returns a list of ClassificationSpans that we want
            to classify in the given SnapshotSpan 
            </summary>
            <param name="span">span to classify</param>
            <returns> list of ClassificationSpans that we want to classify in the given SnapshotSpan</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifierProvider">
            <summary>
            Provides the IClassifier for PowerShell syntax highlighting
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlClassifierProvider.GetClassifier(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Provides the IClassifier for PowerShell syntax highlighting
            </summary>
            <param name="textBuffer">text buffer we're classifying</param>
            <returns>the IClassifier for PowerShell syntax highlighting</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlErrorTagger">
            <summary>
            Provides the error tags for the "xml" content
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlErrorTagger.#ctor(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the PSXmlErrorTagger class
            </summary>
            <param name="view">the editor view</param>
            <param name="sourceBuffer">the editor buffer</param>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlErrorTagger.TagsChanged">
            <summary>
            Event that will force retagging a span
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlErrorTagger.View">
            <summary>
            Gets or sets the editor view
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlErrorTagger.Buffer">
            <summary>
            Gets or sets the editor buffer
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlErrorTagger.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns the error tags for the giving span
            </summary>
            <param name="spans">span to retrieve tags for</param>
            <returns>the error tags for the giving span</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlErrorTagger.OnTagsChanged(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Triggers the event that will force retagging a span
            </summary>
            <param name="span">span to tag</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlErrorTagger.Buffer_ContentTypeChanged(System.Object,Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs)">
            <summary>
            Removes the instance of this object added in the constructor in case the content changes
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlErrorTaggerProvider">
            <summary>
            Provides the PSXmlErrorTagger for the "ps1xml" content
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlErrorTaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates the PSXmlErrorTagger for the "powershell" content
            </summary>
            <typeparam name="T">type of tagger</typeparam>
            <param name="textView">editor TextView</param>
            <param name="buffer">editor Buffer</param>
            <returns>the PSXmlErrorTagger for the "powershell" content</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlOutliningTagger">
            <summary>
            Provides the outline tags for the "ps1xml" content
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlOutliningTagger.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the PSXmlOutliningTagger class
            </summary>
            <param name="sourceBuffer">the editor buffer</param>
        </member>
        <member name="E:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlOutliningTagger.TagsChanged">
            <summary>
            Event that will force retagging a span
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlOutliningTagger.Buffer">
            <summary>
            Gets or sets the editor buffer
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlOutliningTagger.GetTags(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Returns the outline tags for the giving span
            </summary>
            <param name="spans">span to retrieve tags for</param>
            <returns>the outline tags for the giving span</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlOutliningTagger.OnTagsChanged(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Triggers the event that will force retagging a span
            </summary>
            <param name="span">span to tag</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlOutliningTagger.Buffer_ContentTypeChanged(System.Object,Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs)">
            <summary>
            Removes the instance of this object added in the constructor in case the content changes
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlOutliningTaggerProvider">
            <summary>
            Provides the  PSXmlOutliningTagger for the "PS1XML" content
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.PSXmlOutliningTaggerProvider.CreateTagger``1(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates the PSXmlOutliningTagger for the "PS1XML" content
            </summary>
            <typeparam name="T">type of tagger</typeparam>
            <param name="buffer">editor Buffer</param>
            <returns>the PSXmlOutliningTagger for the "PS1XML" content</returns>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenInformation">
            <summary>
            Color information about an XML token
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenInformation.xmlTokenType">
            <summary>
            xml token type
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenInformation.start">
            <summary>
            token start
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenInformation.length">
            <summary>
            token length
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenInformation.#ctor(System.Int32,System.Int32,Microsoft.PowerShell.Host.ISE.PSXmlTokenType)">
            <summary>
            Initializes a new instance of the XmlTokenInformation class.
            </summary>
            <param name="start">token start</param>
            <param name="length">token length</param>
            <param name="xmlTokenType">token type</param>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenInformation.XmlTokenType">
            <summary>
            Gets the xml token type
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenInformation.Start">
            <summary>
            Gets the token start
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenInformation.Length">
            <summary>
            Gets or sets the token length
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizationService">
            <summary>
            Tokenizes ITextBuffer for xml files in a separate thread.
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizationService.EmptyErrors">
            <summary>
            Used as an initial value for errors
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizationService.EmptyOutlines">
            <summary>
            Used as an initial value for outlines
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizationService.emptySpanInformation">
            <summary>
            Used as an initial value for tokens
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizationService.tokenizer">
            <summary>
            Tokenizer used in Tokenize()
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizationService.#ctor(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Initializes a new instance of the XmlTokenizationService class.
            </summary>
            <param name="buffer">editor text buffer</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizationService.SetEmptyTokenizationProperties">
            <summary>
            Called to set initial empty tokenization results
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizationService.SetTokenizationProperties">
            <summary>
            Called when the buffer tokenization is accurate for the last buffer version
            To set the results of tokenization as buffer properties
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizationService.RemoveCachedTokenizationProperties">
            <summary>
            Removes properties used as a tag cache
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizationService.Tokenize(Microsoft.VisualStudio.Text.ITrackingSpan,System.String)">
            <summary>
            Called from a separate thread to do the tokenization
            </summary>
            <param name="spanToTokenize">span to tokenize</param>
            <param name="spanText">span to tokenize text</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer">
            <summary>
            Tokenizes xml string content
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.OpenCDATA">
            <summary>
            characters opening a CDATA section
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.CloseCDATA">
            <summary>
            characters closing a CDATA section
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.tokens">
            <summary>
            Resulting tokens
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.contextState">
            <summary>
            Main tokenization state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.contextData">
            <summary>
            Detailed tokenization state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.cursor">
            <summary>
            Position within the xml string
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.xml">
            <summary>
            string being tokenized
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.currentColorPosition">
            <summary>
            Index of the last color added in AddClassification 
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.errors">
            <summary>
            List of errors in the xml
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.outlines">
            <summary>
            List of outlined regions in the xml
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.lastClassificatioAddedWasTag">
            <summary>
            Set to true in the initial parsing when the last classification was a tag
            to avoid merging angle brackets closing an element with angle brackets
            opening the next element
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.#ctor">
            <summary>
            Initializes a new instance of the XmlTokenizer class
            </summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerState">
            <summary>
            Main tokenization state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerState.None">
            <summary>Initial state</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerState.InTag">
            <summary>After the start angle brackets</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerState.InSingleQuotes">
            <summary>After a single quote</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerState.InComment">
            <summary>After a comment</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerState.InTagNameFound">
            <summary>After an element name</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerState.InMarkupExtension">
            <summary>After a xaml extension attribute value</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerState.InDoubleQuotes">
            <summary>After a double quote</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerData">
            <summary>
            Detailed tokenization state
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerData.Default">
            <summary>Initial state</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerData.JustFoundOpenTag">
            <summary>After the start angle brackets</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerData.CommentBang">
            <summary>After the ! start comment character</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerData.CommentDash1">
            <summary>After the !- start comment characters</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerData.CommentEndDash1">
            <summary>After the first - in the end comment characters --close angle bracket</summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.XamlTokenizerData.CommentEndDash2">
            <summary>After the seconf - in the end comment characters --close angle bracket</summary>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ElementReadingState">
            <summary>
            Possible states when reading the Xml tags in ReadElements
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ElementReadingState.OutOfElement">
            <summary>
            Out of any XML tag
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ElementReadingState.InOpenlEment">
            <summary>
            After an open angle bracket of the xml tag
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ElementReadingState.InCloseElement">
            <summary>
            After an open angle bracket and slash of the xml tag
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.Tokens">
            <summary>
            Gets the tokens parsed
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.Errors">
            <summary>
            Gets the parsing errors
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.Outlines">
            <summary>
            Gets the parsing outlines
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.AddXmlInformation(System.String)">
            <summary>
            Parses the XMl adding information about tokens, regions and errors
            </summary>
            <param name="spanText">the xml text</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.IsWhitespace(System.Char)">
            <summary>
            Returns true if <paramref name="c"/> is a white space
            </summary>
            <param name="c">character we want to check if it is a white space</param>
            <returns>true if <paramref name="c"/> is a white space</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ProcessElementName(Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation,System.String)">
            <summary>
            Called to set the <paramref name="elementInfo"/> ElementName when it is found
            </summary>
            <param name="elementInfo">element to set the ElementName from</param>
            <param name="elementText">text for the element name</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.IsCommentOrXmlHeader(System.Int32)">
            <summary>
            Returns true if the character at pos+1 is ? or !
            </summary>
            <param name="pos">character position</param>
            <returns>true true if the character at pos+1 is ? or !</returns>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ReadElements">
            <summary>
            Reads the tokens creating errors and regions
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ReadCDATAElement(Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenInformation,System.String)">
            <summary>
            Reads a CDATA Element
            </summary>
            <param name="token">CDATA token</param>
            <param name="tokenText">CDATA token text</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.AddErrorForNoElementName(Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation)">
            <summary>
            Adds an error when an element name has not been found
            </summary>
            <param name="elementInfo">element missing the ElementName</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.AddOutliningTag(Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation)">
            <summary>
            Adds an outlining to this.outlines
            </summary>
            <param name="inOpenElementInfo">information about the opening tag</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.AddOutlining(System.Int32,System.Int32)">
            <summary>
            Adds an outlining to this.outlines
            </summary>
            <param name="start">position of outlining start</param>
            <param name="end">position of outlining end</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.AddError(Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenInformation,System.String)">
            <summary>
            Adds an error to this.errors
            </summary>
            <param name="token">token with error</param>
            <param name="message">error message</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ParseXml">
            <summary>
            Parses the xml string
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ParseTag">
            <summary>
            Parses after the start angle bracket has been found
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ChangeStateToCloseTagFound">
            <summary>
            Called when close angle bracket has been found as a tag preceeded or not by a forward slash
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ParseComment">
            <summary>
            Parses xml comments
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.ParseQuotedString">
            <summary>
            Parses xml attribute values
            </summary>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.AddQuoteClassification(System.Int32)">
            <summary>
            Uses either PSXmlTokenType.MarkupExtension or PSXmlTokenType.QuotedString
            depending on the attribute value
            </summary>
            <param name="offset">classification offset repassed to AddClassification</param>
        </member>
        <member name="M:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.AddClassification(System.Int32,Microsoft.PowerShell.Host.ISE.PSXmlTokenType)">
            <summary>
            Adds the token classification with the given offset
            </summary>
            <param name="offset">start position of the classification</param>
            <param name="classification">classification to be added</param>
        </member>
        <member name="T:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation">
            <summary>
            Information kept about open and close tags in ReadElements
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation.openTag">
            <summary>
            token information for open angle bracket opening a tag
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation.closeOpenTag">
            <summary>
            Token information for the close angle bracket corresponding to <seealso cref="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation.openTag"/>
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation.openCloseTag">
            <summary>
            Token information for the open angle bracket closing the tag
            </summary>
        </member>
        <member name="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation.elementName">
            <summary>
            Element name
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation.OpenTag">
            <summary>
            Gets or sets the token information for open angle bracket opening a tag
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation.CloseOpenTag">
            <summary>
            Gets or sets the token information for the close angle bracket corresponding to <seealso cref="F:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation.openTag"/>
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation.OpenCloseTag">
            <summary>
            Gets or sets the token information for the open angle bracket closing the tag
            </summary>
        </member>
        <member name="P:Microsoft.Windows.PowerShell.Gui.Internal.XmlTokenizer.InElementInformation.ElementName">
            <summary>
            Gets or sets the element name
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISESnippet">
            <summary>
            Class containing all data about a Snippet
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.imageSource">
            <summary>
            Icon for Snippets
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.displayTitle">
            <summary>
            Display title which shows in the drop down
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.schemaVersion">
            <summary>
            Schema Version of this snippet 
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.description">
            <summary>
            A few lines describing the intent and usage of the snippet
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.author">
            <summary>
            The author, which may be a person or organization
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.codeFragment">
            <summary>
            The code fragment that is inserted into the editor if the snippet is chosen
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.isTabSpecific">
            <summary>
            Whether the snippet was loaded via a command into the tab
            false, if it was loaded from the user folder onstartup, or was a default snippet
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.isDefault">
            <summary>
            True if and only if this is a default hardcoded snippet 
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.fullDiskPath">
            <summary>
            Location on disk from where this was loaded
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.caretOffsetFromStart">
            <summary>
            The number of chars the caret must be moved after this snippet is inserted.
            -1 indicates no movement, which leaves it at the end of the snippet
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.indent">
            <summary>
            true (default) - indent the snippet based on the position of insertion
            false - do not indent this snippet; insert as specified in the XML file, unchanged
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.hashValue">
            <summary>
            Hash value to facilitate comparisons to avoid duplication
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippet.snippetCompletion">
            <summary>
            The completion corrosponding to this snippet which will be passed to the editor
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippet.#ctor(System.String,System.Version,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the ISESnippet class
            This ctor is used to create global default snippets, hence it does not need a path name
            </summary>
            <param name="displayTitle">Title displayed in the snippet dropdown</param>
            <param name="schemaVersion">Schema version of the snippet</param>
            <param name="description">The Description</param>
            <param name="author">Author person or organization</param>
            <param name="codeFragment">Text that would be inserted into the editor by the snippet</param>
            <param name="caretPosition">Caret offset from start after the snippet is inserted</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippet.#ctor(System.String,System.Version,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the ISESnippet class
            This ctor is used to create all disk snippets - global ones from the user folder and tab specific ones
            when Load.. commands are used
            </summary>
            <param name="displayTitle">Title displayed in the snippet dropdown</param>
            <param name="schemaVersion">Schema version of the snippet</param>
            <param name="description">The Description</param>
            <param name="author">Author person or organization</param>
            <param name="codeFragment">Text that would be inserted into the editor by the snippet</param>
            <param name="fullPath">Disk location of the snippet</param>
            <param name="isTabSpecific">true iff it is tab specific</param>
            <param name="caretPosition">Caret offset from start after the snippet is inserted</param>
            <param name="mustIndent">True iff the snippet should be indented based on the point of insertion</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.DisplayTitle">
            <summary>
            Gets the Display Title
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.SchemaVersion">
            <summary>
            Gets the Schema Version
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.Description">
            <summary>
            Gets the Snippet Description
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.Author">
            <summary>
            Gets the Author
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.CodeFragment">
            <summary>
            Gets the Code Fragment
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.IsTabSpecific">
            <summary>
            Gets a value indicating whether the snippet is Tab Specific
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.IsDefault">
            <summary>
            Gets a value indicating whether the snippet is a default one
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.FullPath">
            <summary>
            Gets the FullPath
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.Completion">
            <summary>
            Gets the Completion for this snippet  
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.CaretOffsetFromStart">
            <summary>
            Gets the number of chars from start by which the caret must be moved
            after the snippet is inserted
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.Indent">
            <summary>
            Gets a value indicating whether the snippet should be indented
            based on the point of insertion
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippet.HashCode">
            <summary>
            Gets the unique hashcode used to prevent double loading
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippet.Equals(Microsoft.PowerShell.Host.ISE.ISESnippet)">
            <summary>
            (This is now only used by unit tests)
            Equality of snippets used to prevent double-loading
            into an ISESnippetCollection. 
            </summary>
            <param name="other">The other snippet in comparison</param>
            <returns>true iff they may be deemed equal</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippet.CreateSnippet(System.String,System.Version,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Creates a Snippet
            </summary>
            <param name="pdisplayTitle">Title displayed in the snippet dropdown</param>
            <param name="pschemaVersion">Schema version of the snippet</param>
            <param name="pdescription">The Description</param>
            <param name="pauthor">Author person or organization</param>
            <param name="pcodeFragment">Text that would be inserted into the editor by the snippet</param>
            <param name="pfullPath">Disk location of the snippet</param>
            <param name="pisDefault">true iff it is a default hardcoded snippet</param>
            <param name="pisTabSpec">true iff it is tab specific</param>
            <param name="pcaretOffset">Caret offset from start after the snippet is inserted</param>
            <param name="pindent">True iff the snippet should be indented based on the point of insertion</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippet.ComputeHash">
            <summary>
            Computes the unique hashcode for the snippet making use of the
            fact we never have a null char in the four distinguishing fields
            of the snippet.
            </summary>
            <returns>the computed hash</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISESnippetCollection">
            <summary>
            Collection of ISESnippet
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.XmlNamespaceForISESnippet">
            <summary>
            Namespace for the snippets XML schema
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.SnippetFileExtension">
            <summary>
            Standard extension for the snippet xml files on the disk
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.referenceSchemaVersion">
            <summary>
            Schema version
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.userSnippetsBank">
            <summary>
            These user snippets are loaded once at start of app and never again
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.simulatedTab">
            <summary>
            -1: not simulated, 0: simulated initial tab, 1: simulated successive tab
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.lockObj">
            <summary>
            Object used for locking
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.isFunctional">
            <summary>
            true if the Snippets functionality is enabled
            false when the snippets are in the process of loading
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.lookupTable">
            <summary>
            Lookup table used to check for a snippet by it's hashcode to avoid duplication
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.snippets">
            <summary>
            All snippets accessed via $psISE.CurrentPowerShellTab.Snippets[..]
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.snippetCompletions">
            <summary>
            All snippet completions given to the editor if showdefaultsnippets = true
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.nonDefaultSnippetCompletions">
            <summary>
            Non-default snippet completions given to the editor if showdefaultsnippets = false
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.authManager">
            <summary>
            Authorization Manager used to read files, so that they are not read in if the policy is restricted
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.#ctor(System.Management.Automation.AuthorizationManager)">
            <summary>
            Initializes a new instance of the ISESnippetCollection class and initializes it with 
            default and disk snippets common to all tabs.
            </summary>
            <param name="authManager">Authorization manager to be used to read the disk files</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.Count">
            <summary>
            Gets the number of snippets in this collection
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.IsFunctional">
            <summary>
            Gets a value indicating whether the snippets functionality is enabled
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.SnippetCompletions">
            <summary>
            Gets the list of completions - default + user + tab
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.NonDefaultSnippetCompletions">
            <summary>
            Gets the list of completions - user + tab but not default
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.Item(System.Int32)">
            <summary>
            Gets the ISESnippet at position [index]
            </summary>
            <param name="index">0 based position of element to retrieve</param>
            <returns>the snippet requested</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.Load(System.String)">
            <summary>
            Loads a single snippet XML file (which could contain multiple snippets).
            Unlike all other Load..() methods, this Load method -
                * works synchronously.. so a large file will make the prompt unavailable for a while
                * throws meaningful exceptions for malformed snippets and file read errors instead of silently ignoring them 
            </summary>
            <param name="filePathName">Full path and name of the file to be loaded</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.GetEnumerator">
            <summary>
            Required to support looping by foreach
            </summary>
            <returns>The Enumerator over the snippets</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Required to support looping by foreach
            This never really gets called, but i need it to support the IEnumerable T-in-angle-bracket GetEnumerator()
            and this is the only way i can do a good foreach
            Called artificially from unit test only
            </summary>
            <returns>The Enumerator over the snippets</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.InternalAccessToSimulateTab(System.Boolean)">
            <summary>
            For unit test only
            </summary>
            <param name="isFirst">true if it is the first tab</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.InternalAccessToParseAddToList(System.String,System.Xml.XPath.XPathDocument,System.Collections.Generic.List{Microsoft.PowerShell.Host.ISE.ISESnippet})">
            <summary>
            Used by unit tests only
            </summary>
            <param name="filename">File name or "Default"</param>
            <param name="docNav">XPath navigator at root</param>
            <param name="loadDestination">target list</param>
            <returns>the number of snippets added to the target list</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.UpdateWithDiskSnippets">
            <summary>
            Updates the object specific (tab specific) snippet lists of all tabs
            based on the userSnippetBank and enables the functionality
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.Contains(Microsoft.PowerShell.Host.ISE.ISESnippet)">
            <summary>
            This is used by unit tests to find if a snippet is in this collection
            </summary>
            <param name="s">The snippet to look for</param>
            <returns>true iff the snippet exists in the collection</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.ParseAddToList(System.String,System.Xml.XPath.XPathDocument,System.Collections.Generic.List{Microsoft.PowerShell.Host.ISE.ISESnippet})">
            <summary>
            Uses XPath to parse out required fields from a XML string, creates a completion, and adds it to the list 
            </summary>
            <param name="filename">Name of the disk file with full path, or 'Default', if it is a default snippet</param>
            <param name="docNav">The XPath document</param>
            <param name="loadDestination">Target list to load into</param>
            <returns>the number of snippets added to the target list</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.ParseAddToList(System.String,System.Xml.XPath.XPathDocument,System.Collections.Generic.List{Microsoft.PowerShell.Host.ISE.ISESnippet},System.Boolean)">
            <summary>
            Uses XPath to parse out required fields from a XML string, creates a completion, and adds it to the list 
            </summary>
            <param name="filename">Name of the disk file with full path, or 'Default', if it is a default snippet</param>
            <param name="docNav">The XPath document</param>
            <param name="loadDestination">Target list to load into</param>
            <param name="shouldThrow">true if and only if InvalidOperationException must be thrown on
            the first encountered error in the XML structure. If this is false (default) the function
            ignores malformed snippets silently.</param>
            <returns>the number of snippets added to the target list</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.AddSnippetsSubjectToDupCheck(System.Collections.Generic.IEnumerable{Microsoft.PowerShell.Host.ISE.ISESnippet},System.Boolean)">
            <summary>
            Adds a snippets to the list if it is not there already
            </summary>
            <param name="newSnippets">The snippets to add</param>
            <param name="isDefaultSnippet">whether it is a default snippet</param>
            <returns>true if it was added</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.LoadDiskSnippets(System.String,System.Boolean)">
            <summary>
            Loads snippets from a folder location and returns them in a list
            </summary>
            <param name="folderPath">The disk location to load from</param>
            <param name="recurseSubFolders">true if subfolders should be included</param>
            <returns>list containing loaded snippets</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISESnippetCollection.LoadOneDiskSnippetXmlFile(System.String)">
            <summary>
            Loads all the snippets from a single snippets.ps1xml file and returns them in a list.
            Unlike the other Load methods, it does not ignore malformed snippets - it throws 
            InvalidOperationException with relevant messages, and stops on the first encountered error
            </summary>
            <param name="fullFilePathName">Full path with name of file to load</param>
            <returns>List of all snippets from the file</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ConsoleEditor">
            <summary>
            Console Editor
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.CtrlLeftDisplayName">
            <summary>
            Localized shortcut name for Ctrl+Left
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.CtrlPageUpDisplayName">
            <summary>
            Localized shortcut name for Ctrl+PageUp
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.CtrlUpDisplayName">
            <summary>
            Localized shortcut name for Ctrl+Up
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.StopAndCopyGesture">
            <summary>
            Gesture equivalent to GuiStrings.StopAndCopyShortcut
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.EditorSelectAllGesture">
            <summary>
            Gesture equivalent to GuiStrings.EditorSelectAllShortcut
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.outputContentType">
            <summary>
            /// The content type for the output editor
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.inputTextBeforeExecution">
            <summary>
            InputText saved before executing something that will need to restore it
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.isRunspaceExecutingCommand">
            <summary>
            value indicating whether the runspace is executing a command that should block editor input
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.region1">
            <summary>
            First of the two regions that when combined produce a single region only editable at the end
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.region2">
            <summary>
            Second of the two regions that when combined produce a single region only editable at the end
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.inputText">
            <summary>
            current text for the writeable part of the console
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.inputMode">
            <summary>
            Set to true when the host wants to read input like in read-host.
            This flag will be set to true from the pipeline thread (in a read-host, for instance). It will be set
            to false in the UI thread (in the stop command or on Enter keyboard processor). I don't see the setting to 
            true/false ever to be concurrent, because the pipeline setting will happen before the Enter/Stop
            so I am not adding a lock for inputMode access
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.lastFlushedPosition">
            <summary>
            position of the buffer end in the last call to FlushOutput used to determine the non read only region of the Console
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.inputModeDoneWithEnter">
            <summary>
            Event used in the Input method that is fired when Enter is typed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.inputModeCanceledByStopping">
            <summary>
            Event used in the Input method that is fired when the pipeline is stopped forcefully (Ctrl+C)
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.peer">
            <summary>
            Console automation peer
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.trackedOutputStartPosition">
            <summary>
            The position of output start
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.pendingOutput">
            <summary>
            Output accumulated but not yet written to the control
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.lastLineLength">
            <summary>
            the Length of the editor's last line
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.colorSpans">
            <summary>
            The color spans currently present in the editor
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.pendingOutputTotalLength">
            <summary>
            Length of the output yet to be flushed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ConsoleEditor.exiting">
            <summary>
            Value for the Exiting property
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.#ctor">
            <summary>
            Initializes a new instance of the ConsoleEditor class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.Finalize">
            <summary>
            Finalizes an instance of the ConsoleEditor class
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.ConsoleEditor.InputTextChanged">
            <summary>
            Event fired when the InputText changes
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ConsoleEditor.InputText">
            <summary>
            Gets or sets the console input text
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ConsoleEditor.Text">
            <summary>
            Gets and sets the editor's text
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ConsoleEditor.InputStartPosition">
            <summary>
            Gets the position where input starts
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ConsoleEditor.LineTextUpToCaret">
            <summary>
            Gets the line up to the caret within the InputText
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ConsoleEditor.LastLineLength">
            <summary>
            Gets the Length of the editor's last line
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ConsoleEditor.Exiting">
            <summary>
            Gets or sets a value indicating whether the application is exiting; when true, output is discarded
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ConsoleEditor.IsRunspaceExecutingCommand">
            <summary>
            Gets or sets a value indicating whether the runspace is executing a command that should block editor input
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ConsoleEditor.IsInInputMode">
            <summary>
            Gets a value indicating whether the output is in input mode
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ConsoleEditor.InputMode">
            <summary>
            Gets or sets a value indicating whether the output is gathering input (like in a read-host case, for instance)
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.Clear">
            <summary>
            Clears the text in the output editor.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.Dispose">
            <summary>
            Dispose method in IDisposeable
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.MarkBeginningOfOutput">
            <summary>
            Called before output is produced to mark the beginning of output
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.SetLastOutputAsAutomationName">
            <summary>
            Called after output is produced to change the AutomationName of the editor to the output so Narrator reads it
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.CommandCanStartIntellisense">
            <summary>
            Returns true if intellisense can be started
            </summary>
            <returns>true if intellisense can be started</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.MoveCaretToBeginningOfInputText">
            <summary>
            Moves the caret to the end of the input text
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.MoveCaretToEndOfInputText">
            <summary>
            Moves the caret to the end of the input text
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.IsCaretAtFirstInputLine">
            <summary>
            Returns true if the caret is at the same line as the input text
            </summary>
            <returns>
            true if the caret is at the same line as the input text
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.IsCaretAtInput">
            <summary>
            Returns true if caret is at input region
            </summary>
            <returns>true if caret is at input region</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.IsSelectionAtInputAndNonEmpty">
            <summary>
            Returns true if there is a selection totaly the input region
            </summary>
            <returns>true if there is a selection totaly the input region</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.IsAtBeginningOfInput">
            <summary>
            Returns true if caret is at beginning of input region
            </summary>
            <returns>true if caret is at beginning of input region</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.IsCaretAtLastLine">
            <summary>
            Returns true if the caret is at the last line
            </summary>
            <returns>
            true if the caret is at the last line
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.MarkOutputAsReadOnly">
            <summary>
            Called after we are done with output to prevent the customer from editing output
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.RemoveOutputReadOnlyRegion">
            <summary>
            Removes the read only regions so output can be produced
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.RaiseContentLoadedBeginningEvent">
            <summary>
            Raise the event for async content begining to load
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.RaiseContentLoadedCompletedEvent">
            <summary>
            Raise the event for async content load completed
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.Input(System.Boolean@,System.String@)">
            <summary>
            Start input taking. Input can end with:
               1) Enter
               2) The pipeline ending
            </summary>
            <param name="inputCanceled">true if input was canceled</param>
            <param name="input">returned input</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.CancelInputMode">
            <summary>
            Ends the inputMode the Input method is waiting on when the pipeline is stopped
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.OutputKeyDown(System.Windows.Input.KeyEventArgs,System.Windows.Input.ModifierKeys,Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Called to handle key presses in the console pane
            </summary>
            <param name="e">event arguments</param>
            <param name="modifiers">keyboard modifiers</param>
            <param name="selectedPowerShellTab">the PowerShellTab this output belongs to</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.ClearUndoAndRedoStacks">
            <summary>
            Clears the undo and redo stack
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.AreUndoAndRedoStacksEmpty">
            <summary>
            Used by test to verify the buffers are empty
            </summary>
            <returns>true if the indo and redo buffers are empty</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.FlushOutput">
            <summary>
            Flushes the pending output
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.SetSavedInputTextBeforeExecutingIntercativeCommad(System.String)">
            <summary>
            Clears the InputText saved before executing something
            </summary>
            <param name="savedInput">the saved input to set</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.SaveInputTextBeforeExecutingScript">
            <summary>
            Saves the current InputText before executing script or selection fopr a later restoration with RecoverInputTextInOutputAfterExecutingScript
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.RecoverInputTextInOutputAfterExecutingScript">
            <summary>
            Restores the InputText that was previously saved in SaveInputTextBeforeExecutingScript
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.AddToPendingOutput(System.String,System.Boolean)">
            <summary>
            Adds line to the pending output
            </summary>
            <param name="line">line to be added</param>
            <param name="finishWithCrLf">true if line should have a \r\n appended to it</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.AddToPendingOutput(System.String,System.Boolean,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Adds line to the pending output
            </summary>
            <param name="line">line to be added</param>
            <param name="finishWithCrLf">true if line should have a \r\n appended to it</param>
            <param name="foreground">foreground color</param>
            <param name="background">background color</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.AddToPendingOutput(System.String[],System.Boolean)">
            <summary>
            Adds lines to the pending output. 
            Intermediate lines will have \r\n appened to it.
            The last line might have \r\n appeneded to it, depending on finishWithCrLf.
            </summary>
            <param name="lines">lines to be added</param>
            <param name="finishWithCrLf">true if the last line should have a \r\n appended to it</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.AddToPendingOutput(System.String[],System.Boolean,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Adds lines to the pending output. 
            Intermediate lines will have \r\n appened to it.
            The last line might have \r\n appeneded to it, depending on finishWithCrLf.
            </summary>
            <param name="lines">lines to be added</param>
            <param name="finishWithCrLf">true if the last line should have a \r\n appended to it</param>
            <param name="foreground">foreground color</param>
            <param name="background">background color</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.GetLineStartPosition(System.Int32)">
            <summary>
            Gets the position for the start of the line containing <paramref name="bufferPosition"/>
            </summary>
            <param name="bufferPosition">position we want to get the line start position from</param>
            <returns>The position for the start of the line containing <paramref name="bufferPosition"/></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.GestureMatchesKeyEvent(System.Windows.Input.KeyGesture,System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns true if <paramref name="gesture"/> matches <paramref name="eventArgs"/>.
            </summary>
            <param name="gesture">a key gesture based on a localized shortcut</param>
            <param name="eventArgs">keyboard event args</param>
            <returns>true if <paramref name="gesture"/> matches <paramref name="eventArgs"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.KeyWillAddText(System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns true if <paramref name="e"/> will add text to the editor
            </summary>
            <param name="e">event arguments</param>
            <returns>true if <paramref name="e"/> will add text to the editor</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.KeyIsAlphaNumeric(System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns true if <paramref name="e"/> is numeric or aplphabetical
            </summary>
            <param name="e">event arguments</param>
            <returns>true if <paramref name="e"/> is numeric or aplphabetical</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.KeyIsPuntuation(System.Windows.Input.KeyEventArgs)">
            <summary>
            Returns true if <paramref name="e"/> is one of the punctuation keys
            </summary>
            <param name="e">event arguments</param>
            <returns>true if <paramref name="e"/> is one of the punctuation keys</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.HandleLeft(System.Windows.Input.KeyEventArgs,System.Windows.Input.ModifierKeys,Microsoft.PowerShell.Host.ISE.PowerShellTab,System.Boolean)">
            <summary>
            Not at the beginning of inputArea or Control pressed, return = do nothing
            Output Control+Left message
            </summary>
            <param name="e">event arguments</param>
            <param name="modifiers">keyboard modifiers</param>
            <param name="selectedPowerShellTab">tab containing the editor</param>
            <param name="isAtTheBeginningOfInput">true if the caret is in the beginning of the input region</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.ConsoleEditor_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the editor loses focus
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.IsThereASelectionInBothInputAndOutput">
            <summary>
            Returns true if there is a selection that includes the start of the input area.
            Another way to say this: Returns true if there is a selection starting at the readonly region and ending at the editable region
            </summary>
            <returns>true if there is a selection that includes the start of the input area.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.VisualElement_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to mark the output as read only when the editor is loaded.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.OnInputTextChanged">
            <summary>
            Triggers the InputTextChanged event
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.Buffer_Changed(System.Object,Microsoft.VisualStudio.Text.TextContentChangedEventArgs)">
            <summary>
            Called to update the InputText
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.EndInputModeWithEnter">
            <summary>
            Ends the inputMode the Input method is waiting on when Enter is typed
            </summary>
            <returns>true if there was an input mode to be ended</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.EndInputMode(System.Threading.AutoResetEvent)">
            <summary>
            Ends the input mode by setting an event
            </summary>
            <param name="eventToTrigger">event to be set</param>
            <returns>true if there was an input mode to be ended</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.SetInputText">
            <summary>
            Udpates the InputText when the buffer changes
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.GetInputRegionSpan">
            <summary>
            Gets a span with the read only region of the output
            </summary>
            <returns>a span with the read only region of the output</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.Dispose(System.Boolean)">
            <summary>
            Implements IDisposable logic
            </summary>
            <param name="isDisposing">true if being called from Dispose</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.UpdateSelection(System.Boolean,Microsoft.VisualStudio.Text.VirtualSnapshotPoint)">
            <summary>
            Called after a caret movement from <paramref name="oldPosition"/>to potentially extend a current 
            selection from <paramref name="oldPosition"/> to the current caret location
            </summary>
            <param name="extendSelection">true if the selection should be extended, false to clear an existing selection</param>
            <param name="oldPosition">position before a recent caret movement</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.HandleUp(System.Windows.Input.KeyEventArgs,System.Windows.Input.ModifierKeys,Microsoft.PowerShell.Host.ISE.PowerShellTab,System.Boolean)">
            <summary>
            if control is pressed allways move one line up (for consistency) and return
            if caret not at input return
            if at first line of input and shift is on
                go to previous history and if at first history output Control+Up message
            else (if not at fitst line of input area)
                move up limited by beginning of input
            end if
            </summary>
            <param name="e">event arguments</param>
            <param name="modifiers">keyboard modifiers</param>
            <param name="selectedPowerShellTab">tab containing the editor</param>
            <param name="caretInInput">true if the caret is in the input region</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.HandleDown(System.Windows.Input.KeyEventArgs,System.Windows.Input.ModifierKeys,Microsoft.PowerShell.Host.ISE.PowerShellTab,System.Boolean)">
            <summary>
            if control is pressed allways move one line down (for consistency with control up) and return
            if caret not at input return
            if caret is at last line and shift is on go to next history
            </summary>
            <param name="e">event arguments</param>
            <param name="modifiers">keyboard modifiers</param>
            <param name="selectedPowerShellTab">tab containing the editor</param>
            <param name="caretInInput">true if the caret is in the input region</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.HandlePageUp(System.Windows.Input.KeyEventArgs,System.Windows.Input.ModifierKeys,Microsoft.PowerShell.Host.ISE.PowerShellTab,System.Boolean)">
            <summary>
            If Control is pressed do a regular unlimited PgDn or PgUp
            If caret not in input return
            if  at first input line and shift is not on
                Move to top of history and print message and return
            else
              Do a PageUp limited by input and considering shift
            </summary>
            <param name="e">event arguments</param>
            <param name="modifiers">keyboard modifiers</param>
            <param name="selectedPowerShellTab">tab containing the editor</param>
            <param name="caretInInput">true if the caret is in the input region</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.HandlePageDown(System.Windows.Input.KeyEventArgs,System.Windows.Input.ModifierKeys,Microsoft.PowerShell.Host.ISE.PowerShellTab,System.Boolean)">
            <summary>
            if control is pressed allways move one line down (for consistency with control PgUp) and return
            if caret not at input return
            if caret is at last line and shift is on go to bottom of history
            </summary>
            <param name="e">event arguments</param>
            <param name="modifiers">keyboard modifiers</param>
            <param name="selectedPowerShellTab">tab containing the editor</param>
            <param name="caretInInput">true if the caret is in the input region</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.HandleHome(System.Windows.Input.KeyEventArgs,System.Windows.Input.ModifierKeys,Microsoft.PowerShell.Host.ISE.PowerShellTab,System.Boolean)">
            <summary>
            Outside of inputArea, return = do nothing
            Go to beginning of input extending selection if Shift is pressed in the following cases:
                Home or Shift+Home in first line
                Ctrl+Home or Ctrl+Shift+Home 
            </summary>
            <param name="e">event arguments</param>
            <param name="modifiers">keyboard modifiers</param>
            <param name="selectedPowerShellTab">tab containing the editor</param>
            <param name="caretInInput">true if the caret is in the input region</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.HandleSelectAll(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Selects the input. Leave it unhandled otherwise
            </summary>
            <param name="selectedPowerShellTab">tab containing the editor</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.LimitMovementToBeginningOfInput(System.Windows.Input.KeyEventArgs,Microsoft.PowerShell.Host.ISE.PowerShellTab,System.Boolean,Microsoft.VisualStudio.Text.VirtualSnapshotPoint@,System.String)">
            <summary>
            Called after moving the caret to ensure it does not go beyond the beginning of input
            </summary>
            <param name="e">event arguments</param>
            <param name="selectedPowerShellTab">tab containing the editor</param>
            <param name="shiftIsOn">true if shift is on</param>
            <param name="positionBefore">position before caret movement</param>
            <param name="shortcut">shortcut to be added to message</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.HandleReturn(System.Windows.Input.KeyEventArgs,System.Windows.Input.ModifierKeys,Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Modifiers is not none, return otherwise EndInpout, dismiss or commit completion and/or run command
            </summary>
            <param name="e">event arguments</param>
            <param name="modifiers">keyboard modifiers</param>
            <param name="selectedPowerShellTab">tab containing the editor</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ConsoleEditor.HandleNoModifiers(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles keys that only need to be customized for the case where there are no modifiers
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEEditor">
            <summary>
            Base class for all Editors: Input, Output and Script
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.SpaceCharacters">
            <summary>
            Characters recognized as word separators in GetHelpCartetText
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.parameterValueFilter">
            <summary>
            Filter for intellisense parameter values results
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.memberFilter">
            <summary>
            Filter for intellisense member results
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.memberOrTypeFilter">
            <summary>
            Filter for intellisense member or type results
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.providerItemAndContainerFilter">
            <summary>
            Filter for intellisense provider results
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.commandAndParameterNameFilter">
            <summary>
            Filter for intellisense command or parameter name results
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.variableFilter">
            <summary>
            Filter for intellisense variable results
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.spanToEnsureVisible">
            <summary>
            Helper used in EnsureSpanVisible to store the span to ensure visible
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.completionSession">
            <summary>
            the current Intellisense completion session
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.newCharacterBufferPosition">
            <summary>
            Position of the new character in the buffer
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.characterDeleted">
            <summary>
            Set to true when a character has been deleted from the buffer
            so intellisnese can filter tghe current set
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.newBufferCharacter">
            <summary>
            last character that has been added to the buffer so we
            can decide when to trigger intellisense
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.intellisenseTriggerPosition">
            <summary>
            current intellisense session trigger position
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.spacePositionBeforeTokenization">
            <summary>
            position of a space character typed before it has been tokenized
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.spaceAfterParameterPosition">
            <summary>
            position of a space character typed after it has beeen tokenized and determined to succede a parameter
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.dotPositionBeforeTokenization">
            <summary>
            position of a . character typed before it has been tokenized
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.dotPositionAfterTokenization">
            <summary>
            position of a . character typed after it has beeen tokenized and determined to not be in the same token as a wildcar character
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.nonTrivialBufferChange">
            <summary>
            A non trivial (1 character add/delete) buffer change took place
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.outliningManager">
            <summary>
            outlining manager used to collapse/expand regions
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.undoHistoryManager">
            <summary>
            The undo history manager
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.buffer">
            <summary>
            The editor buffer
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.textView">
            <summary>
            The textView for this editor
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.editorViewHost">
            <summary>
            nautilus editor
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.editorOperations">
            <summary>
            An object used to perform editor operations
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.textMarkerProvider">
            <summary>
            Allows for text marking as in the Mark method
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.textStructureNavigator">
            <summary>
            Text Navigation helper
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.currentReadOnlyRegion">
            <summary>
            current read only region associated with the editor
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.debugMode">
            <summary>
            Whether the editor is in debug mode
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.caretLine">
            <summary>
            Last tracked caret line. This helps minimizing notifications regarding changes in the CaretLine property.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.caretColumn">
            <summary>
            Last tracked caret column. This helps minimizing notifications regarding changes in the CaretColumn property.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.beforeDefaultKeyProcessor">
            <summary>
            The key processor for this text view
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.tokenizationService">
            <summary>
            The service responsible for tokenization
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.#ctor(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Initializes a new instance of the ISEEditor class.
            </summary>
            <param name="contentType">The editor content type</param>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.ISEEditor.PropertyChanged">
            <summary>
            Used to notify property changes.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.ISEEditor.RequestContextMenuItems">
            <summary>
            The editor raises this event to request for any additional context menu items when the mouse is right-clicked or the Applications key
            is pressed. The event subscriber must provide the menu items using the RequestContextMenuItemsEventArgs.MenuItems property.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.LineCount">
            <summary>
            Gets the total line count.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.CaretLine">
            <summary>
            Gets the line number containing the caret.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.CaretColumn">
            <summary>
            Gets the line column containing the caret
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.Text">
            <summary>
            Gets or sets and sets the editor's text
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.SelectedText">
            <summary>
            Gets the editor's selected text
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.CaretLineText">
            <summary>
            Gets the text of the line containing the caret
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.CanGoToMatch">
            <summary>
            Gets a value indicating whether the caret is at a charcter with a matching character to go to
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.InputStartPosition">
            <summary>
            Gets the position where input starts
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.FilePath">
            <summary>
            We need FilePath to pass it inside Parser for better experience:
            Particularly filePath is needed for 'using module .\...' to resolve against file location.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.LineTextUpToCaret">
            <summary>
            Gets the current line up to the caret position
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.IsPowerShellContentType">
            <summary>
            Gets a value indicating whether the content type is "powershell"
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.OutliningManager">
            <summary>
            Gets the outline manager used to collapse/expand regions
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.Zoom">
            <summary>
            Gets or sets the view Zoom.
            This is used from tests and XAML binding
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.TransformZoomLevel">
            <summary>
            Gets the zoom level directly from the control transform
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.Buffer">
            <summary>
            Gets the editor buffer
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.TextView">
            <summary>
            Gets the textView for this editor
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.IsVerticalScrollBarVisible">
            <summary>
            Gets a value indicating whether the vertical scrollbar is visible
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.UndoHistoryManager">
            <summary>
            Gets the undo history manager
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.TextStructureNavigator">
            <summary>
            Gets the text navigation object corresponding to this editor
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.Control">
            <summary>
            Gets the editor control
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.EditorOperations">
            <summary>
            Gets an object used to perform editor operations
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.Caret">
            <summary>
            Gets the editor's caret
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.CaretPosition">
            <summary>
            Gets the caret position
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.EditorViewHost">
            <summary>
            Gets the editor
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.IsReadOnly">
            <summary>
            Gets a value indicating whether the editor is in the read-only state
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.DebugMode">
            <summary>
            Gets or sets a value indicating whether the debug mode is true.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.IsFocused">
            <summary>
            Gets a value indicating whether the editor is Focused
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.CompletionSession">
            <summary>
            Gets the current Intellisense completion session
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.TokenizationService">
            <summary>
            Gets the service responsible for tokenization
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.IsIntellisenseEnabled">
            <summary>
            Gets a value indicating whether intellisense is enabled
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.ContextMenu">
            <summary>
            Gets and sets the context menu.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SelectCaretLine">
            <summary>
            Selects the line containing the caret
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.InsertText(System.String)">
            <summary>
            Replaces the selection with <paramref name="text"/> or inserts <paramref name="text"/> at the current caret position.
            </summary>
            <param name="text">Text to insert.</param>
            <remarks><seealso cref="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetCaretPosition(System.Int32,System.Int32)"/> can be used as a way to specify the position to insert text at.</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetLineLength(System.Int32)">
            <summary>
            Gets the line length for the line at <paramref name="lineNumber"/>.
            </summary>
            <param name="lineNumber">Nunber of the line to get the length of.</param>
            <returns>The line length for the line at <paramref name="lineNumber"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.EnsureVisible(System.Int32)">
            <summary>
            Scrolls the editor so that the line corresponding to <paramref name="lineNumber"/> is visible.
            </summary>
            <param name="lineNumber">Number of the line we want to ensure is visible.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetCaretPosition(System.Int32,System.Int32)">
            <summary>
            Sets the caret position at <paramref name="lineNumber"/> and <paramref name="columnNumber"/>.
            </summary>
            <param name="lineNumber">Caret line number.</param>
            <param name="columnNumber">Caret column number</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.Select(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Selects the region from <paramref name="startLine"/>, <paramref name="startColumn"/> to <paramref name="endLine"/>, <paramref name="endColumn"/>.
            </summary>
            <param name="startLine">Line where the selection starts.</param>
            <param name="startColumn">Column within <paramref name="startLine"/> where the selection starts.</param>
            <param name="endLine">Line where the selection ends.</param>
            <param name="endColumn">Column within <paramref name="endLine"/> where the selection ends.</param>
            <remarks>To select a line <paramref name="endColumn"/> can be set to <seealso cref="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetLineLength(System.Int32)"/> + 1.</remarks>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.Clear">
            <summary>
            Clears the text in the editor.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.Focus">
            <summary>
            Sets the focus to the editor.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GoToMatch">
            <summary>
            Goes to the character matching the character in the current caret position, if there is a matching character
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.ToggleOutliningExpansion">
            <summary>
            Toggles all Outlining (region) Expansion 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetCaretBrushes(System.String,System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            Sets the caret brushes for the given categories
            </summary>
            <param name="category">category with the caret brushes</param>
            <param name="normalCaretBrush">normal caret brush</param>
            <param name="overwriteCaretBrush">overwrite caret brush</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SpanArgumentsAreValid(Microsoft.VisualStudio.Text.ITextSnapshot,System.Int32,System.Int32)">
            <summary>
            Returns true if the parameters for a SnapshotSpan or TrackingSpan construcor are valid
            </summary>
            <param name="snapshot">snapshot we would create a SnapshotSpan in</param>
            <param name="start">start we would pass to the constructor</param>
            <param name="length">length we would pass to the constructor</param>
            <returns>true if the parameters for a SnapshotSpan or TrackingSpan construcor are valid</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SpanArgumentsAreValid(System.Int32,System.Int32)">
            <summary>
            Returns true if the parameters for a SnapshotSpan or TrackingSpan construcor are valid
            </summary>
            <param name="start">start we would pass to the constructor</param>
            <param name="length">length we would pass to the constructor</param>
            <returns>true if the parameters for a SnapshotSpan or TrackingSpan construcor are valid</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetSelectionColors(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Sets the colors for selection and inactive selection
            </summary>
            <param name="selectionColor">selection color</param>
            <param name="inactiveSelectionColor">inactive selection color</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetSelectionColors(System.Windows.Media.Color@,System.Windows.Media.Color@)">
            <summary>
            Used by test to gets the selection colors
            </summary>
            <param name="selectionColor">active selection color</param>
            <param name="inactiveSelectionColor">inactive active selection color</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.CanHandleAltAndShift(System.Windows.Input.Key)">
            <summary>
            Handles the special key processing for alt and shift keys that has to be trapped
            at the WndProc level since it does not reach the keyboard processor
            </summary>
            <param name="key">key that was pressed.</param>
            <returns>true if the editor is focused and the keuboard processor can handle the shortcut</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetVisibleAdornmentPositions">
            <summary>
            Gets the positions of all visible adornments on screen
            </summary>
            <returns>the positions of all visible adornments on screen</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetupTokenization(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Called to setup tokenization on construction or content type change
            </summary>
            <param name="newContentType">Content type to set tokenization for</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.TearDownTokenization(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Called to ter down tokenization on content type change
            </summary>
            <param name="oldContentType">Content type to tear down tokenization for</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.Select(Microsoft.VisualStudio.Text.Span)">
            <summary>
            Selects the span, ensures it is visible and moves the caret to the beggining of the selection.
            </summary>
            <param name="selectionSpan">Span to select.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetLineNumberMarginVisibility(System.Boolean)">
            <summary>
            Sets the line number margin visibility.
            </summary>
            <param name="visible">true if we want the margin to be visible</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetOutLiningMarginVisibility(System.Boolean)">
            <summary>
            Sets the outlining margin visibility.
            </summary>
            <param name="visible">true if we want the margin to be visible</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetZoomControlVisibility(System.Boolean)">
            <summary>
            Sets the zoom control visibility.
            </summary>
            <param name="visible">true if we want the zoom control to be visible</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetZoomControlVisibility">
            <summary>
            Returns true if the zoom control is visible
            </summary>
            <returns>true if the zoom control is visible</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetOutliningMarginVisibility">
            <summary>
            Returns true if the outlining margin is visible
            </summary>
            <returns>true if the outlining margin is visible</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetLineNumberMarginVisibility">
            <summary>
            Returns true if the line number is visible
            </summary>
            <returns>true if the line number is visible</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetGlyphMarginVisibility(System.Boolean)">
            <summary>
            Sets the glyph number margin visibility.
            </summary>
            <param name="visible">true if we want the margin to be visible</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetCurrentLine">
            <summary>
            Queries for the current line
            </summary>
            <returns>The current line</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetLineNumberFromPosition(System.Int32)">
            <summary>
            Gets the line number corresponding to a view position
            </summary>
            <param name="position">view position</param>
            <returns>line number</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetClassifications">
            <summary>
            Gets all classifications in the current textbuffer
            </summary>
            <returns>all classifications in the current textbuffer</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetErrorTags">
            <summary>
            Gets all error tags in the current textbuffer
            </summary>
            <returns>all error tags in the current textbuffer</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetTextMarkerTags">
            <summary>
            Gets all text marker tags in the current textbuffer
            </summary>
            <returns>all text marker tags in the current textbuffer</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetOutlineTags">
            <summary>
            Gets all outline tags in the current textbuffer
            </summary>
            <returns>all text marker tags in the current textbuffer</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.Reclassify(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Forces a reclassification of the editor
            </summary>
            <param name="span">span to reclassify</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetMarks">
            <summary>
            Gets the breakpoint and active statement marks added by MarkLine and MarkPosition
            </summary>
            <returns>the breakpoint and active statement marks added by MarkLine and MarkPosition</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.ClearMark(Microsoft.VisualStudio.Text.Tagging.TrackingTagSpan{Microsoft.VisualStudio.Text.Tagging.TextMarkerTag})">
            <summary>
            Clears the given mark
            </summary>
            <param name="mark">The mark to remove</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetFontNameAndSize">
            <summary>
            Sets the font name and size of this editor according to the options
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.MarkLine(System.Int32,System.String)">
            <summary>
            Marks <paramref name="lineNumber"/> with the <paramref name="marking"/>
            </summary>
            <param name="lineNumber">line to mark</param>
            <param name="marking"> The possible markings are "bookmark", "breakpoint", "currentstatement",  "returnstatement" and "stepbackcurrentstatement"</param>
            <returns>The adorment mark</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.MarkPosition(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Marks <paramref name="lineNumber"/> with the <paramref name="marking"/> starting at <paramref name="startPosition"/> and ending at <paramref name="endPosition"/>.
            </summary>
            <param name="lineNumber">line to mark</param>
            <param name="startPosition">start of the position in the line to mark</param>
            <param name="endPosition">end of the position in the line to mark</param>
            <param name="marking"> The possible markings are "bookmark", "breakpoint", "currentstatement",  "returnstatement" and "stepbackcurrentstatement"</param>
            <returns>he adorment mark</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.ReplaceTextForTabExpansion(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces the line up to the caret position with text
            </summary>
            <param name="text">text to be inserted</param>
            <param name="replacementIndex">the index where replacement should start</param>
            <param name="replacementLength">the length of the replacement</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetCommandSelectionOrTextNextToCaret">
            <summary>
            If there is a selection with no new line, returns it, otherwise returns the text next to caret or null if the caret is not next to a word
            </summary>
            <returns>
            Rturns the selection or text next to caret
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetTextNextToCaret">
            <summary>
            returns the word next to the caret or null if caret is not next to a word
            </summary>
            <returns>
            the word next to the caret or null if caret is not next to a word
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.RemoveReadOnlyRegion">
            <summary>
            remove read only region so we can add the output lines and
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.MarkAsReadOnly">
            <summary>
            Mark all the content of the editor as read only
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.OnRequestContextMenuItems(Microsoft.PowerShell.Host.ISE.ISEEditor.RequestContextMenuItemsEventArgs)">
            <summary>
            Raises the RequestContextMenuItems event
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.ResetUndoHistoryManager">
            <summary>
            Resets this.undoHistoryManager to clear the undo stack
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GoToPosition(System.Int32)">
            <summary>
            PLaces the caret at the new position and ensures it is visible
            </summary>
            <param name="positionToGo">position to place the caret in</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.IntellisenseDone(System.Collections.Generic.IList{System.Management.Automation.CompletionResult},System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Called when intellisense results are available to start the intellisense popup
            </summary>
            <param name="completionResults">intellisense results</param>
            <param name="lineStartPosition">position of the line start</param>
            <param name="replacementIndex">position of the last word for future replacement when intellisense is commited</param>
            <param name="replacementLength">length of the last word for future replacement when intellisense is commited</param>
            <param name="startCaretPosition">position used for filtering of the list</param>
            <param name="selectOnEmptyFilter">True to select an item even if the filter text is empty</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.CommandShowSnippet">
            <summary>
            Starts insertion of snippets for the editor explicitly
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.CommandIntelisenseStart">
            <summary>
            Starts intellisense for the editor explicitly
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.CommandCanStartIntellisense">
            <summary>
            Returns true if intellisense can be started
            </summary>
            <returns>true if intellisense can be started</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.RemoveCompletionManager">
            <summary>
            Used by tests to prevent the automatic dismissal of Intellosense when the editor's TextView is not visible,
            allowing unit tests to test scenarios where intellisense should be dismissed by certain keystrokes.
            Without this, intellisense is always dismissed a while after it is started so we will not be able to tell
            if the dismissal was caused by ISEEditor code or by the automatic dismissal.
            Details:
            Intellisense adds a spacereservation agent.
            The manager of the agents called space reservation manager will set the agent to null if the TextView is not visible.
            Intellisense monitors changes in the agent and when it is set to null, it dismisses intellisense.
            What we do in the code below is to remove the reservation agent as soon as it is added by Intellisense
            This prevents intellisense from monitoring a change in the agent to null and dismissing intellisense.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetFullSpan">
            <summary>
            Gets a SnapshotSpan of the whole editor
            </summary>
            <returns>a SnapshotSpan of the whole buffer</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetFullTrackingSpan">
            <summary>
            Returns a tracking span spanning the whole editor
            </summary>
            <returns>A tracking span spanning the whole editor</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetCaretAtBufferPosition(System.Int32)">
            <summary>
            Sets the caret position at <paramref name="caretPosition"/>.
            </summary>
            <param name="caretPosition">position to set the caret to</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.RefreshBraceMatches">
            <summary>
            Forces the tagging of braces
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetLineStartPosition(System.Int32)">
            <summary>
            Gets the position that the line containing <paramref name="bufferPosition"/> starts
            </summary>
            <param name="bufferPosition">position we want to get the line start from</param>
            <returns>the position that the line containing <paramref name="bufferPosition"/> starts</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.AddCommandToContextMenu(System.Windows.Input.ICommand,System.String)">
            <summary>
            Adds a command to the context menu
            </summary>
            <param name="command">command to add</param>
            <param name="automationId">ID used for testing</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.EnsureSpanVisible(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Calls this.EditorViewHost.TextView.ViewScroller.EnsureSpanVisible but only after ViewportWidth is not 0
            To avoid an issue trying to set the position just after the editor is loaded miscalculating
            because the ViewPort is 0
            </summary>
            <param name="span">span to ensure visible</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.IsSpace(System.Char)">
            <summary>
            Returns true if c is a space character
            </summary>
            <param name="c">character to be checked</param>
            <returns>true if c is a space character</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetNextSpaceIndex(System.String,System.Int32)">
            <summary>
            Starting at start goes forward untill finds a space and returns its index.
            Returns str.Length-1 if there is no space or the space is at the last position.
            This always returns a valid index in the str.
            </summary>
            <param name="str">string to look for space</param>
            <param name="start">where to start looking</param>
            <returns>index of a space starting at start and going forward or str.Lenth-1 if no space found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetPreviousSpaceIndex(System.String,System.Int32)">
            <summary>
            Starting at start goes back untill finds a space and returns its index.
            Returns 0 if there is no space or if the space is at 0.
            This always returns a valid index in the str.
            </summary>
            <param name="str">string to look for space</param>
            <param name="start">where to start looking</param>
            <returns>index of a space starting at start and going backwards or 0 if no space found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetHelpCartetText(System.String,System.Int32)">
            <summary>
            returns the word next to the caret or null if caret is not next to a word
            </summary>
            <param name="line">line containing the caret</param>
            <param name="position">caret position</param>
            <returns>word next to the caret or null if caret is not next to a word</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetFullSpan(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets a SnapshotSpan of the whole buffer
            </summary>
            <param name="buffer">buffer to get a SnapshotSpan from</param>
            <returns>a SnapshotSpan of the whole buffer</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetTextViewHost(Microsoft.VisualStudio.Text.ITextBuffer,System.String)">
            <summary>
            Creates the host and views for the buffer
            </summary>
            <param name="hostBuffer">buffer to create host and views for</param>
            <param name="appearanceCategory">appearance category to use</param>
            <returns>the new host</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.EnsureSpanVisible_ViewportWidthChanged(System.Object,System.EventArgs)">
            <summary>
            Called from EnsureSpanVisible to call this.EditorViewHost.TextView.ViewScroller.EnsureSpanVisible as soon as the 
            ViewportWidth is not 0
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetupPowerShellTokenization">
            <summary>
            Called to setup tokenization when the new script content type is powershell or when the editor is the console
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.ExpandOutliningsInSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Expands all regions in thes <paramref name="span"/>
            </summary>
            <param name="span">span to collapse regions</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.CollapseOutliningsInSpan(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Collapses all regions in thes <paramref name="span"/>
            </summary>
            <param name="span">span to collapse regions</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.Buffer_ContentTypeChanged(System.Object,Microsoft.VisualStudio.Text.ContentTypeChangedEventArgs)">
            <summary>
            Called when the content type changes to setup tokenization for powershell files
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.RefreshErrors">
            <summary>
            Forces refreshing of errors
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.RefreshOutlining">
            <summary>
            Forces the refresh of outlined regions
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.TokenizationService_PowerShellTokenizationComplete(System.Object,System.EventArgs)">
            <summary>
            Forces the reclassification and retagging of the editor when the powershell tokenization is complete
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.TokenizationService_XmlTokenizationComplete(System.Object,System.EventArgs)">
            <summary>
            Forces the reclassification of the editor when the xml tokenization is complete
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetupContextMenu">
            <summary>
            Sets up the ContextMenu
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetupEvents">
            <summary>
            Called from the constructor to setup event listening
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.SetUndoHistoryManager">
            <summary>
            Sets this.undoHistoryManager with a new undo history manager
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetClickedPoint(System.Windows.Input.MouseEventArgs)">
            <summary>
            Gets the point corresponding to the mouse events in coordinates that can be used
            for comparison with rendered text lines
            </summary>
            <param name="e">mouse event arguments</param>
            <returns>The point corresponding to the mouse events in coordinates that can be used
            for comparison with rendered text lines</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.OnHostControlPreviewMouseRightButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the RequestContextMenuItems when the mouse is right-clicked
            </summary>
            <param name="sender">the editor control</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.OnHostControlPreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Raises the RequestContextMenuItems when the mouse is right-clicked
            </summary>
            <param name="sender">the editor control</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.EditorLineNumber">
            <summary>
            Returns the zero based editor line number
            </summary>
            <returns>the zero based editor line number</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.EditorColumnNumber">
            <summary>
            Returns the zero based editor column number
            </summary>
            <returns>the zero based editor column number</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.TextView_LayoutChanged(System.Object,Microsoft.VisualStudio.Text.Editor.TextViewLayoutChangedEventArgs)">
            <summary>
            Called to update the caret position and scrollbar visibility when the layout changes as a result of text being typed.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.Caret_PositionChanged(System.Object,Microsoft.VisualStudio.Text.Editor.CaretPositionChangedEventArgs)">
            <summary>
            Called to update the caret position when the caret moves arround by using the arrow keys.
            This is not triggered by entering text so we also need to update the caret position in TextView_LayoutChanged.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.Buffer_Changed(System.Object,Microsoft.VisualStudio.Text.TextContentChangedEventArgs)">
            <summary>
            Called when the buffer changes to track the characters that 
            can trigger intellisense in UpdateCaretPosition
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.StartTokenizationAndRefreshTaggers">
            <summary>
            As soon as the buffer changes this is called to reset braces, errors and outlining to none
            and start tokenization.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.Completion_AgentChanged(System.Object,Microsoft.VisualStudio.Text.Editor.SpaceReservationAgentChangedEventArgs)">
            <summary>
            Called from RemoveCompletionManager to actually remove the agent
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event parameters</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.CompletionSession_Dismissed(System.Object,System.EventArgs)">
            <summary>
            Called when the intellisense session is dismissed to reset fields used to control the session
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.GetLineStartAndLineTextUpToPosition(System.Int32,System.Int32@,System.String@)">
            <summary>
            Helper to get text and position information for intellisense
            </summary>
            <param name="caretBufferPosition">buffer position for the caret</param>
            <param name="lineStartPosition">position where the line wityh the caret starts</param>
            <param name="lineTextUpToCaret">text for the line up to the caret position</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.UpdateCaretPosition">
            <summary>
            Updates the line and column of the caret, and monitors characters for intellisense
            since the intellisense infrastructure is only prepared to be triggered after buffer
            and layout changes happen
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.HandleSpaceAfterParameterName(System.Int32)">
            <summary>
            Called from UpdateCaretPosition to handle a space after a parameter name
            </summary>
            <param name="caretBufferPosition">caret position in the buffer</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.HandleDotAfterNonWildCard(System.Int32)">
            <summary>
            Called from UpdateCaretPosition to handle a dot after non wild card
            </summary>
            <param name="caretBufferPosition">caret position in the buffer</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.HandleNewCharacter(System.Int32)">
            <summary>
            Called from UpdateCaretPosition to handle a new character
            </summary>
            <param name="caretBufferPosition">caret position in the buffer</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.OnPropertyChanged(System.String)">
            <summary>
            Trigers the PropertyChangedEvent if there are listeners.
            </summary>
            <param name="propertyName">Property that changed.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEEditor.RequestContextMenuItemsEventArgs">
            <summary>
            Arguments for the RequestContextMenuItems event
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.RequestContextMenuItemsEventArgs.position">
            <summary>Value of the Position property</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEEditor.RequestContextMenuItemsEventArgs.menuItems">
            <summary>Value of the MenuItems property</summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEEditor.RequestContextMenuItemsEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the RequestContextMenuItemsEventArgs class.
            </summary>
            <param name="position">Position of the request given as an index within the text view</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.RequestContextMenuItemsEventArgs.Position">
            <summary>
            Gets the position of the request given as an index within the text view; -1 indicates that the click occurred outside the text view.
            </summary>
            <remarks>
            If the context menu is requested with a mouse click the position corresponds to the coordinates of the click; if it is 
            requested with the "Application" key the position corresponds to the position of the caret.
            </remarks>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEEditor.RequestContextMenuItemsEventArgs.MenuItems">
            <summary>Gets the items for the context menu provided by the event subscriber</summary>
            <remarks>The subscriber to the RequestContextMenuItems event add to this collection any menu items it desires to display.</remarks>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEFile">
            <summary>
            A file opened in the application
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.powerShellContentType">
            <summary>
            The content type for the scripts
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.nonScriptContentType">
            <summary>
            The content type for non scripts
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.xmlContentType">
            <summary>
            The content type for xml
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.lastFileNumber">
            <summary> last number used for untitled files </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.doc">
            <summary>
            The doc instance used to save the file, load and save file contents
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.flagIsUntitled">
            <summary> true if the file has never been saved </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.flagIsSaved">
            <summary> false if the file has been changed since last saved </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.editor">
            <summary> editor used to display/edit the file </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.debuggerCurrentLineMark">
            <summary>
            The mark for the current line
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.debuggerCurrentLine">
            <summary>
            The mark for the current line
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.breakpointsByLine">
            <summary>
            Breakpoints on the current file indexed by line number
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.debugMode">
            <summary>
            Whether the file is in debug mode  
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.isRecovered">
            <summary>
            Indicates this file has been recovered from auto-saved
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.cachedFullPath">
            <summary>
            The last path in this.doc.FilePath before a SaveAs
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.addToMRU">
            <summary>
            File is added to MRU when true
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.isTemporaryRemote">
            <summary>
            Indicates that the ISE is a temporary file copied over from
            a remote session.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.#ctor">
            <summary>
            Prevents a default instance of the ISEFile class from being created.
            This is explicitly private to force the use of Add methods in ISEFileCollection.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.ISEFile.PropertyChanged">
            <summary>
            For INotifyPropertyChanged
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdate">
            <summary>
            This event is raised when the breakpoints need to be updated as the result of changes in the editor text
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.ISEFile.SaveRemoteFile">
            <summary>
            This event is raised when a temporary remote file is about to be saved.  Handler should return
            SaveSucceeded == true if remote file was successfuly saved on remote machine.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointStatus">
            <summary>
            Status of the breakpoints on a given line
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointStatus.None">
            <summary>the line has no breakpoints</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointStatus.Enabled">
            <summary>at least one breakpoint on the line is enabled</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointStatus.Disabled">
            <summary>all the breakpoints on the the line are disabled</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.IsSaved">
            <summary>
            Gets a value indicating whether the file has not been saved since last modified
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.IsUntitled">
            <summary>
            Gets a value indicating whether the file has never been previously saved
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.FullPath">
            <summary>
            Gets the full path of the file
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.Editor">
            <summary>
            Gets the editor used for this file
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.DisplayName">
            <summary>
            Gets the display name of this file
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.Encoding">
            <summary>
            Gets the original file encoding
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.IsRecovered">
            <summary>
            Gets a value indicating whether this file has been recovered from auto-saved
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.PowerShellContentType">
            <summary>
            Gets the content type for the scripts
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.XmlContentType">
            <summary>
            Gets the content type for the xml
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.IsScript">
            <summary>
            Gets a value indicating whether the extension is Ps1
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.IsPowerShellSourceCodeFile">
            <summary>
            Gets a value indicating whether if the extension is PS1 (script) or PSM1 (module)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.CanExecute">
            <summary>
            Gets a value indicating whether the extension is Ps1 and there is text in the script
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.ShouldSaveBeforeExecution">
            <summary>
            Gets a value indicating whether the file is not untitled and the file is unsaved
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.HasBreakpoints">
            <summary>
            Gets a value indicating whether the file has at least one breakpoint
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.Extension">
            <summary>
            Gets the extension of this file
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.FileName">
            <summary>
            Gets the file name
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.DebuggerCurrentLine">
            <summary>
            Gets the line the debugger is stopped at, or 0 if none
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.DebugMode">
            <summary>
            Gets or sets a value indicating whether debug mode is true
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.AddToMRU">
            <summary>
            When true this file is added to the MRU (most recently used) collection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.IsTemporaryRemote">
            <summary>
            Indicates that the ISE is a temporary file copied over from
            a remote session.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.Save">
            <summary>
            Saves the file to disk.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the file is not titled.</exception>
            <exception cref="T:System.IO.IOException">If could not save the file.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.Save(System.Text.Encoding)">
            <summary>
            Saves the file to disk.
            </summary>
            <param name="saveEncoding">Encoding to save the file with.</param>
            <exception cref="T:System.InvalidOperationException"> If the file is untitled.</exception>
            <exception cref="T:System.IO.IOException"> If could not save the file.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.SaveAs(System.String)">
            <summary>
            Writes the editor contents to disk.
            </summary>
            <param name="saveAsFileName">file name to save.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="saveAsFileName"/>  is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="saveAsFileName"/>  is empty.</exception>
            <exception cref="T:System.IO.IOException"> If could not save the file.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.SaveAs(System.String,System.Text.Encoding)">
            <summary>
            Writes the editor contents to disk.
            </summary>
            <param name="saveAsFileName">file name to save.</param>
            <param name="saveEncoding">Encoding to save the file with.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="saveAsFileName"/> is null or empty.</exception>
            <exception cref="T:System.IO.IOException"> If could not save the file.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.CreateTitled(System.String)">
            <summary>
            Constructs a new file and reads its contents into the editor.
            The file is not going to be untitled.
            </summary>
            <param name="fullPath">Full path to the file.</param>
            <exception cref="T:System.IO.IOException">If could not load the file.</exception>
            <returns>A new file and reads its contents into the editor.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.CreateTitled(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new file and reads its contents into the editor.
            The file is not going to be untitled.
            </summary>
            <param name="fullPath">Full path to the file.</param>
            <param name="addToMRU">File added to MRU after being opened when true.</param>
            <param name="isTemporaryRemote">When true indicates a temporary remote file and creates a read-only ISE file.</param>
            <exception cref="T:System.IO.IOException">If could not load the file.</exception>
            <returns>A new file and reads its contents into the editor.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.CreateUntitled(System.String)">
            <summary>
            Creates a new Untitled file.
            </summary>
            <param name="extension">Extension of the file being created.</param>
            <returns>The newly created Untitled file.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.GetUntitledName(System.String)">
            <summary>
            Gets an untitled file name for the given extension
            </summary>
            <param name="extension">The file name's extension</param>
            <returns>an untitled file name for the given extension</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.GetUntitledName(System.String,System.Int32)">
            <summary>
            Searches folder for the last file name to be used (like Untitled 9.ps1)
            </summary>
            <param name="extension">Something like '.ps1'</param>
            <param name="targetFileNumber">
            The number we would like to get the untltled name numberd with.
            If the name has been taken in UserSettings.Default.LastFilePath
            we will try higher numbers.
            </param>
            <returns>The last file name that was found on folder</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.NeedsUnicodeUpgrade(System.Text.Encoding,Microsoft.PowerShell.Host.ISE.ISEEditor)">
            <summary>
            Returns true if encoding is not uncode and if there are characters in the editor
            that have to be saved as unicode.
            </summary>
            <param name="encoding">Encoding the file is going to be saved on</param>
            <param name="editor">Editor whoith text to check</param>
            <returns>
            true if encoding is not uncode and if there are characters in the editor
            that have to be saved as unicode.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.SetRecoveredFullPath(System.String)">
            <summary>
            Sets the full path of a recovered file after the file has been loaded from its auto saved 
            location.
            We do not use the public properties because they could trigger a file reloading from the fullPath
            and this is called when the editor already has the correct text from the auto saved path.
            </summary>
            <param name="newFullPath">full path to be set</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.TrySaveCopy(System.String)">
            <summary>
            Tries to save a copy of the file to disk in the given path
            </summary>
            <param name="fullPathToWrite">full path of the file to save</param>
            <returns>true if it was a succesfull write</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.WriteFileToDisk(System.String,System.Text.Encoding)">
            <summary>
            Writes the file to disk in the given path
            </summary>
            <param name="fullPathToWrite">full path of the file to save</param>
            <param name="saveEncoding">encoding to be used</param>
            <exception cref="T:System.IO.IOException">If could not save the file.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.GetFileContents">
            <summary>
            Returns the contents of the file as a byte array.
            </summary>
            <returns>File contents</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.SetDebuggerCurrentPosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            Highlights the current line at the given position and scrolls the editor
            </summary>
            <param name="lineNumber">target line</param>
            <param name="startColumn">start position</param>
            <param name="endColumn">end position</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.ResetDebuggerCurrentLine">
            <summary>
            Removes the highlight from the current line
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.GetCurrentLine">
            <summary>
            Queries for the current line
            </summary>
            <returns>The current line</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.GetBreakpointsAtLine(System.Int32)">
            <summary>
            Queries for breakpoints on the given line
            </summary>
            <param name="lineNumber">The line to look for</param>
            <returns>A list of the breakpoints on the given line, or null if there are no breakpoints</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.SetBreakpoint(System.Management.Automation.LineBreakpoint)">
            <summary>
            Sets the given breakpoint 
            </summary>
            <param name="breakpoint">Breakpoint to set</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.RemoveBreakpoint(System.Management.Automation.LineBreakpoint)">
            <summary>
            Removes the given breakpoint 
            </summary>
            <param name="breakpoint">Breakpoint to remove</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.UpdateBreakpoint(System.Management.Automation.LineBreakpoint)">
            <summary>
            Updates the status (enable/disabled) of the given breakpoint 
            </summary>
            <param name="breakpoint">Breakpoint to update</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.GetBreakpointStatusAtLine(System.Int32)">
            <summary>
            Returns the status of the breakpoints at the given line
            </summary>
            <param name="lineNumber">Line to check</param>
            <returns>breakpoint status at the given line</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.ClearBreakpoints">
            <summary>
            Clears the breakpoints on the current file
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.GetIsScript(System.String)">
            <summary>
            Returns true if the extension is ps1
            </summary>
            <param name="extension">Extension to check</param>
            <returns>true if the extension is ps1</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.GetIsPowerShellSourceCodeFile(System.String)">
            <summary>
            Returns true if the extension is ps1, psm1, psd1 or pssc
            </summary>
            <param name="filePath">File path to check</param>
            <returns>true if the file is a known PowerShell file type</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.GetIsXmlSourceCodeFile(System.String)">
            <summary>
            Returns true if the file can be interpreted as an XML document.
            </summary>
            <param name="filePath">File path to check</param>
            <returns>True if the file has a known XML extension or starts with the XML preamble.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.CheckIfLineIsXmlPreamble(System.String)">
            <summary>
            Looks at the beginning of the contentLine to determine if it starts
            with the XML preamble.  This helps to determine if a file is in fact
            an XML file even if its extension is unknown.
            </summary>
            <param name="contentLine">The line of content to check.</param>
            <returns>True if the line appears to be an XML preamble.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.GetContentTypeForExtension(System.String)">
            <summary>
            Gets the content type for the given extension
            </summary>
            <param name="filePath">File path to check</param>
            <returns>The content type for the given file</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.FindBreakpoint(System.Management.Automation.LineBreakpoint,Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointInfo@,System.Int32@)">
            <summary>
            Looks for the BreakpointInfo of a given breakpoint
            </summary>
            <param name="breakpoint">The breakpoint to look for</param>
            <param name="breakpointInfo">The BreakpointInfo associated to the given breakpoint, or null if the breakpoint is not found</param>
            <param name="index">The index of the breakpoint within BreakpointInfo, or -1 if the breakpoint is not in the list</param>
            <returns>true if the breakpoint was found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.UpdateBreakpointInfo(Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointInfo)">
            <summary>
            Updates the given BreakpointInfo Adornment and Status
            </summary>
            <param name="breakpointInfo">The item to update</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.MarkBreakpoint(Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointInfo)">
            <summary>
            Creates an adorment for the given breakpoint 
            </summary>
            <param name="breakpointInfo">breakpoint information</param>
            <returns>the marking for the breakpoint</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.CreateEditorAndGetFileContents(System.String)">
            <summary>
            Read the file from the full path and create the corresponding Editor object
            </summary>
            <param name="fullPathToRead">full path to the file to read</param>
            <exception cref="T:System.IO.IOException">If could not load the file. The exception message can be displayed to the end user.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.CreateBaseEditorAndDocument(System.String)">
            <summary>
            Creates this.editor and this.doc setting the FullPath
            </summary>
            <param name="fullPath">file full path</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.SetEditorAndDocumentEvents">
            <summary>
            Creates the Editor object when the extension changes
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.Doc_DirtyStateChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the IsDirty state of the document changes to update this.IsSaved
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.TextBuffer_Changing(System.Object,Microsoft.VisualStudio.Text.TextContentChangingEventArgs)">
            <summary>
            Called when the text is changing in the editor to pottentially prevent changes during debugging
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.OnEditorTextBufferChanged(System.Object,Microsoft.VisualStudio.Text.TextContentChangedEventArgs)">
            <summary>
            Updates the breakpoints when the editor text changes
            </summary>
            <param name="sender">the text buffer</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.OnEditorRequestContextMenuItems(System.Object,Microsoft.PowerShell.Host.ISE.ISEEditor.RequestContextMenuItemsEventArgs)">
            <summary>
            Sets the editor's context menu
            </summary>
            <param name="sender">the editor control</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.ReloadDocument">
            <summary>
            Reads the contents of the file into the editor
            </summary>
            <returns>the file contrns as a string</returns>
            <exception cref="T:System.IO.IOException">If could not load the file. The exception message can be displayed to the end user.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.OnPropertyChanged(System.String)">
            <summary>
            Called to invoke this.PropertyChanged, if needed, when the property has changed
            </summary>
            <param name="name">property name</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.OnRequestBreakpointUpdate(Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdateEventArgs)">
            <summary>
            Raises the RequestBreakpointUpdate event
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdateEventArgs">
            <summary>
            Arguments for the RequestBreakpointUpdate event
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdateEventArgs.moveUpdates">
            <summary>value of the MoveUpdates property</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdateEventArgs.removeUpdates">
            <summary>value of the RemoveUpdates property</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdateEventArgs.overwriteUpdates">
            <summary>value of the OverwriteUpdates property</summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdateEventArgs.#ctor">
            <summary>
            Initializes a new instance of the RequestBreakpointUpdateEventArgs class.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdateEventArgs.RemoveUpdates">
            <summary>Gets the breakpoints that need to be removed</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdateEventArgs.OverwriteUpdates">
            <summary>Gets the scripts whose breakpoints need to be overwritten</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdateEventArgs.MoveUpdates">
            <summary>Gets the breakpoints that need to be moved</summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointMoveUpdate">
            <summary>
            Data for move breakpoint updates
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointMoveUpdate.breakpoints">
            <summary>value of the Breakpoints property</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointMoveUpdate.targetLine">
            <summary>value of the TargetLine property</summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointMoveUpdate.#ctor(System.Collections.Generic.List{System.Management.Automation.LineBreakpoint},System.Int32)">
            <summary>
            Initializes a new instance of the BreakpointMoveUpdate class.
            Creates a request to move breakpoints within the same file
            </summary>
            <param name="breakpoints">breakpoints to move</param>
            <param name="targetLine">line to move to</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointMoveUpdate.Breakpoints">
            <summary>Gets the breakpoints that need to be moved</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointMoveUpdate.TargetLine">
            <summary>Gets the line to move the breakpoints to</summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointOverwriteUpdate">
            <summary>
            Data for move breakpoint overwrites
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointOverwriteUpdate.breakpoints">
            <summary>value of the Breakpoints property</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointOverwriteUpdate.targetScript">
            <summary>value of the TargetScript property</summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointOverwriteUpdate.#ctor(System.Collections.Generic.List{System.Management.Automation.LineBreakpoint},System.String)">
            <summary>
            Initializes a new instance of the BreakpointOverwriteUpdate class.
            Creates a request to overwrite the breakpoints on a given file
            </summary>
            <param name="breakpoints">breakpoints to move</param>
            <param name="targetScript">script to overwrite</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointOverwriteUpdate.Breakpoints">
            <summary>Gets the breakpoints that need to be moved</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointOverwriteUpdate.TargetScript">
            <summary>Gets the script whose breakpoints will be overwritten</summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointInfo">
            <summary>
            Information about the breakpoints on a given line
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointInfo.breakpoints">
            <summary>Value of the Breakpoints property</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointInfo.adornment">
            <summary>Value of the Adornment property</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointInfo.status">
            <summary>Value of the Adornment property</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointInfo.Breakpoints">
            <summary>Gets the breakpoints on a given line</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointInfo.Adornment">
            <summary>Gets or sets the adornment, or null if the breakpoints are outside the editor range</summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFile.BreakpointInfo.Status">
            <summary>Gets or sets status of the breakpoints on the line</summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.SaveRemoteFileEventArgs">
            <summary>
            Event arguments for the SaveRemoteFile event.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.SaveRemoteFileEventArgs.SaveSucceeded">
            <summary>
            Set to true by event handler if remote file save succeeded.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEFileCollection">
            <summary>
            Collection of ISEFile
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFileCollection.fileDictionary">
            <summary>
            dictionary of all files in the collection
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEFileCollection.selectedFile">
            <summary>
            The file currently selected
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.#ctor">
            <summary>
            Initializes a new instance of the ISEFileCollection class.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFileCollection.SelectedFile">
            <summary>
            Gets or sets the currently selected file.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEFileCollection.FileDictionary">
            <summary>
            Gets the dictionary of all files in the collection
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.SetSelectedFile(Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Selects the <paramref name="file"/>. 
            </summary>
            <param name="file">File to be selected.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.Remove(Microsoft.PowerShell.Host.ISE.ISEFile,System.Boolean)">
            <summary>
            Removes the file.
            </summary>
            <param name="file">file to remove</param>
            <param name="force">true to remove the file even if it has not been saved.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.Add(System.String)">
            <summary>
            Adds a new file to the collection.
            </summary>
            <param name="fullPath">file name.</param>
            <returns>the added file</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.Add(System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a new file to the collection.
            </summary>
            <param name="fullPath">file name</param>
            <param name="addToMRU">True if file added to MRU on open</param>
            <param name="isTemporaryRemote">True if file is a temporary remote file and is to be read-only</param>
            <returns>The added file</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.Add">
            <summary>
            Adds a new untitled .ps1 file.
            </summary>
            <returns>the added file</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.JoinFiles(System.Collections.Generic.IEnumerable{Microsoft.PowerShell.Host.ISE.ISEFile})">
            <summary>
            Gets the list of files as a string
            </summary>
            <param name="files">files to join in a string</param>
            <returns>returns the list of files as a string</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.ApplicationUpdateSavedAsFile(System.String,Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Updates the tables with files when savedAsFile is saved as
            </summary>
            <param name="oldName">name before the save as</param>
            <param name="savedAsFile">file after the saveAs</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.AlreadyHasFile(System.String,System.String)">
            <summary>
            Returns true if currentName is not newPath and if the newPath is already opened in any runspace
            </summary>
            <param name="currentPath">current file path</param>
            <param name="newPath">previous file path</param>
            <returns>true if currentName is not newName and if the newName is already opened in any runspace</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.ApplicationTryGetValue(System.String,Microsoft.PowerShell.Host.ISE.ISEFile@)">
            <summary>
            Returns true and the file when an file by the name fileName is opened in any runspace with the name fileName
            </summary>
            <param name="fileName">fileName for the file</param>
            <param name="file">ISEFile returned if found</param>
            <returns>true when an file by the name fileName is opened in any runspace with the name fileName</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.InternalSetSelectedFile(Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Selects the <paramref name="file"/>. This allows setting the selected opende file to null.
            </summary>
            <param name="file">File to be selected.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.TryGetValue(System.String,Microsoft.PowerShell.Host.ISE.ISEFile@)">
            <summary>
            Returns true and the file when an ISEFile by the name fileName is opened in this collection
            </summary>
            <param name="fileName">fileName for the ISEFile</param>
            <param name="file">ISEFile returned if found</param>
            <returns>true when a file by the name fileName is opened in this collection</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.InternalAdd(System.Int32,Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Adds the file if not present, otherwise returns existing file.
            </summary>
            <param name="index">where to add the file</param>
            <param name="item">file to be added</param>
            <returns>the file added or present</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.InsertItem(System.Int32,Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Overridden to throw an exception to block a direct Insert or an Add given that there is no constructor for <seealso cref="T:Microsoft.PowerShell.Host.ISE.ISEFile"/>.
            </summary>
            <param name="index">index of the item to be inserted</param>
            <param name="item">item to be inserted</param>
            <exception cref="T:System.NotSupportedException">When calling this method</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.SetItem(System.Int32,Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Overridden to throw an exception blocking a set.
            </summary>
            <param name="index">index of the item to be set.</param>
            <param name="item">new PowerShellTab at the <paramref name="index"/>.</param>
            <exception cref="T:System.NotSupportedException">When calling this method</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.ClearItems">
            <summary>
            Makes sure ClearItems calls RemoveItem on each item.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the file at position <paramref name="oldIndex"/> to <paramref name="newIndex"/>.
            </summary>
            <param name="oldIndex">position to move file from.</param>
            <param name="newIndex">position to move fole to.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.RemoveItem(System.Int32)">
            <summary>
            Overrides default behavior to throw if IsDirty is set to false
            </summary>
            <param name="index">index of the item to remove</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEFileCollection.UpdateSavedAsFile(System.Collections.Generic.Dictionary{System.String,Microsoft.PowerShell.Host.ISE.ISEFile},System.String,Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Called from ApplicationUpdateSavedAsFile to update a single table after a SaveAs operation in savedAsFile
            </summary>
            <param name="files">table to be updated</param>
            <param name="oldName">name before the save as</param>
            <param name="savedAsFile">file after the saveAs</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTab">
            <summary>
            A runspace object to be opened by the application
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.MaxAddOnToolCount">
            <summary>
            Maximum total number of AddOn tools. Internal for test use.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.InvokeSynchronousDefaultTimeout">
            <summary>
            Default timeout for calling InvokeSynchronous
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.OutputTimerMilliSeconds">
            <summary>
            Number of miliseconds between output flushes. This might make it into an Options dialog.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.intellisenseTimeoutTimerSync">
            <summary>
            synchronization object used for intellisense timeout
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.showCommandControl">
            <summary>
            The show-command displayed in this tab
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.updateShowCommandsStateOnUpdatePrompt">
            <summary>
            value indicating whether the state of the ShowCommand window should be updated on UpdatePrompt
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.showCommands">
            <summary>
            value indicating whether we are displaying the embedded show-command in this tab
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.nestedPromptLevel">
            <summary>
            The nested prompt level
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.progressSource">
            <summary>
            The current progress objects in this PowerShellTab
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.evaluatingIntellisense">
            <summary>
            set to true while intellisense is being evaluated and queried when running the Console pane. 
            It is only set and queried in the UI thread
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.intellisenseStopper">
            <summary>
            Timer used while intellisense is being evaluated to eventually stop intellisense
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.leaveIntellisenseTimeoutMessage">
            <summary>
            flag used to regulate if stopping intellisense should leave a timeput message
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.consoleJustGotFocus">
            <summary>
            value indicating whether the console was the last editor that got focus
            This is used in ISEZoomMouseProcessor to allow for a click from outside the
            Console to go to input
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.zoomLevel">
            <summary>
            Font Size for the Tab
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.timer">
            <summary>
            Timer used for output window
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.consolePane">
            <summary>
            the output editor
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.historyIndex">
            <summary>
            Index that the Up/Down Arrow are currently seeing from the CommandHistory
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.skipNextHistoryDecrement">
            <summary>
            Set to true when the command run is a previous history command
            so that up will go tp that command and up will go to the next. 
            This is equivalent of placing the history index between the history run
            and the next command
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.scratchCommandBuffer">
            <summary>
            set with the text in the console so that an arrow up followed by
            an arrow down doesn't loost the current typed text
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.bufferChangedBecauseOfHistory">
            <summary>
            Used to know if the scratchInputBuffer should be updated on buffer changed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.commandCompletion">
            <summary>
            Command completion object
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.replacementLength">
            <summary>
            The replacement length, used after the first tab completion to keep track of how much was replaced
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.lastCommandCompletionCaretPosition">
            <summary>
            last position where command completion was executed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.lastCommandCompletionEditor">
            <summary>
            last editor where command completion was executed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.LocalAppPath">
            <summary>
            Partial local application path for temporary remote files.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.tempRemoteSourceLocation">
            <summary>
            Full path for temporary remote files.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.sessionRemoteSourcePath">
            <summary>
            Current remote session instance path.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.remoteFiles">
            <summary>
            Collection of currently open remote files.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetRemoteContentsScript">
            <summary>
            Script to retrieve source script from remote machine.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.initialCommand">
            <summary>
            Initial command to be run after running the profiles
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.pendingCommand">
            <summary>
            a pending command to be run once the PowerShellTab is not running a command
            Used by show-command to run a pending command
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.initialCommandHasRun">
            <summary>
            Value indicating the initial command has already run
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.addOnsMenu">
            <summary>
            The root of the tools menu.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.addToHistorySettings">
            <summary>
            invocation settings instructing the command should be added to the history
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.expandedScript">
            <summary>
            True if the scripts are visible
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.horizontalAddOnToolsPaneOpened">
            <summary>
            True if the horizontal AddOn tools pane is opened
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.verticalAddOnToolsPaneOpened">
            <summary>
            True if the vertical AddOn tools pane is opened
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.displayName">
            <summary>
            the display name
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.files">
            <summary>
            Files opened in the PowerShell tab.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.prompt">
            <summary>prompt displayed</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.graphicalPrompt">
            <summary>Prompt displayed</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.promptBracket">
            <summary>Prompt bracket displayed</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.graphicalPromptAutomationName">
            <summary>Prompt automation name</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.statusText">
            <summary>execution status</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.commandHistory">
            <summary>comand history</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.runspaceRef">
            <summary>Reference to runspace used for command execution</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.runningCommand">
            <summary>Reference to a command running on a pushed runspace (runspaceRef)</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.powershellInvoker">
            <summary>The current PowerShell instance used for command execution</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.powershellDebugInvoker">
            <summary>Helper object to invoke commands on the debugger when in debug mode.</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.savedPowerShells">
            <summary>PowerShell instances saved when entering a nested prompt</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.outputControlBuffer">
            <summary>Data added to this buffer will be displayed in the output control</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.debuggerStopEventArgs">
            <summary>Arguments of the DebuggerStop event; null if we are not in the debugger</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.debuggerCommandProcessor">
            <summary>The pre-processor for debugger commands</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.debuggedPowerShell">
            <summary>The PowerShell instance that entered the debugger</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.debuggedFile">
            <summary>The file where the debugged code is</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.pipelineThreadBeginExecution">
            <summary>When in a nested prompt, this event signals the thread executing the parent pipeline that it needs to execute an action</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.pipelineThreadExecutionCompleted">
            <summary>This event is signaled by the the pipeline thread when it completes an action</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.pipelineThreadAction">
            <summary>The action that the pipeline thread must execute</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.breakpoints">
            <summary>Breakpoints in the current runspace</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.savedBreakpoints">
            <summary>Saved local session breakpoints during remote session (pushed runspace)</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.debuggerReadOnlyFiles">
            <summary>List of files that have been marked as read-only while the debugger is active</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.enabledBreakpoints">
            <summary>Count of enabled breakpoints</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.disabledBreakpoints">
            <summary>Count of disabled breakpoints</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.flagIsAsynchronousOperationDone">
            <summary>
            Flag set to false at the beginning of an asynchronous operation and reset to true
            when the operation is completelly done. This is used from test code
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.host">
            <summary>
            The host associated with this runspace
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.unsupportedConsoleApplications">
            <summary>
            Table with the unsupported console applications
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.objectModelRoot">
            <summary>
            PSGHost used as a value to $psIse.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.objectModelRootForAddOnTools">
            <summary>
            Root of the object model for AddOnTools
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.previousSelectedFile">
            <summary>
            Auxiliar used to stop monitoring GotFocus on a previouslly selected ISEFile editor.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.lastEditorWithFocus">
            <summary>
            Last editor between input, output and script editors that got the keyboard focus.
            This is used when going back and forth between runspaces so we place the focus
            on the same place where it was left.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.disposing">
            <summary>
            True when the current instance is being disposed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.layout">
            <summary>
            used to layout controls
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.horizontalAddOnTools">
            <summary>
            Horizontal AddOn tools
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.verticalAddOnTools">
            <summary>
            Vertical AddOn tools
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.visibleHorizontalAddOnTools">
            <summary>
            Subset of <seealso cref="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.horizontalAddOnTools"/> with visible tools.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.visibleVerticalAddOnTools">
            <summary>
            Subset of <seealso cref="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.visibleVerticalAddOnTools"/> with visible tools.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.isReadyForNextCommand">
            <summary>
            Indicates whether there is no pending asynchronous operation and no pipeline running
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.currentState">
            <summary>
            The state for the current powerShellInvoker that changes when we enter a nested prompt
            like in the debugger scenario.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.isPipelineRunning">
            <summary>
            indicates whether the nested pipeline is running in the runspace
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.suspendCanInvokeNotification">
            <summary>
            Indicates we should not notify that the CanINvoke property changed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.intellisenseToTabTransition">
            <summary>
            Set with information that allows a transition from tab completion to intellisense
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab._tracer">
            <summary>
            PowerShell Trace Source to log ETW events
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.allSnippets">
            <summary>
            Set with information a list of all snippets loaded into this tab
            This includes references to global snippets (incl default ones)
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.#cctor">
            <summary>
            Initializes static members of the PowerShellTab class.
            Installs the keyboard filter for all editors
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.#ctor">
            <summary>
            Initializes a new instance of the PowerShellTab class.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteCallback">
            <summary>
            Used in ExecuteAndCallback to call back when the script is done executing
            </summary>
            <param name="output">the results of script execution</param>
            <param name="errors">errors running the script</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTab.NoArgs">
            <summary>
            Used as a helper to create delegates
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.PowerShellTab.PropertyChanged">
            <summary>
            For INotifyPropertyChanged
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.PowerShellTab.AddOnToolPaneOpenedOrClosed">
            <summary>
            Triggered when an AddOn tool pane is closed
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.PowerShellTab.AddOnToolVisibilityChanged">
            <summary>
            Triggered when an AddOn tool is closed
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.PowerShellTab.AddOnToolAddedOrRemoved">
            <summary>
            Triggered when an AddOn tool is removed
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.PowerShellTab.ZoomLevelChanged">
            <summary>
            For ZoomLevel PropertyChanged notification
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecutionStateChanged">
            <summary>
            Triggered when the state of the current command execution changes
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.PowerShellTab.SelectedFileNeedsFocus">
            <summary>
            Raised when the runspace changes the selected file 
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.PowerShellTab.DisplayNameChanging">
            <summary>
            Raised when the display name is changing to let the ISEPowerShellTabCollection throw an exception for duplicate names
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTab.GraphicalPromptType">
            <summary>
            Types of graphical prompts
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.GraphicalPromptType.Normal">
            <summary>
            The normal prompt
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.GraphicalPromptType.Debugger">
            <summary>
            Debugger prompt
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.GraphicalPromptType.NestedPrompt">
            <summary>
            Prompt for nested powershells
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.AddOnsMenu">
            <summary>
            Gets the root of the tools menu.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.StatusText">
            <summary>
            Gets the Ruunspace status text
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExpandedScript">
            <summary>
            Gets or sets a value indicating whether scripts are expanded
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.ShowCommands">
            <summary>
            Gets or sets a value indicating whether we are displaying the embedded show-command in this tab
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.HorizontalAddOnToolsPaneOpened">
            <summary>
            Gets or sets a value indicating whether the horizontal AddOn tools pane is opened
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.ZoomLevel">
            <summary>
            Get or Sets the Zoom level to be broadcast to all the plugins
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.VerticalAddOnToolsPaneOpened">
            <summary>
            Gets or sets a value indicating whether the vertical AddOn tools pane is opened
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.Prompt">
            <summary>
            Gets the current prompt text.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.ConsolePane">
            <summary>
            Gets the output editor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.Files">
            <summary>
            Gets the script files currently opened.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.Snippets">
            <summary>
            Gets the tab specific snippets for this tab currently loaded.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanInvoke">
            <summary>
            Gets a value indicating whether a script can be executed with the <seealso cref="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.Invoke(System.Management.Automation.ScriptBlock)"/> method.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.HorizontalAddOnTools">
            <summary>
            Gets the Horizontal AddOn tools
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.VerticalAddOnTools">
            <summary>
            Gets the Vertical AddOn tools
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.VisibleHorizontalAddOnTools">
            <summary>
            Gets the subset of <seealso cref="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.HorizontalAddOnTools"/> with visible tools.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.VisibleVerticalAddOnTools">
            <summary>
            Gets the subset of <seealso cref="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.VerticalAddOnTools"/> with visible tools.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PendingCommand">
            <summary>
            Gets or sets a pending command to be run once the PowerShellTab is not running a command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.ShowCommandControl">
            <summary>
            Gets the show-command displayed in this tab
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.UpdateShowCommandsStateOnUpdatePrompt">
            <summary>
            Gets or sets a value indicating whether the state of the ShowCommand window should be updated on UpdatePrompt
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.HistoryIndex">
            <summary>
            Gets the index that the Up/Down Arrow are currently seeing from the CommandHistory
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.NestedPromptLevel">
            <summary>
            Gets the nested prompt level
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.ProgressSource">
            <summary>
            Gets the current progress objects in this PowerShellTab
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.InitialCommand">
            <summary>
            Gets or sets the initial command to be run after running the profiles
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.ConsoleJustGotFocus">
            <summary>
            Gets or sets a value indicating whether the console was the last editor that got focus
            This is used in ISEZoomMouseProcessor to allow for a click from outside the
            Console to go to input
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.LastEditorWithFocus">
            <summary>
            Gets or sets the last editor between input, output and script editors that got the keyboard focus.
            This is used when going back and forth between runspaces so we place the focus
            on the same place where it was left.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.ObjectModelRoot">
            <summary>
            Gets the PSGHost used as a value to $psIse.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanStopCurrentCommand">
            <summary>
            Gets a value indicating whether there is a current running command
            </summary>
            <returns>true if there is a current running command</returns>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteConsole">
            <summary>
            Gets a value indicating whether we can execute the Console pane.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteScript">
            <summary>
             Gets a value indicating whether we can execute the currently selected script.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteSelection">
            <summary>
             Gets a value indicating whether we can execute the text currently selected in the script editor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.OutputInternal">
            <summary>
            Gets the output editor.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteDebuggerCommand">
            <summary>
             Gets a value indicating whether we can execute any of the debugger commands
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteRunContinue">
            <summary>
             Gets a value indicating whether we can execute the "Run/Continue" command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteBreakAllDebugger">
            <summary>
            Returns true if this tab can execute the "Break All" command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteToggleBreakpoint">
            <summary>
             Gets a value indicating whether we can execute the "toggle breakpoint" command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteEnableBreakpoint">
            <summary>
            Gets a value indicating whether we can execute the "enable breakpoint" command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteDisableBreakpoint">
            <summary>
             Gets a value indicating whether we can execute the "disable breakpoint" command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteRemoveAllBreakpoints">
            <summary>
             Gets a value indicating whether we can execute the "remove all breakpoints" command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteEnableAllBreakpoints">
            <summary>
             Gets a value indicating whether we can execute the "enable all breakpoints" command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteDisableAllBreakpoints">
            <summary>
             Gets a value indicating whether we can execute the "disable all breakpoints" command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteListBreakpoints">
            <summary>
             Gets a value indicating whether we can execute the "list breakpoints" command
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.InNestedPrompt">
            <summary>
            Gets a value indicating whether the runspace is in a nested prompt
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.InDebugger">
            <summary>
            Gets a value indicating whether the runspace is in the debugger 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.GraphicalPrompt">
            <summary>
            Gets the graphical prompt to be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PromptBracket">
            <summary>
            Gets the prompt bracket to be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.GraphicalPromptAutomationName">
            <summary>
            Gets the prompt automation name.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CommandHistory">
            <summary>
            Gets the command history
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.RunspaceRef">
            <summary>
            Gets a reference to the runspace pool used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.IsAsynchronousOperationDone">
            <summary>
            Gets or sets a value indicating whether we are running a command.
            This is set to false at the beginning of an asynchronous operation and reset to true
            when the operation is completelly done. This is used from test code
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.Host">
            <summary>
            Gets or sets the GPSHost associated with this runspace
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.IsReadyForNextCommand">
            <summary>
             Gets or sets a value indicating whether there is no pending asynchronous operation and no pipeline running
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.Layout">
            <summary>
            Gets a value used to layout controls
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.HasSnippetsToShow">
            <summary>
            Gets a value indicating whether any snippets would be displayed upon 'Show Snippets'
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.IsRemoteSession">
            <summary>
             Gets a value indicating whether the current runspace is remote
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CanExecuteBreakpointCommand">
            <summary>
             Gets a value indicating whether we can execute any of the breakpoint commands (toggle, enable, disable, remove)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.IsPipelineRunning">
            <summary>
             Gets or sets a value indicating whether there is a pipeline running in the runspace
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CurrentState">
            <summary>
            Gets or sets the current powerShellInvoker that changes when we enter a nested prompt
            like in the debugger scenario.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.Invoke(System.Management.Automation.ScriptBlock)">
            <summary>
            Executes the given script in the runspace.
            </summary>
            <param name="script">script to be executed.</param>
            <exception cref="T:System.ArgumentNullException">if script is null</exception>
            <exception cref="T:System.ArgumentException">if cannot execute</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.Invoke(System.String)">
            <summary>
            Executes the given script in the runspace.
            </summary>
            <param name="script">script to be executed.</param>
            <exception cref="T:System.ArgumentNullException">if script is null</exception>
            <exception cref="T:System.ArgumentException">if cannot execute</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.InvokeSynchronous(System.Management.Automation.ScriptBlock)">
            <summary>
            Invokes the script synchronouslly returning the results instead of placing them in the output
            By default, scripts are executed in a local scope and will time out if they take longer than half a second to run.
            This method is intended for the quick evaluation of a script, with minimal side effects for applications like a watch window.
            </summary>
            <param name="script">The script to run.</param>
            <returns>The results of running the script.</returns>
            <exception cref="T:System.ArgumentNullException">if script is null.</exception>
            <exception cref="T:System.InvalidOperationException">if an script is already running.</exception>
            <exception cref="T:System.Management.Automation.RuntimeException">For any errors executing the script. If multiple errors are found running the script, only the first will be thrown as an exception.</exception>
            <exception cref="T:System.TimeoutException">If half a second has passed and the command has not completed.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.InvokeSynchronous(System.Management.Automation.ScriptBlock,System.Boolean)">
            <summary>
            Invokes the script synchronouslly returning the results instead of placing them in the output
            By default scripts will time out if they take longer than half a second to run.
            This method is intended for the quick evaluation of a script, with minimal side effects for applications like a watch window.
            </summary>
            <param name="script">The script to run.</param>
            <param name="useNewScope">True to use a new scope</param>
            <returns>The results of running the script.</returns>
            <exception cref="T:System.ArgumentNullException">if script is null.</exception>
            <exception cref="T:System.InvalidOperationException">if an script is already running.</exception>
            <exception cref="T:System.Management.Automation.RuntimeException">For any errors executing the script. If multiple errors are found running the script, only the first will be thrown as an exception.</exception>
            <exception cref="T:System.TimeoutException">If half a second has passed and the command has not completed.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.InvokeSynchronous(System.String)">
            <summary>
            Invokes the script synchronouslly returning the results instead of placing them in the output
            By default, scripts are executed in a local scope and will time out if they take longer than half a second to run.
            This method is intended for the quick evaluation of a script, with minimal side effects for applications like a watch window.
            </summary>
            <param name="script">The script to run.</param>
            <returns>The results of running the script.</returns>
            <exception cref="T:System.ArgumentNullException">if script is null.</exception>
            <exception cref="T:System.InvalidOperationException">if an script is already running.</exception>
            <exception cref="T:System.Management.Automation.RuntimeException">For any errors executing the script. If multiple errors are found running the script, only the first will be thrown as an exception.</exception>
            <exception cref="T:System.TimeoutException">If half a second has passed and the command has not completed.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.InvokeSynchronous(System.String,System.Boolean)">
            <summary>
            Invokes the script synchronouslly returning the results instead of placing them in the output
            By default scripts will time out if they take longer than half a second to run.
            This method is intended for the quick evaluation of a script, with minimal side effects for applications like a watch window.
            </summary>
            <param name="script">The script to run.</param>
            <param name="useNewScope">True to use a new scope</param>
            <returns>The results of running the script.</returns>
            <exception cref="T:System.ArgumentNullException">if script is null.</exception>
            <exception cref="T:System.InvalidOperationException">if an script is already running.</exception>
            <exception cref="T:System.Management.Automation.RuntimeException">For any errors executing the script. If multiple errors are found running the script, only the first will be thrown as an exception.</exception>
            <exception cref="T:System.TimeoutException">If half a second has passed and the command has not completed.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.InvokeSynchronous(System.String,System.Boolean,System.Int32)">
            <summary>
            Invokes the script synchronously returning the results instead of placing them in the output
            This method is intended for the quick evaluation of a script, with minimal side effects for applications like a watch window.
            </summary>
            <param name="script">The script to run.</param>
            <param name="useNewScope">True to use a new scope</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or a negative value like TimeOut.Infinite to wait indefinitely.</param>
            <returns>The results of running the script.</returns>
            <exception cref="T:System.ArgumentNullException">if script is null.</exception>
            <exception cref="T:System.InvalidOperationException">if an script is already running.</exception>
            <exception cref="T:System.Management.Automation.RuntimeException">For any errors executing the script. If multiple errors are found running the script, only the first will be thrown as an exception.</exception>
            <exception cref="T:System.TimeoutException">If millisecondsTimeout have passed and the command has not completed.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.InvokeSynchronousCommand(System.String,System.Boolean,System.Int32)">
            <summary>
            Invokes the command synchronously returning the results instead of placing them in the output
            This method is intended for the quick evaluation of a script, with minimal side effects for applications like a watch window.
            </summary>
            <param name="command">The command to run.</param>
            <param name="useNewScope">True to use a new scope</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or a negative value like TimeOut.Infinite to wait indefinitely.</param>
            <returns>The results of running the script.</returns>
            <exception cref="T:System.ArgumentNullException">if command is null.</exception>
            <exception cref="T:System.InvalidOperationException">if a command is already running.</exception>
            <exception cref="T:System.Management.Automation.RuntimeException">For any errors executing the command. If multiple errors are found running the script, only the first will be thrown as an exception.</exception>
            <exception cref="T:System.TimeoutException">If millisecondsTimeout have passed and the command has not completed.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.InvokeSynchronous(System.Management.Automation.PSCommand,System.Int32)">
            <summary>
            Invokes the PS command synchronously returning the results instead of placing them in the output buffer.
            This method is intended for the quick evaluation of a script, with minimal side effects for applications 
            like a watch window or transferring file text over a remote session.
            </summary>
            <param name="psCommand">PowerShell command to run</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or a negative value like TimeOut.Infinite to wait indefinitely.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteConsole">
            <summary>
            Executes the command currently in the console pane.
            </summary>
            <exception cref="T:System.InvalidOperationException">If CanExecuteConsolePane is false </exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteScript">
            <summary>
            Executes the currently selected script
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteSelection">
            <summary>
            Executes the text currently selected in the script editor
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.BeginStopCurrentCommand">
            <summary>
            Stops the current command asynchronouslly.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ReportError(System.String)">
            <summary>
            Adds an error to the output.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteAndCallback(System.String,Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteCallback)">
            <summary>
            Executes the script and calls back with the output when it is done
            </summary>
            <param name="script">script to execute</param>
            <param name="callback">method to call when the execution is done</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteCommandAndCallback(System.Management.Automation.PSCommand,Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteCallback)">
            <summary>
            Executes the command and calls back with the output when it is done
            </summary>
            <param name="command">command to execute</param>
            <param name="callback">method to call when the execution is done</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExitNestedPrompt">
            <summary>
            Exists the nested prompt
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.EnterNestedPrompt">
            <summary>
            Enters the nested prompt
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.StepInto">
            <summary>
            Executes the "step into" debugger command
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.StepOver">
            <summary>
            Executes the "step over" debugger command
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.StepOut">
            <summary>
            Executes the "step out" debugger command
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ResumeDebugger">
            <summary>
            Resumes execution of the debugger 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.BreakAllDebugger">
            <summary>
            Breaks runnings script into the debugger
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.StopDebugger">
            <summary>
            Stops the debugger 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ToggleBreakpoint">
            <summary>
            Toggles (add/remove) the breakpoint on the current line
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ClearOutput">
            <summary>
            Clears the output and refreshes the prompt
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ListBreakpoints">
            <summary>
            Invokes the get-psbreakpoint cmdlet
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetCallStack">
            <summary>
            Invokes the get-pscallstack cmdlet
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.UpdateHelp">
            <summary>
            Invokes the update-help cmdlet
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteAndEchoInOutput(System.String)">
            <summary>
            Executes the given script echoing the script in the output.
            </summary>
            <param name="script">script to be executed</param>
            <returns>true if the script was succesfully executed</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteAndEchoInOutput(System.String,System.Boolean)">
            <summary>
            Executes the given script echoing the script in the output.
            </summary>
            <param name="script">script to be executed</param>
            <param name="isScript"> true if the command are the contents of a script, and false if the command is a script name</param>
            <returns>true if the script was succesfully executed</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExecuteAndEchoInOutput(System.String,System.Boolean,System.Boolean)">
            <summary>
            Executes the given script echoing the script in the output.
            </summary>
            <param name="script">script to be executed</param>
            <param name="isScript"> true if the command are the contents of a script, and false if the command is a script name</param>
            <param name="addToInputHistory">true to add the script to input history</param>
            <returns>true if the script was succesfully executed</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.EnableBreakpoint">
            <summary>
            Enables the breakpoints on the current line
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DisableBreakpoint">
            <summary>
            Disables the breakpoints on the current line
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.RemoveAllBreakpoints">
            <summary>
            Deletes all the breakpoints on the current runspace
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.EnableAllBreakpoints">
            <summary>
            Enable all the breakpoints on the current runspace
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DisableAllBreakpoints">
            <summary>
            Disable all the breakpoints on the current runspace
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PushRunspace(System.Management.Automation.Runspaces.Pipeline)">
            <summary>
            Code executed when the host enters a remote session
            </summary>
            <param name="runningCmd">Running command associated with pushed runspace or null</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PopRunspace">
            <summary>
            Code executed when the host exits a remote session
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.RefreshDebuggerAdornments(System.Object)">
            <summary>
            Refreshes the debugger adornments on all the files in the current runspace
            </summary>
            <param name="context"><paramref name="context"/> is not used.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.RefreshDebuggerAdornments(Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Refreshes the debugger adornments (highlights for breakpoints and current line) on the given file
            </summary>
            <param name="file">The file to refresh</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.HandleRemoteSessionForwardedEvent(System.Object,System.Management.Automation.PSEventArgs)">
            <summary>
            Handle remote session events.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetFilePathForTempRemoteFile(System.String)">
            <summary>
            Helper method to return the file path name of a local temporary script
            file, if this is a remote session and the filePathName has been mapped
            to a tempoary local file.  Otherwise the passed in file path name will
            be returned as is.
            <param name="filePathName">File path name</param>
            <returns>Local file path name of temporary remote file</returns>
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetSessionPathForTempRemoteFile(System.String)">
            <summary>
            Helper method to return the correct session file path name, given a
            provided local path name.  If the current session is a remote session
            and if the local file path points to a temporary remote file copy then
            the actual remote session file path is returned.  Otherwise the passed
            in file path name is returned as is.
            </summary>
            <param name="filePathName">File path name</param>
            <returns>Session file path name</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetBreakpointIdList(System.Collections.Generic.List{System.Management.Automation.LineBreakpoint})">
            <summary>
            Helper method to return an array of breakpoint Ids.
            </summary>
            <param name="breakpoints">List of line breakpoints</param>
            <returns>Integer arrary of Ids</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.RefreshPromptProperty">
            <summary>
            Starts running the prompt function. 
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.TabComplete(Microsoft.PowerShell.Host.ISE.ISEEditor,System.Boolean)">
            <summary>
            Performs tab completion in the editor
            </summary>
            <param name="editor">editor to perform tab completion in</param>
            <param name="forward">true to look forward, false for backward</param>
            <returns>true if the tab completion has been handled</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ConsoleHistoryDown">
            <summary>
            Goes to the next history when the user presses down
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ConsoleHistoryUp">
            <summary>
            Goes to the previous history when the user presses up
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ConsoleHistoryPageUp">
            <summary>
            Goes to the first history when the user presses PageUp
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ConsoleHistoryPageDown">
            <summary>
            Goes to the last history when the user presses PageDown
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.AddOutputSeparator">
            <summary>
            Adds a line to the output editor meant as a separator between commands
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.RunProfileCommand(System.Management.Automation.PSCommand)">
            <summary>
            Runs the profile PSCommand synchronouslly
            </summary>
            <param name="command">command to run</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.RunProfile(System.String)">
            <summary>
            Runs the profile command synchronouslly
            </summary>
            <param name="command">command to run</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.Execute(System.String,System.Boolean,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
            Executes input
            </summary>
            <param name="input">command to execute</param>
            <param name="isScript"> true if the command are the contents of a script, and false if the command is a script name</param>
            <param name="addToInputHistory"> true if the command should be added to history </param>
            <param name="useLocalScope">true if the input should run in a new scope. Use false to dot-source the input.</param>
            <returns>true if it was able to execute the command</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetOutputCommand(System.Boolean)">
            <summary>
            Gets an Out-Default or Out-String command that can be used to format 
            command output for a given statement. 'Out-String -Stream' will be 
            used when this command is called while the user is at the debugger
            prompt.
            </summary>
            <param name="endOfStatement">
            True if this output command will be used for the end of a statement.
            </param>
            <returns>
            A Command instance for the output command needed in this context.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.RecoverExecuteFromError(System.Exception)">
            <summary>
            Recover from error when executing a command on a runspace.  This generally occurs
            for remote runspaces which can break due to connection issues.
            </summary>
            <param name="error">Error occurring during Execute</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.StartIntellisense(Microsoft.PowerShell.Host.ISE.ISEEditor,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Called by the editor to start intellisense completion retrieval in a separate thread
            </summary>
            <param name="editor">editor requestiong intellisense results</param>
            <param name="lineStartPosition">position for the start of the line</param>
            <param name="caretPosition">position of the caret where intellisense is starting</param>
            <param name="lineTextUpToCaret">line text up to caret</param>
            <param name="useTimeout">True for when a timeout should be used</param>
            <param name="selectOnEmptyFilter">True to select an item even if the filter text is empty</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.StartIntellisense(Microsoft.PowerShell.Host.ISE.ISEEditor,System.Int32,System.Int32,System.String,System.Management.Automation.CompletionResultType[],System.Boolean,System.Boolean)">
            <summary>
            Called by the editor to start intellisense completion retrieval in a separate thread
            </summary>
            <param name="editor">editor requestiong intellisense results</param>
            <param name="lineStartPosition">position for the start of the line</param>
            <param name="caretPosition">position of the caret where intellisense is starting</param>
            <param name="lineTextUpToCaret">line text up to caret</param>
            <param name="mandatoryResultTypeFilter">filter for result types</param>
            <param name="useTimeout">True fir when a timeout should be used</param>
            <param name="selectOnEmptyFilter">True to select an item even if the filter text is empty</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetCompletionResults">
            <summary>
            Gets the completion results for tests
            </summary>
            <returns>the completion results for tests</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.BeginDispose">
            <summary>
            Disposes of the resources used by this runspace asynchronouslly.
            Synchronouslly stopping the runspace in the UI thread is not possible
            since some runspaces can be stuck in a call like [console]::readkey().
            this.runspaceRef.Runspace.Dispose will synchronouslly stop the runspace 
            therefore it has to be done in a separate thread.
            </summary>
            <returns>The thread being used to dispose of the runspace.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.UpdateShowCommandState">
            <summary>
            Updates the visibility of the embedded Show-Command for this tab
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.FindShowCommandTool(System.Nullable{System.Boolean})">
            <summary>
            Finds the show-command tool in the vertical or horizontal panes, or returns null if not found
            </summary>
            <param name="openPaneAndTool">
            true if we want to open the pane the tool is found on, false to close the tool and null to take no action on tool or pane
            </param>
            <returns>
            the show-command tool in the vertical or horizontal panes, or null if not found
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.InternalSetShowCommands(System.Boolean)">
            <summary>
            Sets ShowCommands and does not throw an exception if in remote session
            </summary>
            <param name="value">new value for ShowCommands</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnSelectedFileNeedsFocus(System.EventArgs)">
            <summary>
            Raises the SelectedFileNeedsFocus event
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.BeforeDefaultKeyProcessor_InternalKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles KeyDown for operations common to multiple editors
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ProcessTab(System.Object,System.Windows.Input.KeyEventArgs,Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Processes the tab key for all 3 editors
            </summary>
            <param name="sender">event sender</param>
            <param name="e">keyboard arguments</param>
            <param name="selectedPowerShellTab">seleceted PowerShellTab</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.CreateAndOpenRunspace(Microsoft.Windows.PowerShell.Gui.Internal.GPSHost)">
            <summary>
            Called from the constructor to creates and open the runspace
            </summary>
            <param name="host">the host to be used</param>
            <returns>the newly created runspace</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.CreateAddToHistorySettings">
            <summary>
            Called from the constructor to create the add to history settings 
            </summary>
            <returns>the add to history invocation settings</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.CheckForDuplicateInAddOnToolCollection(Microsoft.PowerShell.Host.ISE.ISEAddOnTool,Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection)">
            <summary>
            Helper used in AddOnTools_CollectionChanging to check if adding <paramref name="newTool"/> would duplicate names 
            or windows in <paramref name="collection"/>.
            </summary>
            <param name="newTool">Tool about to be added</param>
            <param name="collection">Collection the tool will be aqdded to</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.CreateSetBreakpointCommand(System.String,System.Int32,System.Management.Automation.LineBreakpoint)">
            <summary>
            Creates a PSCommand to set a breakpoint on a given script and line. The rest of the command arguments are taken from the 'breakpoint' parameter.
            </summary>
            <param name="script">Script to set the breakpoint</param>
            <param name="line">Line to set the breakpoint on</param>
            <param name="breakpoint">Provides the rest of the paramenters for the set breakpoint command</param>
            <returns>A command to set the breakpoint</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetCommandCompletionParameters(Microsoft.PowerShell.Host.ISE.ISEEditor,System.Int32,System.Management.Automation.Language.Ast@,System.Management.Automation.Language.Token[]@,System.Management.Automation.Language.IScriptPosition@)">
            <summary>
            Get the parameters needed to call the engine's api for tab completion.
            </summary>
            <param name="editor">the editor</param>
            <param name="caretPosition">the position of the cursor, from the editor's point of view</param>
            <param name="ast">returns the ast from the buffer</param>
            <param name="tokens">returns the tokens from the buffer</param>
            <param name="cursorPosition">returns the position (from the Ast point of view) of the cursor</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.UpdatePrompt(System.String)">
            <summary>
            Completion routine for invocations of the Prompt() function; it simply forwards the call to DoUpdatePrompt on the UI thread
            </summary>
            <param name="prompt">Output buffer for the Prompt() function</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.SetPromptWithLocalOrRemoteString(System.String)">
            <summary>
            Sets the prompt property with the local or remote string
            </summary>
            <param name="promptString">The prompt string value to set the property with</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.RefreshPromptPropertySynchronous">
            <summary>
            Refreshes the prompt synchronously. Called from InvokeSynchronous
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoUpdatePrompt(System.String)">
            <summary>
            Updates the prompt with the result of a PowerShell invocation
            </summary>
            <param name="prompt">Output buffer for the Prompt() function</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.CloseShowCommand">
            <summary>
            Closes the addon tool where it is (vertical or horizontal pane)
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.FindShowCommandTool(Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection)">
            <summary>
            Tries to find the tool containing this.showCommandControl in the <paramref name="tools"/> collection
            </summary>
            <param name="tools">collection of tools to look for this control on</param>
            <returns>the tool containing this.showCommandControl in the <paramref name="tools"/> collection</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellTab_PropertyChangedAfterTryingToExecuteCommand(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Listens to PropertyChanged after ExecuteCommand is called while intellisense was running in order
            to catch a change in CanInvoke to true resulting from intellisense stopping
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoGetIntellisenseResults(Microsoft.PowerShell.Host.ISE.ISEEditor,System.Int32,System.Int32,System.String,System.Management.Automation.CompletionResultType[],System.Boolean,System.Boolean)">
            <summary>
            Starts untellisense and calls the editor back when the results are ready
            </summary>
            <param name="editor">editor where Intellisense is to start</param>
            <param name="lineStartPosition">position for the start of the line</param>
            <param name="caretPosition">position of the caret where intellisense is starting</param>
            <param name="lineTextUpToCaret">line text up to caret</param>
            <param name="mandatoryResultTypeFilter">filter for completion results</param>
            <param name="useTimeout">True fir when a timeout should be used</param>
            <param name="selectOnEmptyFilter">True to select an item even if the filter text is empty</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.StopIntellisense(System.Boolean)">
            <summary>
            Stops intellisense by calling BeginStopCurrentCommand. This method is called when intellisense times out
            or when we want to execute something in the console pane
            </summary>
            <param name="leaveTimeoutMessage">true if this is called from the intellisense time out so we leave a message in the Status bar</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetNextTabCompletionMatch(System.String,System.Management.Automation.Language.Ast,System.Management.Automation.Language.Token[],System.Management.Automation.Language.IScriptPosition,System.Boolean)">
            <summary>
            Calls GetNextCompletionMatch on either this.intellisenseToTabTransition or this.commandCompletion
            </summary>
            <param name="lineInput">editor line</param>
            <param name="ast">the ast from the last tokenization</param>
            <param name="tokens">the tokens from the last tokenization</param>
            <param name="cursorPosition">the position of the cursor</param>
            <param name="forward">true if we are moving forward</param>
            <returns>
            the return of GetNextCompletionMatch on either this.intellisenseToTabTransition or this.commandCompletion
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.CompleteCommandInput(System.Management.Automation.Language.Ast,System.Management.Automation.Language.Token[],System.Management.Automation.Language.IScriptPosition,System.Collections.Hashtable)">
            <summary>
            Helper method to perform PowerShell command completion based
            on current debug mode.
            </summary>
            <param name="ast">Input AST</param>
            <param name="tokens">Tokens</param>
            <param name="cursorPosition">Cursor position</param>
            <param name="options">Options</param>
            <returns>CommandCompletion</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoTabComplete(Microsoft.PowerShell.Host.ISE.ISEEditor,System.String,System.Int32,System.Boolean)">
            <summary>
            This is the function that actually performs the tab completion; note that this code must be executed outside the UI thread
            </summary>
            <param name="editor">editor to perform tab completion in</param>
            <param name="lineTextUpToCaret">editor line up to the caret</param>
            <param name="caretBufferPosition">the position of the caret</param>
            <param name="forward">true to look forward, false for backward</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OutputInternal_InputTextChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the console buffer changes to update the scratch buffer
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ReportError(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Common method between ReportException and ReportTokenizationErrors to add an error to the output.
            </summary>
            <param name="message">error message</param>
            <param name="file">error file</param>
            <param name="line">error line</param>
            <param name="column">error column</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ReportException(System.Exception)">
            <summary>
            Reports an Exception to the output as the ones we get from runing the profile
            or from a command's InvocationstateInfo.Reason when the pipeline fails 
            </summary>
            <param name="e">exception to report</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.BeginReportExceptionInPipeline(System.Exception)">
            <summary>
            Reports an Exception by outputing the exception to the pipeline
            </summary>
            <param name="e">exception to report</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ReportTokenizationErrors(System.Management.Automation.Language.ParseError[])">
            <summary>
            Reports a tokenization error like the ones we can get by running the console pane, untitled or script selection
            </summary>
            <param name="parseErrors">tokenization errors</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.Files_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Used to monitor changes in the SelectedFile so that we can monitor the focus
            on the currently SelectedFile and propperly set this.lastEditorWithFocus
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.SelectedEditor_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the selected file got focus to set this.lastEditorWithFocus
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.Output_GotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the output got focus to set this.lastEditorWithFocus
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OutputTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Called by the timer to flush the output cache
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.Output_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to run the profiles
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.MoveProgressToEditorGrid">
            <summary>
            Moves the progress control to the editor grid
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnAddOnToolPaneOpenedOrClosed(Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection,System.Boolean)">
            <summary>
            Triggers the AddOnToolPaneClosed event
            </summary>
            <param name="collection">collection where the event happened</param>
            <param name="opened">true if the pane has been opened</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnAddOnToolClosedOrOpened(Microsoft.PowerShell.Host.ISE.ISEAddOnTool)">
            <summary>
            Triggers the AddOnToolClosed event
            </summary>
            <param name="tool">tool where the event happened</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnAddOnToolAddedOrRemoved(Microsoft.PowerShell.Host.ISE.ISEAddOnTool,System.Boolean)">
            <summary>
            Triggers the AddOnToolRemoved event
            </summary>
            <param name="tool">tool where the event happened</param>
            <param name="added">true if the tool has been added</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.AddOnTools_CollectionChanging(System.Object,Microsoft.PowerShell.Host.ISE.UICollection{Microsoft.PowerShell.Host.ISE.ISEAddOnTool}.NotifyCollectionChangingEventArgs)">
            <summary>
            Monitors the CollectionChangingEvent to block additions past MaxAddOnToolCount and duplicated names or windows.
            </summary>
            <param name="sender">
            Vertical or Horizontal tool collection, though this parameter is ignored since we will check the new tool against
            both vertical and horizontal collections
            </param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.AddOnTools_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Listens to CollectionChanged in Vertical or Horizontal tools to:
               1) Update the listening of PropertyChanged events in each tool responsible for
               traching changes to IsVisible properties in each tool that cause changes in the VisibleCollections
               2) Update the visible collections when tools are added/removed to/from Vertical or Horizontal tools.
            </summary>
            <param name="sender">Vertical or Horizontal tool collections</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.AddOnTool_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when IsVisible changes in Vertical or Horizontal to update the visible collections
            </summary>
            <param name="sender">The ISEAddOnTool that changed</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.UpdateVisibleAddOnToolCollection(Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection,Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection)">
            <summary>
            Called from when the AddOnTool IsVisble property changes or when members are added/removed
            to Vertical/Horizontal AddOnTools.
            </summary>
            <param name="collection">Vertical or Horizontal ISEAddOnToolCollection</param>
            <param name="correspondingReadOnlyCollection">Visible collection corresponding to <paramref name="collection"/></param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GoToConsoleHistory(System.Int32)">
            <summary>
            Sets the new Input text to newHistoryIndex
            </summary>
            <param name="newHistoryIndex">new history index</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.AddToHistoryIfNotSameAsLast(System.String,System.Boolean)">
            <summary>
            If <paramref name="input"/> is not the same as the top history and if <paramref name="addToInputHistory"/> is true:
                  - Adds the command to history 
                  - Sets the history index to the top
            </summary>
            <param name="input">input to add to history</param>
            <param name="addToInputHistory">true if we should add to history</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.SetDebugModeIfNeeded(Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Sets the file in debug mode if it is PowerShell source file
            </summary>
            <param name="file">The file to mark</param>
            <returns>True if the file was marked</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.SetAllFilesToDebugModeIfNeeded">
            <summary>
            Sets all files to debug mode if not already set.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.SetUnsupportedConsoleApplications">
            <summary>
            Sets the value of this.unsupportedConsoleApplications and initializes $psUnsupportedConsoleApplications.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.CreateTimer">
            <summary>
            Called from the constructor to create the timer and set its event handler
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnPropertyChanged(System.String)">
            <summary>
            Called to invoke this.PropertyChanged, if needed, when the property has changed
            </summary>
            <param name="name">property name</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnZoomLevelChanged(System.Double)">
            <summary>
            Called to invoke this.ZoomLevelChanged
            </summary>
            <param name="zoomLevel">Zoom Level</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.IsBlocked(System.String)">
            <summary>
            Returns true if the command is in the list of blocked commands
            </summary>
            <param name="command">command to check</param>
            <returns>true if the command is in the list of blocked commands</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnRunningCommandExecutionStateChanged(System.Object,System.Management.Automation.PSInvocationStateChangedEventArgs)">
            <summary>
            Posts the event to the UI thread
            </summary>
            <param name="sender">PowerShell instance</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoRunningCommandExecutionStateChanged(System.Object,System.Management.Automation.PSInvocationStateChangedEventArgs,System.Management.Automation.Runspaces.RunspaceState)">
            <summary>
            Called when the execution state changes
            </summary>
            <param name="sender">PowerShell instance</param>
            <param name="e">event arguments</param>
            <param name="runspaceState">State of runpace</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnOutputControlBufferDataAdded(System.Object,System.Management.Automation.DataAddedEventArgs)">
            <summary>
            Called when data has to be added to the buffer of the output control
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.ExitDebugger(System.Management.Automation.DebuggerResumeAction)">
            <summary>
            Signals to the debugger thread that it should resume execution of the suspended pipeline
            </summary>
            <param name="action">debugger action to be taken</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoPowerShellAsychronousInvoke(System.Management.Automation.PSCommand)">
            <summary>
            Starts an asynchronous invoke on the current PowerShell instance
            </summary>
            <param name="commands">the commands to execute</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoPowerShellDebugAsynchronousInvoke(System.Management.Automation.PSCommand)">
            <summary>
            Starts an asynchronous invoke on the current PowerShell debugger instance.
            </summary>
            <param name="commands">Command to invoke</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoAsynchronousInvoke(System.Management.Automation.PSCommand)">
            <summary>
            Starts an asynchronous invoke on either the current PowerShell
            or debugger depending on whether the debugger is currently active.
            </summary>
            <param name="commands">Command to invoke</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoInvokeSynchronous(System.Management.Automation.PSCommand)">
            <summary>
            Invokes a synchronous command when in normal or debugger state.
            </summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetFileLineBreakpoints(Microsoft.PowerShell.Host.ISE.ISEFile,System.Int32)">
            <summary>
            Method to first sync selected file breakpoints with current runspace and
            then to return all breakpoints on the currently selected file/line.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.SyncRemoteBreakpoints">
            <summary>
            Method to sync ISE breakpoint information with current remote runspace breakpoints.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.GetRunspaceBreakpoints">
            <summary>
            Gets all line breakpoints of current runspace.
            </summary>
            <returns>List of line breakpoints</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnDebuggerStop(System.Object,System.Management.Automation.DebuggerStopEventArgs)">
            <summary>
            Event handler for debugger breakpointsById/steps
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoEnterDebugger">
            <summary>
            Updates the UI when entering the debugger
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoExitDebugger">
            <summary>
            Updates the UI when exiting the debugger
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.LoadFile(System.String,System.Byte[],System.Boolean@)">
            <summary>
            Ensures that the given file is opened
            </summary>
            <param name="filePathName">Full path of the file to load</param>
            <param name="content">Optional existing content to load file from.</param>
            <param name="isExistingFile">True if the file was already in the files collection </param>
            <returns>The ISEFile instance associted to the file</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.SaveRemoteSessionFile(Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Saves the contents of the temporary file to the remote machine.
            location.
            </summary>
            <param name="file">ISEFile corresponding to local temporary file</param>
            <returns>True if save succeeded.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.CreateTemporaryRemoteSessionFile(System.String,System.Byte[])">
            <summary>
            Creates a temporary file on the client machine from content retrieved over 
            a remote connection.
            </summary>
            <param name="remoteFilePathName"></param>
            <param name="contentToUse">Optional existing content to use</param>
            <exception cref="T:System.IO.IOException">
            Thrown if file cannot be created.
            </exception>
            <returns>Local temporary file path name</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.CleanUpRemoteSessionTemporaryFiles(System.Boolean)">
            <summary>
            Cleans up temporary files created from CreateTempFileFromRemoteSession.
            </summary>
            <param name="removeISEFile">True if ISE file should be removed from collection.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.WriteDebugLine(System.String,System.Boolean)">
            <summary>
            Adds a line (formatted as a debugger message) to the pending output
            </summary>
            <param name="line">line to be added</param>
            <param name="finishWithCrLf">true if line should have a \r\n appended to it</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoEnterNestedPrompt(System.Object)">
            <summary>
            Saves the current state and updates the UI when entering a nested prompt
            </summary>
            <param name="context">thread object unused here</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.SetPromptBracket">
            <summary>
            Sets the prompt bracket text
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DoExitNestedPrompt(System.Object)">
            <summary>
            Restores the saved state and updates the UI when exiting a nested prompt
            </summary>
            <param name="context">thread object not used in this method</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PostToPipelineThread(System.Threading.ThreadStart,System.Boolean)">
            <summary>
            Posts the given action to the pipeline thread
            </summary>
            <param name="action">The action to execute</param>
            <param name="waitForCompletion">Indicates whether to wait for the action to complete</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnBreakpointUpdated(System.Object,System.Management.Automation.BreakpointUpdatedEventArgs)">
            <summary>
            Updates the breakpointsById when the runspace notifies that a change has occurred
            </summary>
            <param name="sender">Debugger instance raising the event</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnFilesChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Sets the initial breakpoints when a new file is added
            </summary>
            <param name="sender">the ISEFile collection</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnScriptEditorTooltipRequest(System.Object,Microsoft.Windows.PowerShell.Gui.Internal.ScriptEditor.TooltipRequestEventArgs)">
            <summary>
            Evaluates an expression and returns its value
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.OnISEFileRequestBreakpointUpdate(System.Object,Microsoft.PowerShell.Host.ISE.ISEFile.RequestBreakpointUpdateEventArgs)">
            <summary>
            Updates the breakpoints as requested by the editor
            </summary>
            <param name="sender">the ISEFile hosting the editor</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.NestedPowershellInvoker_InvocationStateChanged(System.Object,System.Management.Automation.PSInvocationStateChangedEventArgs)">
            <summary>
            Called each time the current (nested) powerShellInvoker changes state to set this.CurrentState
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.SetIsReadyForNextCommand">
            <summary>
            Called when any of the 2 properties IsReadyForNextCommand depends on changes
            (IsAsynchronousOperationDone or IsPipelineRunning) to set this.IsReadyForNextCommand
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.SetIsPipelineRunning">
            <summary>
            Called when CurrentState changes to set IsPipelineRunning
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTab.RemoteTemporaryFile">
            <summary>
            Class that contains all information for a remote temporary file
            created on the local machine along with its corresponding local
            ISEFile object and the remote file location.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.RemoteTemporaryFile.LocalFilePath">
            <summary>
            Local file path
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.RemoteTemporaryFile.RemoteFilePath">
            <summary>
            Remote file path
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.RemoteTemporaryFile.ISEFile">
            <summary>
            ISE file
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.RemoteTemporaryFile.#ctor(System.String,System.String,Microsoft.PowerShell.Host.ISE.ISEFile)">
            <summary>
            Constructor
            </summary>
            <param name="localFilePath">Local file path</param>
            <param name="remoteFilePath">Remote file path</param>
            <param name="iseFile">ISE File</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker">
            <summary>
            PowerShellInvoker is a helper class that wraps a PowerShell instance and executes Invoke on the correct
            thread depending on the state of the PowerShellTab. It is also used to save state when entering a
            nested prompt.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.powershell">
            <summary>
            PowerShell object to be used in invocations in this prompt
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.runspace">
            <summary>
            Runspace in use
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.statusText">
            <summary>
            save the status text when entering a nested prompt
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.prompt">
            <summary>
            save the prompt when entering a nested prompt
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.exitingNestedPrompt">
            <summary>
            Indicates that the current instance is exiting a nested prompt; once exit begins no further calls to Invoke 
            should be done on this PowerShellInvoker instance (because the pipeline thread is resuming execution).
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.#ctor(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Initializes a new instance of the PowerShellInvoker class associated with the given runspace
            </summary>
            <param name="runspace">the runspace in use</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.#ctor(Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker)">
            <summary>
            Initializes a new instance of the PowerShellInvoker class
            </summary>
            <param name="powerShellInvoker">previous powerShellInvoker this nested prompt is going to cover</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.#ctor(System.Management.Automation.PowerShell,Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Initializes a new instance of the PowerShellInvoker class
            This is the common constructor
            </summary>
            <param name="powershell">PowerShell object to be used in invocations in this prompt</param>
            <param name="runspace">Runspace in use</param>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.InvocationStateChanged">
            <summary>
            Event raised when the state of the current invocation changes
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.PowerShell">
            <summary>
            Gets the PowerShell instance wrapped by this instance
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.Commands">
            <summary>
            Sets the Commands property(Pass-thru) of the internal PowerShell object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.InvocationStateInfo">
            <summary>
            Gets the InvocationStateInfo property of the internal PowerShell(Pass-thru)
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.StatusText">
            <summary>
            Gets or sets the saved status text when entering a nested prompt
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.Prompt">
            <summary>
            Gets or sets the saved prompt when entering a nested prompt
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.ExitingNestedPrompt">
            <summary>
            Gets or sets a value indicating whether the current instance is exiting a nested prompt; once exit 
            begins no further calls to Invoke should be done on this PowerShellInvoker instance (
            because the pipeline thread is resuming execution).
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.InvokeSynchronous(System.Int32)">
            <summary>
            Invokes the current command, and does not return while the command is not
            finished or millisecondsTimeout have not passed.
            </summary>
            <param name="millisecondsTimeout">Maximum time allowed for the command to complete</param>
            <returns>The results of running the current command</returns>
            <exception cref="T:System.Management.Automation.RuntimeException">If running the command caused an exception to be thrown.</exception>
            <exception cref="T:System.TimeoutException">If millisecondsTimeout have passed and the command has not completed.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.CreateNestedPowerShell">
            <summary>
            Create a nested instance
            </summary>
            <returns>the nested instance that has been created</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.BeginInvoke``2(System.Management.Automation.PSDataCollection{``0},System.Management.Automation.PSDataCollection{``1},System.Management.Automation.PSInvocationSettings,System.AsyncCallback,System.Object)">
            <summary>
            Assynchronous invocation method
            </summary>
            <typeparam name="TInput">input type</typeparam>
            <typeparam name="TOutput">output type</typeparam>
            <param name="input">command input</param>
            <param name="output">command output</param>
            <param name="settings">invocation settings</param>
            <param name="callback">callback method</param>
            <param name="context">context object</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.Invoke``1">
            <summary>
            Synchronous invoke 
            </summary>
            <typeparam name="TOutput">the output type</typeparam>
            <returns>the result of the synchronous invocation</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.BeginStop">
            <summary>
            Asynchronous stop
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.Dispose">
            <summary>
            Pass-thru to the internal PowerShell Dispose
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.SetHistoryString(System.String)">
            <summary>
            sets the history string on the underlying powershell
            </summary>
            <param name="historyString">history string to set</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellInvoker.OnInvocationStateChanged(System.Object,System.Management.Automation.PSInvocationStateChangedEventArgs)">
            <summary>
            Pass-thru of the InvocationStateChanged for the internal PowerShell instance
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker">
            <summary>
            Helper class for invoking commands on the runspace debugger.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.powerShellTab">
            <summary>
            PowerShellTab associated with this runspace/debugger.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.syncObject">
            <summary>
            Synchronization object.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.#ctor(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Constructor
            </summary>
            <param name="powershellTab">Associated PowerShell tab</param>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.InvocationStateChanged">
            <summary>
            Event raised as state of debug command invocation changes.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.Commands">
            <summary>
            Debugger command to invoke.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.Results">
            <summary>
            Debugger command results.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.InvocationStateInfo">
            <summary>
            Debugger command invocation state.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.BeginInvoke(System.Management.Automation.PSDataCollection{System.Management.Automation.PSObject},System.AsyncCallback)">
            <summary>
            Invokes Commands command on debugger.
            </summary>
            <param name="output">Output collection</param>
            <param name="callback">Optional callback</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.InvokeSynchronous(System.Management.Automation.PSCommand)">
            <summary>
            Invokes command on debugger synchronously.
            </summary>
            <returns>Command output</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.BeginStopCommand">
            <summary>
            Stops any running debugger command.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.CompleteInput(System.Management.Automation.Language.Ast,System.Management.Automation.Language.Token[],System.Management.Automation.Language.IScriptPosition,System.Collections.Hashtable)">
            <summary>
            Runs command completion through the debugger.
            </summary>
            <param name="ast">Input Ast</param>
            <param name="tokens">Tokens</param>
            <param name="cursorPosition">Cursor position</param>
            <param name="options">Options</param>
            <returns>Command completion results</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.HandleDebugBreak">
            <summary>
            Turns on script debugger and sets it to step mode.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.PowerShellDebugInvoker.RaiseInvocationStateChanged(System.Management.Automation.PSInvocationState,System.Exception)">
            <summary>
            Sets state and raised InvocationStateChanged event.
            </summary>
            <param name="state">Command invocation state</param>
            <param name="e">Optional exception reason</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTab.DisplayNameEventArgs">
            <summary>
            Arguments for the event raised when the DisplayName property is about to change
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.DisplayNameEventArgs.oldValue">
            <summary>
            The old value for displayName
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.DisplayNameEventArgs.newValue">
            <summary>
            The new value for displayName
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.DisplayNameEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DisplayNameEventArgs class.
            </summary>
            <param name="oldValue">old DislpayName value</param>
            <param name="newValue">new DisplayName value</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.DisplayNameEventArgs.OldValue">
            <summary>
            Gets the Displayname's old value
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.DisplayNameEventArgs.NewValue">
            <summary>
            Gets the DisplayName's new value
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTab.CompletionMatch">
            <summary>
            ReturnValue for GetNextCompletionMatch
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.CompletionMatch.text">
            <summary>
            The match text
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.CompletionMatch.replacementIndex">
            <summary>
            The replacement index
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.CompletionMatch.replacementLength">
            <summary>
            The replacement length
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.CompletionMatch.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CompletionMatch class
            </summary>
            <param name="text">The match text</param>
            <param name="replacementIndex">The replacement index</param>
            <param name="replacementLength">The replacement length</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CompletionMatch.Text">
            <summary>
            Gets the match text
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CompletionMatch.ReplacementIndex">
            <summary>
            Gets the replacement index
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTab.CompletionMatch.ReplacementLength">
            <summary>
            Gets the replacement length
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition">
            <summary>
            Manages the transition from intellisense to tab completion considering both share the same 
            completion results.
            If intellisense is up and tab is pressed the desired behavior is that of tab completion.
            When "get-" is pressed and intellisense is up, pressing tab will cause intellisense to be dismissed
            and the existing completion results obtained for intellisense will be cycled through
            for tab completion. There is no problem there.
            The problem comes in the following scenario:  "get-" starts intellisense and then p is typed to filter the 
            intellisense results. The completion results have been obtained for "get-" and p was only used to filter
            the intellisense results. At this moment, TAB should cycle through the results that would have been 
            obtained for a tab after "get-p".
            We have two approaches to obtain that result.
                1) obtain another set of completion results for "get-p"
                2) filter the resuts we already have for "get-" to the ones that start with "get-p" and cycle trough them
            There is one additional complication for both scenarios:
            If the currently selected intellisense result does not start with "get-p"
            since intellisense filter uses "Contains" instead of "StartsWith", then the intellisense session
            has to be commited, since this is the intellisense desired behavior for tab, and there will be no cycling through
            tab completion.
            This class implements approach 2) above to avoid calling another tab completion and because approach 1)
            would require a careful synchronization of the new completion results with the intellisense selection
            once the tab completion results are retrieved on a separate thread
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition.completions">
            <summary>
            Set in GetIntellisenseToTabCompletionTransition to a subset of intellisense resuts 
            that start with the intellisense filter
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition.lastInput">
            <summary>
            Similar to the lastInput field of CommandCompletion this field is used to monitor the fact
            we are still cycling this set of results
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition.lineStart">
            <summary>
            Added to each one of the completion result texts in GetNextMatch
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition.currentCompletionIndex">
            <summary>
            The current completion index in completions
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition.replacementStart">
            <summary>
            The start index for the replacement
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition.replacementLength">
            <summary>
            The length of the text to replace
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition.#ctor">
            <summary>
            Prevents a default instance of the IntellisenseToTabCompletionTransition class from being created
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition.GetIntellisenseToTabCompletionTransition(Microsoft.Windows.PowerShell.Gui.Internal.ISECompletionSet,Microsoft.PowerShell.Host.ISE.ISEEditor,Microsoft.Windows.PowerShell.Gui.Internal.ISECompletion,System.Boolean)">
            <summary>
            Creates a new IntellisenseToTabCompletionTransition object
            </summary>
            <param name="completionSet">The set of completions</param>
            <param name="editor">The ISE editor</param>
            <param name="selectedCompletion">the selected intellisense completion</param>
            <param name="forward">true if we are going forward. This is used to set currentCompletionIndex</param>
            <returns>
            a new IntellisenseToTabCompletionTransition object or null if the <paramref name="selectedCompletion"/>
            does not start with filter in <paramref name="completionSet"/>.
            </returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition.GetNextCompletionMatch(System.String,System.Boolean)">
            <summary>
            Gets the next completion match for the given <paramref name="input"/>
            and sets the currentCompletionIndex according to <paramref name="forward"/>
            </summary>
            <param name="input">editor line</param>
            <param name="forward">true if we are going forward</param>
            <returns>the next completion match for the given <paramref name="input"/></returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTab.IntellisenseToTabCompletionTransition.SetCurrentCompletionIndex(System.Int32)">
            <summary>
            Safely sets the value of currentCompletionIndex so it does not go beyond
            the limits of completions and so it cycles through to begining/end
            </summary>
            <param name="newIndex">new value of currentCompletionIndex</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection">
            <summary>
            Collection of <seealso cref="T:Microsoft.PowerShell.Host.ISE.PowerShellTab"/>.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.MaxRunspaceCount">
            <summary>
            Maximum number of runspaces that can be opened
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.lastRunspaceNameIndex">
            <summary> last runspace number </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.selectedPowerShellTab">
            <summary>
            The currently selected PowerShellTab
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.firstTab">
            <summary>
            tracks the first tab added
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.powerShellTabDictionary">
            <summary>
            Used to prevent renaming a PowerShellTab to an already existing name.
            Note: If you want to use this table and expect it to be in POwerShellTab addition order (the same order as in this collection)
            you're out of luck. PowerShellTab renames will cause a tab to be removed and inserted at the end of the dictionary which will
            change the order here.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.disposeThreads">
            <summary>
            This is the list of threads used to dispose of the runspace.
            The thread might be blocked if the runspace is unable to close.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.#ctor">
            <summary>
            Initializes a new instance of the PowerShellTabCollection class.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.SelectedPowerShellTab">
            <summary>
            Gets or sets the currently selected PowerShellTab.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.HasMultipleTabs">
            <summary>
            Gets a boolean that is true if this collection's Count is greater than 1.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.CanAdd">
            <summary>
            Gets a value indicating whether a Runspace can be added to the collection
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.CanRemove">
            <summary>
            Gets a value indicating whether Runspaces can be removed from the collection.
            The last Runspace can't.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.DisposeThreads">
            <summary>
            Gets the list of Runspace threads to attempt to dispose.
            If they cannot be disposed, cleanup needs to be forced
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.SetSelectedPowerShellTab(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Selects the <paramref name="powerShellTab"/>.
            </summary>
            <param name="powerShellTab">PowerShellTab to be selected.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.Add">
            <summary>
            Adds a new <seealso cref="T:Microsoft.PowerShell.Host.ISE.PowerShellTab"/> to the collection.
            </summary>
            <returns> The PowerShellTab that has been added.</returns>
            <exception cref="T:System.InvalidOperationException">If there are too many PowerShellTabs already</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.BeginDispose(Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            BeginDispose a PowerShellTab runspace in the collection. The Runspace thread is added to a watch
            where we can decide if the processed needs to be closed with force.
            </summary>
            <param name="powerShellTab">tab with runspace to be disposed</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.AnyPowerShellTabHasTools">
            <summary>
            Returns true if any of the PowerShellTabs in this collection has vertical or horizontal AddOn tools
            </summary>
            <returns>true if any of the PowerShellTabs in this collection has vertical or horizontal AddOn tools</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.InsertItem(System.Int32,Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Overridden to throw an exception to block a direct Insert or an Add given that there is no constructor for <seealso cref="T:Microsoft.PowerShell.Host.ISE.PowerShellTab"/>
            </summary>
            <param name="index">index of the item to be inserted</param>
            <param name="item">item to be inserted</param>
            <exception cref="T:System.NotSupportedException">When calling this method</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves a PowerShellTab from one position to another.
            </summary>
            <param name="oldIndex">index to move from.</param>
            <param name="newIndex">index to move to.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.SetItem(System.Int32,Microsoft.PowerShell.Host.ISE.PowerShellTab)">
            <summary>
            Overridden to throw an exception blocking a set.
            </summary>
            <param name="index">index of the item to be set.</param>
            <param name="item">new PowerShellTab at the <paramref name="index"/>.</param>
            <exception cref="T:System.NotSupportedException">When calling this method</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.ClearItems">
            <summary>
            Overridden to throw an exception indicating there must be at least one runspace in the collection.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.RemoveItem(System.Int32)">
            <summary>
            Removes a PowerShellTab at the specified position.
            </summary>
            <param name="index">index of the item to be removed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.PowerShellTabCollection_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Monitors changes in the collection to update this.firstTab and the event we listen on it
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.FirstTab_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Monitors PropertyChanged on the first tab to set the UserSettings.Default.ShowCommandsOnFirstPowerShellTab when ShowCommands changes
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.DoAdd(System.Object)">
            <summary>
            Sent to the UI thread in Add to actually add a new PowerShellTab.
            </summary>
            <param name="obj">ignored parameter to meet DispatcherOperationCallback signature.</param>
            <returns> The PowerShellTab that has been added.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.ClearFilesOnItemAboutToBeRemoved(System.Int32)">
            <summary>
            Calls Clear on on the files in the PowerShellTab corresponding to <paramref name="index"/>
            so that an exception can be raised regarding removing a runspace with unsaved files.
            </summary>
            <param name="index">index of the item about to be removed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.PowerShellTabCollection.Item_DisplayNameChanging(System.Object,Microsoft.PowerShell.Host.ISE.PowerShellTab.DisplayNameEventArgs)">
            <summary>
            Called when the DisplayName property is changing in any item in the collection to give the collection a chance to prevent the change.
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.UICollection`1">
            <summary>
            Collection that performs all update actions in the UI thread and that therefore can be
            used as the type for a variable exposed to scripts and used internally.
            </summary>
            <typeparam name="T">The type of the elements in the collection.</typeparam>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.UICollection`1.emptyList">
            <summary>
            Used in notifications if an empty list is needed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.UICollection`1.underlyingCollection">
            <summary>
            The underlying collection used to implement the interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.UICollection`1.isReadOnly">
            <summary>
            Indicates if the collection is read only
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.#ctor">
            <summary>
            Initializes a new instance of the UICollection class.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.UICollection`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.UICollection`1.CollectionChanging">
            <summary>
            Occurs when the collection is about to change.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.UICollection`1.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.UICollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.UICollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.Add(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The object to add to the collection.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific value.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>true if item is found in the collection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from collection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the collection.
            </summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>true if item was successfully removed from the collection; otherwise, false. This method also returns false if item is not found in the original collection.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that iterates through the collection.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the collection.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the collection item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Notifies of a change in the collection.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.UnderlyingCollection_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Repasses changes in the underlying collection to this collection.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingWasCanceled(Microsoft.PowerShell.Host.ISE.UICollection{`0}.NotifyCollectionChangingEventArgs)">
            <summary>
            Notifies the collection is about to change and returns true if the operation should be canceled.
            </summary>
            <param name="e">event arguments.</param>
            <returns>True if the operation should be canceled;</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingEventArgs">
            <summary>
            Class used as parameters for an event sent before performing an action;
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingEventArgs.action">
            <summary>
            Event action.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingEventArgs.newItems">
            <summary>
            New item added to the collection.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingEventArgs.oldItems">
            <summary>
            Old item removed from the collection.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingEventArgs.cancelAction">
            <summary>
            Set to true if the action should be cancelled.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the NotifyCollectionChangingEventArgs class.
            </summary>
            <param name="action">Event action.</param>
            <param name="newItems">New Items.</param>
            <param name="oldItems">Old Items.</param>
            <exception cref="T:System.ArgumentNullException">
            If the action is Add, Move or Replace and <paramref name="newItems"/> is null or
            If the action is Remove, Move or Replace and <paramref name="oldItems"/> is null.
            If any item in <paramref name="newItems"/> is null.
            If any item in <paramref name="oldItems"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="action"/> is invalid or
            If <paramref name="action"/> is Add or Reset and <paramref name="oldItems"/> is not null or
            If <paramref name="action"/> is Remove or Reset and <paramref name="newItems"/> is not null
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingEventArgs.OldItems">
            <summary>
            Gets the old item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingEventArgs.Action">
            <summary>
            Gets the event action.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingEventArgs.NewItems">
            <summary>
            Gets the new item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.UICollection`1.NotifyCollectionChangingEventArgs.CancelAction">
            <summary>
            Gets or sets a value indicating whether the action should be cancelled.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.IAddOnToolHostObject">
            <summary>
            Interface implemented by AddOnTools to give them access to the host object
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.IAddOnToolHostObject.HostObject">
            <summary>
            Gets or sets the host object. This will be set on ISE before the control is displayed
            with the root of the object model.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEAddOnTool">
            <summary>
            A tool to be added to ISE
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEAddOnTool.name">
            <summary>
            The tool name
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEAddOnTool.isVisible">
            <summary>
            indicates if the tool is visible
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEAddOnTool.control">
            <summary>
            The window with the tool user interface
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnTool.#ctor(System.String,System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the ISEAddOnTool class.
            Internal since we want the Add Method in AddOnCollection to be used
            </summary>
            <param name="name">AddOn's Name</param>
            <param name="control">Window with the AddOn GUI</param>
            <exception cref="T:System.ArgumentNullException">If name or control are null.</exception>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.ISEAddOnTool.PropertyChanged">
            <summary>
            Notifies of changes in property values
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEAddOnTool.Name">
            <summary>
            Gets the tool name
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEAddOnTool.IsVisible">
            <summary>
            Gets or sets a value indicating whether the tool is visible
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEAddOnTool.Control">
            <summary>
            Gets a value for the window with the tool user interface
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEAddOnTool.PropertyChangedHandler">
            <summary>
            Gets a value exposed so tests can monitor if the events are being listened to
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnTool.OnPropertyChanged(System.String)">
            <summary>
            Trigers the PropertyChangedEvent if there are listeners.
            </summary>
            <param name="propertyName">Property that changed.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEAddOnToolAddedOrRemovedEventArgs">
            <summary>
            Arguments for the AddOnTool events
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEAddOnToolAddedOrRemovedEventArgs.tool">
            <summary>collection where the event happened</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEAddOnToolAddedOrRemovedEventArgs.added">
            <summary>
            Value indicating the tool has been added
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnToolAddedOrRemovedEventArgs.#ctor(Microsoft.PowerShell.Host.ISE.ISEAddOnTool,System.Boolean)">
            <summary>
            Initializes a new instance of the ISEAddOnToolAddedOrRemovedEventArgs class.
            </summary>
            <param name="tool">tool where the event happened</param>
            <param name="added">value indicating whether the tool has been added</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEAddOnToolAddedOrRemovedEventArgs.Added">
            <summary>
            Gets a value indicating whether the tool has been added
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEAddOnToolAddedOrRemovedEventArgs.Tool">
            <summary>
            Gets the collection where the event happened
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection">
            <summary>
            Collection of ISEAddOnTool
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection.#ctor">
            <summary>
            Initializes a new instance of the ISEAddOnToolCollection class.
            Made internal to prevent the creation of this class
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection.Add(System.String,System.Type)">
            <summary>
            Adds a new ISEAddOnTool to the collection with IsVisible set to false
            </summary>
            <param name="name">AddOn tool name</param>
            <param name="controlType">tool control type</param>
            <returns>the tool that was added</returns>
            <exception cref="T:System.ArgumentNullException">If name or controlType are null</exception>
            <exception cref="T:System.ArgumentException">
            If: 
                name or controlType are null
                there is no default constructor for controlType or
                it could not create an instance of the controlType or
                the instance of controlType is not a Control
                the instance of controlType does not implement IAddOnToolHostObject
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection.Add(System.String,System.Type,System.Boolean)">
            <summary>
            Adds a new ISEAddOnTool to the collection with IsVisible set to false
            </summary>
            <param name="name">AddOn tool name</param>
            <param name="controlType">tool control type</param>
            <param name="isVisible">true if the tool is supposed to be visible</param>
            <returns>the tool that was added</returns>
            <exception cref="T:System.ArgumentNullException">If name or controlType are null</exception>
            <exception cref="T:System.ArgumentException">
            If: 
                name or controlType are null
                there is no default constructor for controlType or
                it could not create an instance of the controlType or
                the instance of controlType is not a Control
                the instance of controlType does not implement IAddOnToolHostObject
            </exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection.Contains(System.Windows.Controls.UserControl)">
            <summary>
            Returns true if this collection contains an AddOn tool with the control
            </summary>
            <param name="control">control we want to check for membership to the collection</param>
            <returns>true if this collection contains an AddOn tool with the control</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection.Add(System.String,System.Windows.Controls.Control,System.Boolean)">
            <summary>
            Adds a new ISEAddOnTool to the collection
            </summary>
            <param name="name">AddOn tool name</param>
            <param name="control">tool control</param>
            <param name="isVisible">true if the tool is supposed to be visible</param>
            <returns>the tool that was added</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection.Add(System.String,System.Windows.Controls.Control)">
            <summary>
            Adds a new ISEAddOnTool to the collection with IsVisible set to false
            </summary>
            <param name="name">AddOn tool name</param>
            <param name="control">tool control</param>
            <returns>the tool that was added</returns>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEAddOnToolEventArgs">
            <summary>
            Arguments for the AddOnTool events
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEAddOnToolEventArgs.tool">
            <summary>collection where the event happened</summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnToolEventArgs.#ctor(Microsoft.PowerShell.Host.ISE.ISEAddOnTool)">
            <summary>
            Initializes a new instance of the ISEAddOnToolEventArgs class.
            </summary>
            <param name="tool">tool where the event happened</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEAddOnToolEventArgs.Tool">
            <summary>
            Gets the collection where the event happened
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEAddOnToolPaneOpenOrClosedEventArgs">
            <summary>
            Arguments for the ISEAddOnToolCollection events
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEAddOnToolPaneOpenOrClosedEventArgs.collection">
            <summary>collection where the event happened</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEAddOnToolPaneOpenOrClosedEventArgs.opened">
            <summary>
            Value indicating the pane has been opened
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEAddOnToolPaneOpenOrClosedEventArgs.#ctor(Microsoft.PowerShell.Host.ISE.ISEAddOnToolCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the ISEAddOnToolPaneOpenOrClosedEventArgs class.
            </summary>
            <param name="collection">collection where the event happened</param>
            <param name="opened">value indicating the pane has been opened</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEAddOnToolPaneOpenOrClosedEventArgs.Collection">
            <summary>
            Gets the collection where the event happened
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEAddOnToolPaneOpenOrClosedEventArgs.Opened">
            <summary>
            Gets a value indicating whether the pane has been opened
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEMenuItem">
            <summary>
            Extension menu item.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEMenuItem.keyGestureConverter">
            <summary>
            Used to retrieve the string representation of a KeyGesture
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEMenuItem.shortcut">
            <summary>
            Shortcut to the menu item.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEMenuItem.submenus">
            <summary>
            Submenus of this menu item.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEMenuItem.action">
            <summary>
            Script to be executed.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEMenuItem.displayName">
            <summary>
            Name to be displayed in the menu.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEMenuItem.parent">
            <summary>
            Parent menu item. There is only one parent, so the same item is prevented from being added twice as a submenu.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEMenuItem.#ctor(System.String,System.Management.Automation.ScriptBlock,System.Windows.Input.KeyGesture)">
            <summary>
            Initializes a new instance of the ISEMenuItem class.
            </summary>
            <param name="displayName">Name to be displayed in the menu.</param>
            <param name="executeScript">Script to be executed.</param>
            <param name="shortcut">Shortcut to the menu item.</param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="displayName"/> is null or 
            if the <paramref name="shortcut"/> is not null, but the <paramref name="executeScript"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the <paramref name="displayName"/> is empty.
            </exception>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEMenuItem.Action">
            <summary>
            Gets the script to be executed.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEMenuItem.DisplayName">
            <summary>
            Gets the name to be displayed in the menu.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEMenuItem.Shortcut">
            <summary>
            Gets the shortcut to the menu item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEMenuItem.Submenus">
            <summary>
            Gets the submenus of this menu item.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEMenuItem.ShortcutDisplayName">
            <summary>
            Gets the display name for the shortcut.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEMenuItem.KeyGestureString(System.Windows.Input.KeyGesture)">
            <summary>
            Returns the string representation of the <paramref name="keyGesture"/>.
            </summary>
            <param name="keyGesture">key gesture we want a string representation from.</param>
            <returns>The string representation of the <paramref name="keyGesture"/>.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEMenuItem.Submenus_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Sets a newItem's parent and propagate changes to this.parent.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event arguments.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEMenuItem.Submenus_CollectionChanging(System.Object,Microsoft.PowerShell.Host.ISE.UICollection{Microsoft.PowerShell.Host.ISE.ISEMenuItem}.NotifyCollectionChangingEventArgs)">
            <summary>
            Performs validation of new items added to SubMenus to make sure there are no loops or shortcut repetitions.
            This method considers the scenario where the tree containing this, and the trees with root in the new Items
            are merged, and checks for loops and shortcut conflicts in the merge.
            </summary>
            <param name="sender">event sender.</param>
            <param name="e">event parameters.</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEMenuItemCollection">
            <summary>
            Collection of menu item.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEMenuItemCollection.#ctor">
            <summary>
            Initializes a new instance of the ISEMenuItemCollection class.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEMenuItemCollection.Add(System.String,System.Management.Automation.ScriptBlock,System.Windows.Input.KeyGesture)">
            <summary>
            Adds a new ISEMenuItem to the collection returning the item just added.
            </summary>
            <param name="displayName">Name to be displayed in the menu.</param>
            <param name="action">Script to be executed.</param>
            <param name="shortcut">Shortcut to the menu item.</param>
            <exception cref="T:System.ArgumentNullException">
            If the <paramref name="displayName"/> is null or 
            if the <paramref name="shortcut"/> is not null, but the <paramref name="action"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            If the <paramref name="displayName"/> is empty.
            </exception>
            <returns> The ISEMenuItem added in this call. </returns>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ISEOptions">
            <summary>
            Settings for the Windows Powershell Graphical host.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.defaultOptions">
            <summary>
            The default options
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.fontSize">
            <summary>
            The font size of all editors
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.zoom">
            <summary>
            The zoom of all editors
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.selectedScriptPaneState">
            <summary>
            State of the script pane.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.showToolBar">
            <summary>
            true to show the toolbar
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.showLineNumbers">
            <summary>
            true to show line numbers
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.showOutlining">
            <summary>
            true to show outlining
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.showWarningBeforeSavingOnRun">
            <summary>
            true to warn before saving on run
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.showWarningForDuplicateFiles">
            <summary>
            true to warn before opening the same file in a different PowerShellTab
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.tokenColors">
            <summary>
            The colors for the input and script editor tokens.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.consoleTokenColors">
            <summary>
            The colors for the console tokens
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.xmlTokenColors">
            <summary>
            The colors for xml file tokens
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.isDefault">
            <summary>
            True when the public properties cannot be set (for default options).
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.fontName">
            <summary>
            Font name in use.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.errorForegroundColor">
            <summary>
            Foreground color for errors
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.errorBackgroundColor">
            <summary>
            Background color for errors
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.warningForegroundColor">
            <summary>
            Foreground color for warnings
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.warningBackgroundColor">
            <summary>
            Background color for warnings
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.debugForegroundColor">
            <summary>
            Foreground color for debug
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.debugBackgroundColor">
            <summary>
            Background color for debug
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.verboseForegroundColor">
            <summary>
            Foreground color for verbose
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.verboseBackgroundColor">
            <summary>
            Background color for verbose
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.consolePaneTextBackgroundColor">
            <summary>
            Background color for the console text.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.consolePaneBackgroundColor">
            <summary>
            Background color for the console.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.consolePaneForegroundColor">
            <summary>
            The foreground color for the console text.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.scriptPaneBackgroundColor">
            <summary>
            Background color for the files.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.scriptPaneForegroundColor">
            <summary>
            Foreground color for non script files in the script pane.
            The foreground color for script files is specified in TokenColors.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.useLocalHelp">
            <summary>
            Indicates help should be consulted locally.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.autoSaveMinuteInterval">
            <summary>
            Indicates the interval in minutes for auto saving files.
            Use a negative number to turn off the auto save feature.
            The tipe is short because short.MaxValue works fine when used 
            in the timspan of a dispatchTimer, int.MaxValue throws an exception.
            short.MaxValue in minutes is 22.75 days. That sounds like way past 
            what one would want for the interval.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.showDefaultSnippets">
            <summary>
            Indicates default snippets should be displayed
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.mruCount">
            <summary>
            Maximum number of MRU files
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.showIntellisenseInConsolePane">
            <summary>
            value indicating whether Intellisense should be displayed in the console pane
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.showIntellisenseInScriptPane">
            <summary>
            value indicating whether Intellisense should be displayed in the script pane
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.useEnterToSelectInConsolePaneIntellisense">
            <summary>
            value indicating whether Enter should select an item from the console pane intellisense
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.useEnterToSelectInScriptPaneIntellisense">
            <summary>
            value indicating whether Enter should select an item from the script pane intellisense
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ISEOptions.intellisenseTimeoutInSeconds">
            <summary>
            Indicates the intellisense timeout in seconds
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEOptions.#ctor">
            <summary>
            Initializes a new instance of the ISEOptions class.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.ISEOptions.PropertyChanged">
            <summary>
            For INotifyPropertyChanged
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.SelectedScriptPaneState">
            <summary>
            Gets or sets the state of the script pane when it is expanded.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ShowDefaultSnippets">
            <summary>
            Gets or sets a value indicating whether the default snippets should be displayed
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ShowToolBar">
            <summary>
            Gets or sets a value indicating whether the toolbar is visible
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ShowOutlining">
            <summary>
            Gets or sets a value indicating whether outlining should be displayed
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ShowLineNumbers">
            <summary>
            Gets or sets a value indicating whether line numbers should be displayed
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.TokenColors">
            <summary>
            Gets the colors for the input and script editor tokens.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ConsoleTokenColors">
            <summary>
            Gets the colors for the console editor tokens.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.XmlTokenColors">
            <summary>
            Gets the colors for xml file tokens.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.DefaultOptions">
            <summary>
            Gets the default values for the options.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.FontSize">
            <summary>
            Gets or sets the font size used in the output, input and script editors.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.Zoom">
            <summary>
            Gets or sets the zoom used in the output, input and script editors.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.FontName">
            <summary>
            Gets or sets the font name currently in use in the script editors and console pane.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ErrorForegroundColor">
            <summary>
            Gets or sets the foreground color for errors.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ErrorBackgroundColor">
            <summary>
            Gets or sets the background color for errors.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.WarningForegroundColor">
            <summary>
            Gets or sets the foreground color for warnings.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.WarningBackgroundColor">
            <summary>
            Gets or sets the background color for warnings.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.VerboseForegroundColor">
            <summary>
            Gets or sets the foreground color for verbose messages.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.VerboseBackgroundColor">
            <summary>
            Gets or sets the background color for verbose mesages.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.DebugForegroundColor">
            <summary>
            Gets or sets the foreground color for debug messages.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.DebugBackgroundColor">
            <summary>
            Gets or sets the background color for debug mesages.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ConsolePaneBackgroundColor">
            <summary>
            Gets or sets the background color for the whole conosle area.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ConsolePaneTextBackgroundColor">
            <summary>
            Gets or sets the background color for output text blocks.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ConsolePaneForegroundColor">
            <summary>
            Gets or sets the foreground color for the console text.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ScriptPaneBackgroundColor">
            <summary>
            Gets or sets the background color for scripts.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ScriptPaneForegroundColor">
            <summary>
            Gets or sets the Foreground color for non script files in the script pane.
            The foreground color for script files is specified in <seealso cref="P:Microsoft.PowerShell.Host.ISE.ISEOptions.TokenColors"/>.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ShowWarningForDuplicateFiles">
            <summary>
            Gets or sets a value indicating whether there should be a warning message when opening the same file in different
            runspaces regarding the fact that the same editor will be used.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ShowWarningBeforeSavingOnRun">
            <summary>
            Gets or sets a value indicating whether there should be a warning message when saving a script before running.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.UseLocalHelp">
            <summary>
            Gets or sets a value indicating whether help should be consulted locally.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.AutoSaveMinuteInterval">
            <summary>
            Gets or sets a value indicating the interval in minutes for auto saving files.
            Use a negative number to turn off the auto save feature.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.MruCount">
            <summary>
            Gets or sets a value indicating whether the toolbar is visible
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ShowIntellisenseInConsolePane">
            <summary>
            Gets or sets a value indicating whether Intellisense should be displayed in the console pane
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ShowIntellisenseInScriptPane">
            <summary>
            Gets or sets a value indicating whether Intellisense should be displayed in the script pane
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.UseEnterToSelectInConsolePaneIntellisense">
            <summary>
            Gets or sets a value indicating whether Enter should select an item from the console pane intellisense
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.UseEnterToSelectInScriptPaneIntellisense">
            <summary>
            Gets or sets a value indicating whether Enter should select an item from the console pane intellisense
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.IntellisenseTimeoutInSeconds">
            <summary>
            Gets or sets a value indicating the intellisense timeout in seconds
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.TokenColorsInternal">
            <summary>
            Gets the colors for the input and script editor tokens in the internal type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ConsoleTokenColorsInternal">
            <summary>
            Gets the colors for the console editor tokens in the internal type.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.XmlTokenColorsInternal">
            <summary>
            Gets the colors for the xml file tokens in the internal type
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ISEOptions.ZoomLabel">
            <summary>
            Gets the label for a zoom control
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEOptions.RestoreDefaults">
            <summary>
            Restores the dafault values for all options.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEOptions.RestoreDefaultTokenColors">
            <summary>
            Restores the default values of the TokenColors property.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEOptions.RestoreDefaultConsoleTokenColors">
            <summary>
            Restores the default values of the ConsoleTokenColors property.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEOptions.RestoreDefaultXmlTokenColors">
            <summary>
            Restores the default values of the TokenColors property.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEOptions.LoadUserSettingsOptions">
            <summary>
            Loads the option values from the user settings.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEOptions.IsSelectedScriptPaneStateValid(Microsoft.PowerShell.Host.ISE.SelectedScriptPaneState)">
            <summary>
            Verifies that a SelectedScriptPaneState is valid
            </summary>
            <param name="scriptPaneState">value to verify</param>
            <returns>true if the SelectedScriptPaneState is valid</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEOptions.GetDefaultOptions">
            <summary>
            Gets an ISEOptions object with all the properties set to the default values
            </summary>
            <returns>An ISEOptions object with all the properties set to the default values</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEOptions.LoadUserSettingFontNameAndSize">
            <summary>
            Loads the user setting font name and size if they are valid, or uses the default font name and size otherwise
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ISEOptions.OnNotifyPropertyChanged(System.String)">
            <summary>
            Used internaly to notify of a property change
            </summary>
            <param name="propertyName">name of the property that changed</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.MruManager">
            <summary>
            Contains the code to deal with MRU (Most Recently Used) files
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.MruManager.mainWindow">
            <summary>
            main window where the menu is built
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.MruManager.#ctor(Microsoft.Windows.PowerShell.Gui.Internal.MainWindow)">
            <summary>
            Initializes a new instance of the MruManager class
            </summary>
            <param name="mainWindow">main window where the menu is built</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.MruManager.AddMru(System.String)">
            <summary>
            Adds the <paramref name="filePath"/> at the top of the list.
            If  <paramref name="filePath"/> is already present, it is removed from its previous position before
            added to the top.
            The menu is updated after the addition.
            </summary>
            <param name="filePath">path to be added to the MRU</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.MruManager.RemoveMru(System.String)">
            <summary>
            Removes <paramref name="filePath"/> from the MRU because it could not be opened, for instance.
            /// The menu is updated after the removal.
            </summary>
            <param name="filePath">path to be removed from the MRU</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.MruManager.SetMaxCount(System.Int32)">
            <summary>
            Sets the maximum count of MRU entries removing existing entries past that count.
            The menu is updated after setting.
            </summary>
            <param name="maxCount">maximum count of MRU items</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.MruManager.UpdateMenu">
            <summary>
            Updates the menu after additions/removals from the MRU or explicitly when the main window 
            is constructed
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.MruManager.GetMruPosition(System.String)">
            <summary>
            Gets the position for <paramref name="filePath"/> in the MRU or -1 if it is not found
            </summary>
            <param name="filePath">path to get the position from</param>
            <returns>the position for <paramref name="filePath"/> in the MRU or -1 if it is not found</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.MruManager.Options_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when the options properties change to update the maximum count
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ObjectModelRoot">
            <summary>
            Host object representing the whole application.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.currentPowerShellTab">
            <summary>
            The current PowerShellTab associated with this host object.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.currentFile">
            <summary>
            The current ISEFile associated with this host object.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.usedInAddOnTools">
            <summary>
            value indicating whether this object is used in AddOn tools.
            True if it is used in an AddOn tool, false if it is used in ISE
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.currentVisibleHorizontalTool">
            <summary>
            The currently visible horizontal AddOn tools
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.currentVisibleVerticalTool">
            <summary>
            The currently visible vertical AddOn tools
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.#ctor(Microsoft.PowerShell.Host.ISE.PowerShellTab,System.Boolean)">
            <summary>
            Initializes a new instance of the ObjectModelRoot class.
            </summary>
            <param name="currentPowerShellTab">the current PowerShellTab associated with this host object.</param>
            <param name="usedInAddOnTools">true if this object is going to be used in AddOnTools</param>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.CurrentPowerShellTab">
            <summary>
            Gets the current PowerShellTab associated with this host object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.CurrentFile">
            <summary>
            Gets the current <seealso cref="T:Microsoft.PowerShell.Host.ISE.ISEFile"/> associated with this host object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.CurrentVisibleHorizontalTool">
            <summary>
            Gets the current visible horizontal <seealso cref="T:Microsoft.PowerShell.Host.ISE.ISEAddOnTool"/> associated with this host object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.CurrentVisibleVerticalTool">
            <summary>
            Gets the current visible vertical <seealso cref="T:Microsoft.PowerShell.Host.ISE.ISEAddOnTool"/> associated with this host object.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.Options">
            <summary>
            Gets the application options.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObjectModelRoot.PowerShellTabs">
            <summary>
            Gets the Runspaces in the application.
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2">
            <summary>
            Dictionary that:
              1) Notifies of changes 
              2) Can be set to read only
              3) Access its data in the UI Thread
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.underlyingDictionary">
            <summary>
            The underlying dictionary passed to the constructor.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.readOnly">
            <summary>
            Returns true if this collection is readonly
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the ObservableDictionary class.
            </summary>
            <param name="readOnly">true if Adding Removing and setting should not be allowed.</param>
            <param name="comparer">the comparer to be used for the keys.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ObservableDictionary class.
            </summary>
            <param name="readOnly">true if Adding Removing and setting should not be allowed.</param>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.CollectionChanged">
            <summary>
            Notifies changes in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.Count">
            <summary>
            Gets the number of elements in a sequence. 
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the ICollection is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.Keys">
            <summary>
            Gets an ICollection containing the keys of the IDictionary.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.Values">
            <summary>
            Gets an ICollection containing the values in the IDictionary.
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <returns>The element with the specified key.</returns>
            <exception cref="T:System.NotSupportedException">When setting the value and readonly has been passed to the contructor.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the IDictionary.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">When calling the method and readonly has been passed to the contructor.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the IDictionary contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the IDictionary.</param>
            <returns>true if the IDictionary contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the ICollection. 
            </summary>
            <param name="key">The object to remove from the ICollection.</param>
            <returns>true if item was successfully removed from the ICollection; otherwise, false. This method also returns false if item is not found in the original ICollection.</returns>
            <exception cref="T:System.NotSupportedException">When calling the method and readonly has been passed to the contructor.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns>true if the object that implements IDictionary contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the ICollection.
            </summary>
            <param name="item">The object to add to the ICollection.</param>
            <exception cref="T:System.NotSupportedException">When calling the method and readonly has been passed to the contructor.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.Clear">
            <summary>
            Removes all items from the ICollection.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the ICollection contains a specific value.
            </summary>
            <param name="item">The object to locate in the ICollection.</param>
            <returns>true if item is found in the ICollection; otherwise, false.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index. 
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the ICollection.
            </summary>
            <param name="item">The object to remove from the ICollection.</param>
            <returns>true if item was successfully removed from the ICollection; otherwise, false. This method also returns false if item is not found in the original ICollection.</returns>
            <exception cref="T:System.NotSupportedException">When calling the method and readonly has been passed to the contructor.</exception>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>An IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.ResetUnderlyingDictionary(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Resets the underlying dictionary with the values in <paramref name="newUnderlyingDictionary"/>.
            </summary>
            <param name="newUnderlyingDictionary">new values for the underlyingDictionary</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.OnNotifyReset">
            <summary>
            Called to notify of major changes to the dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.OnNotifyAdd(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Called to notify of additions to the dictionary.
            </summary>
            <param name="item">Item added.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.OnNotifyRemove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Called to notify of removales to the dictionary.
            </summary>
            <param name="item">Item removed.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ObservableDictionary`2.OnNotifyReplace(System.Collections.Generic.KeyValuePair{`0,`1},System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Called to notify when an item is replaced in the dictionary.
            </summary>
            <param name="newItem">the old value</param>
            <param name="oldItem">the new value</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection">
            <summary>
            Collection used in the Visible ISEAddOnTool collections allowing the internal code
            to change the collection in response to changes in the ISEAddOnTool collections
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.modificationAllowed">
            <summary>
            flag that allows internal modifications to the collection
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.selectedAddOnTool">
            <summary>
            The ISEAddOnTool that is currently selected
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.#ctor">
            <summary>
            Initializes a new instance of the ReadOnlyISEAddOnToolCollection class.
            </summary>
        </member>
        <member name="E:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.PropertyChanged">
            <summary>
            For INotifyPropertyChanged
            </summary>
        </member>
        <member name="P:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.SelectedAddOnTool">
            <summary>
            Gets or sets the currently selected Add-on tool
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.Contains(System.Windows.Controls.UserControl)">
            <summary>
            Returns true if this collection contains an AddOn tool with the control
            </summary>
            <param name="control">control we want to check for membership to the collection</param>
            <returns>true if this collection contains an AddOn tool with the control</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.Contains(Microsoft.PowerShell.Host.ISE.UICollection{Microsoft.PowerShell.Host.ISE.ISEAddOnTool},System.Windows.Controls.UserControl)">
            <summary>
            Returns true if the collection contains an AddOn tool with the control
            </summary>
            <param name="collection">collection that might contain <paramref name="control"/></param>
            <param name="control">control we want to check for membership to the collection</param>
            <returns>true if this collection contains an AddOn tool with the control</returns>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.InternalSetSelectedTool(Microsoft.PowerShell.Host.ISE.ISEAddOnTool)">
            <summary>
            Selects the <paramref name="tool"/>. This allows setting the selected tool to null.
            </summary>
            <param name="tool">File to be selected.</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.InternalAdd(Microsoft.PowerShell.Host.ISE.ISEAddOnTool)">
            <summary>
            Called from internal code to add new members to the collection
            </summary>
            <param name="addOnTool">tool to be added</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.InternalClear">
            <summary>
            Called from internal code to clear the collection
            </summary>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.ReadOnlyISEAddOnCollection_CollectionChanging(System.Object,Microsoft.PowerShell.Host.ISE.UICollection{Microsoft.PowerShell.Host.ISE.ISEAddOnTool}.NotifyCollectionChangingEventArgs)">
            <summary>
            Called when modifications to the collection are attempted
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:Microsoft.PowerShell.Host.ISE.ReadOnlyISEAddOnToolCollection.OnNotifyPropertyChanged(System.String)">
            <summary>
            Used internaly to notify of a property change
            </summary>
            <param name="propertyName">name of the property that changed</param>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.SelectedScriptPaneState">
            <summary>
            The possible visualizations of the script pane when it is expanded.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.SelectedScriptPaneState.Top">
            <summary>
            Script pane is to the top
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.SelectedScriptPaneState.Right">
            <summary>
            Script pane is to the right
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.SelectedScriptPaneState.Maximized">
            <summary>
            Script pane is maximized
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.SnippetStrings">
            <summary>
            Color Names used in options
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.SnippetStrings.ModuleNotFound">
            <summary>
            Error Message = Module not found.
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.SnippetStrings.NoSnippetsInModule">
            <summary>
            Module {0} doesn't contain a {1} folder
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.SnippetStrings.SnippetsNoCloseCData">
            <summary>
            {0} cannot contain the following sequence of characters: "{1}".
            </summary>
        </member>
        <member name="T:Microsoft.PowerShell.Host.ISE.PSXmlTokenType">
            <summary>
            Token colors for XML
            </summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PSXmlTokenType.Tag">
            <summary>Angle brackets</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PSXmlTokenType.QuotedString">
            <summary>Attribute value</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PSXmlTokenType.CommentDelimiter">
            <summary>Delimiter for comments</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PSXmlTokenType.Comment">
            <summary>Xml comments</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PSXmlTokenType.ElementName">
            <summary>Element name</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PSXmlTokenType.Attribute">
            <summary>Xml Attribute</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PSXmlTokenType.Text">
            <summary>All other xml elements</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PSXmlTokenType.Quote">
            <summary>String quote</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PSXmlTokenType.MarkupExtension">
            <summary>Xaml markup extension</summary>
        </member>
        <member name="F:Microsoft.PowerShell.Host.ISE.PSXmlTokenType.CharacterData">
            <summary>CDATA section</summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
