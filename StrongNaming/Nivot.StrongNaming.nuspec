<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2011/08/nuspec.xsd">
    <metadata>
        <id>Nivot.StrongNaming</id>
        <version>2.0.0</version>
        <title>Assembly Strong Naming Toolkit</title>
        <authors>oisin</authors>
        <owners>Oisin Grehan</owners>
        <licenseUrl>http://opensource.org/licenses/MS-PL</licenseUrl>
        <requireLicenseAcceptance>false</requireLicenseAcceptance>
        <description>This is targeted for signing the contents of  NuGet packages that are using unsigned assemblies, in order to be able to link to these packages where the consuming project is strongly named. Access to the original source code is not required, and you may sign any assembly with your own strong naming key. You may also delay-sign if desired.</description>
        <summary>A set of PowerShell Cmdlets to facilitate signing of unsigned 3rd party assemblies with a key of your choice, to allow them to be referenced by strongly named projects.</summary>
        <releaseNotes>Nivot.StrongNaming
==================

* v2.0.0 [2025/05/25]
  * upgrade to net48

* v1.0.3  [2014/01/26]
  * Assembly references without a strongname will be given a  strong name using the same
    public key token as the primary target assembly.
* v1.0.2  [2013/04/30]
  * Added license and project URL.
  * Added readme.MD
* v1.0.1  [2013/04/29]
  * Updated metadata.
* v1.0.0  [2013/04/29]
  * Initial release.

Details
=======

All cmdlets accept pipeline input. The AssemblyFile parameter is aliased to PSPath, so it will
bind to piped files.  

* Test-StrongName [-AssemblyFile] &lt;string[]&gt;  [&lt;CommonParameters&gt;]

    Returns true if an assembly has a strong name.

* Import-StrongNameKeyPair [-KeyFile] &lt;string&gt;  [&lt;CommonParameters&gt;]
* Import-StrongNameKeyPair [-KeyFile] &lt;string&gt; -Password &lt;securestring&gt;  [&lt;CommonParameters&gt;]

    Imports a simple unprotected SNK or a password-protected PFX, returning a StrongNameKeyPair
 instance for consumption by Set-StrongName. If your PFX file has a blank password, you must
 provide a SecureString of the empty string "". SecureString instances are returned from
    the Read-Host cmdlet with the -AsSecureString parameter.

* Set-StrongName [-AssemblyFile] &lt;string[]&gt; -KeyPair &lt;StrongNameKeyPair&gt; [-NoBackup] [-Passthru]
    [-Force] [-DelaySign] [-WhatIf] [-Confirm]  [&lt;CommonParameters&gt;]

    Assigns a strong name identity to an assembly.

    The -KeyPair parameter accepts a System.Reflection.StrongNameKeyPair output from the
 Import-StrongNameKeyPair cmdlet., which accepts either simple unprotected SNK files or
 password-protected PFX files.

    The -NoBackup switch directs the cmdlet to skip creating a .bak file alongside the newly
 signed assembly. 

    The -Passthru switch will output a FileInfo representing the newly signed assembly to
 the pipeline.

    The -DelaySign switch will create a delay-signed assembly from a public key only SNK
 (it can also create one if the SNK contains both private and public keys.) This is useful
 if you can't get access to the full private key at your company. This will allow you to
 compile against previously unsigned nuget packages at least.

    The -Force switch will allow you to overwrite an existing strong name on an assembly.

    NOTE: You may supply -WhatIf to see what _would_ be done, without actually doing it.

*  Get-AssemblyName [-AssemblyFile] &lt;string[]&gt;  [&lt;CommonParameters&gt;]

    Returns a System.Reflection.AssemblyName instance from any assembly file.
    
FAQ: How Do I?
==============

# get the default package root folder
PM&gt; $root = join-path (split-path $dte.solution.filename) packages

# load an unprotected snk 
PM&gt; $key = Import-StrongNameKeyPair -KeyFile .\folder\key.snk
PM&gt; dir *.dll | Set-StrongName -KeyPair $key -Verbose

# load a password-protected PFX
PM&gt; $key = Import-StrongNameKeyPair -KeyFile .\folder\key.pfx -Password (Read-Host -AsSecureString)
******

# sign some unsigned assemblies
PM&gt; cd (join-path $root unsignedPackage)
PM&gt; dir -rec *.dll | set-strongname -keypair $key -verbose

# (re)sign some assemblies forcefully
PM&gt; dir -rec *.dll | set-strongname -keypair $key -force

# sign only unsigned assemblies 
PM&gt; dir -rec *.dll | where { -not (test-strongname $_) } | set-strongname -keypair $key -verbose</releaseNotes>
        <copyright>Oisin Grehan</copyright>
        <language>en-US</language>
        <tags>powershell nuget strongname assembly package gac</tags>
        <dependencies />
    </metadata>
    <files>
        <file src="tools\init.ps1" target="tools\init.ps1" />
        <file src="..\packages\Mono.Cecil.0.9.5.4\lib\net35\Mono.Cecil.dll" target="tools\Mono.Cecil.dll" />
        <file src="bin\Release\Nivot.PowerShell.StrongNaming.dll" target="tools\Nivot.PowerShell.StrongNaming.dll" />
        <file src="Scripts\StrongNaming.psd1" target="tools\StrongNaming.psd1" />
        <file src="..\readme.md" target="readme.md" />
    </files>
</package>